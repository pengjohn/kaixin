// Application application cpp file.

// Original file name: App_KaiXinAPI.cpp
// Generated by TOPS Builder:Project wizard,Date:2010-8-24

/*!
* 
* \file   App_KaiXinApp.cpp
* \author GoZone
* \date	  2011-1-28
* \brief  应用程序事件处理
* 
* \ref    CopyRight
*/

#include "App_KaiXinApp.h"
#include "App_KaiXinMainForm.h"
#include "App_KaiXinInitForm.h"

#include "TDownload.h"
#include "KaiXinAPICommon.h"

#include "TestForm.h"
#include "curl/curl.h"
#include "TCOM_ConnectManager_IIDs.h"
#include "TCOM_ObjectEventTypes.h"
#include "MTAPI/MTAPIErr.h"

#define TIMER_GET_NEW_NOTICE		30000	//定时获取新消息
#define BREAK_IF(cond)  if (cond) break

//窗口ID管理, 如果已经存在, 则先Close, 再保存新的窗口ID
#define RefeshAPIFormID(nAccessType)\
	do{\
	if(gHwndId_KaiXinApp[nAccessType] != 0)\
						{\
						this->CloseWindowByHwndId(gHwndId_KaiXinApp[nAccessType]);\
						gHwndId_KaiXinApp[nAccessType] = 0;\
						}\
						gHwndId_KaiXinApp[nAccessType] = pWin->GetWindowHwndId();\
	}while(0)


TApp_KaiXinApp::TApp_KaiXinApp()
{
	TIClassFactory *pFactory = NULL;

	if(g_pFileDown == NULL)
		g_pFileDown = new TFileDownloadMgr;

	if(g_pFileDownEx == NULL)
		g_pFileDownEx = new TFileDownloadMgr;

	if(g_pDownload == NULL)
		g_pDownload = new IDownLoad;

	if(g_pDownloadEx == NULL)
		g_pDownloadEx = new IDownLoad;
	
	// 初始化curl engine
	curl_global_init(CURL_GLOBAL_DEFAULT);

	// 初始化TCOM模块
	do 
	{
		HRESULT hr;
		hr = TCoInitialize(NULL);
		BREAK_IF(TCOM_S_FAIL(hr));

		// 查找TCOM_ConnectManager_Interface 对象的工厂方法
		hr = TCoGetClassObject(TCLSID_ConnectManager, TCOM_CLSCTX_INPROC_SERVER, NULL, 
			TIID_IClassFactory, (LPVOID *)&pFactory);
		BREAK_IF(TCOM_S_FAIL(hr));

		// 生成TCOM_ConnectManager_Interface实例
		hr = pFactory->CreateInstance(NULL, TIID_ConnectManager, (LPVOID *)&m_pConnectManger);
		BREAK_IF(TCOM_S_FAIL(hr));
	} 
	while (0);

	if (pFactory)
	{
		pFactory->Release();
		pFactory = NULL;
	}

	m_nTimerId = -1;
	m_nMsgTimerId = -1;
	gHwndId_Init = 0;
	gHwndId_Login = 0;
	gHwndId_WaitingBox = 0;
	
	m_bReConnected = FALSE;
	m_bConnected = FALSE;

	//清楚上一次的log
	KaiXin_Log_Init();
}

TApp_KaiXinApp::~TApp_KaiXinApp()
{
	curl_global_cleanup();

	if(g_pFileDown != NULL)
		{
		delete g_pFileDown;
		g_pFileDown = NULL;
		}

	if(g_pFileDownEx != NULL)
		{
		delete g_pFileDownEx;
		g_pFileDownEx = NULL;
		}
	
	if(g_pDownload != NULL)
		{
		delete g_pDownload;
		g_pDownload = NULL;
		}
	
	if(g_pDownloadEx != NULL)
		{
		delete g_pDownloadEx;
		g_pDownloadEx = NULL;
		}
	

	// 释放资源
	if (m_pConnectManger)
	{
		m_pConnectManger->Release();
	}	
}

/**
 * 关闭除了登录界面的其他所有Form 
 */
void TApp_KaiXinApp::ClosePanelForm(void)
{

	for(int i=0; i<ARR_SIZE(gHwndId_KaiXinApp); i++)
	{
		if(gHwndId_KaiXinApp[i] != 0)
		{
			this->CloseWindowByHwndId(gHwndId_KaiXinApp[i]);
			gHwndId_KaiXinApp[i] = 0;
		}		
	}
}

Boolean  TApp_KaiXinApp::EventHandler(EventType*  pEvent)
{
	Boolean     bHandled = FALSE;
	HRESULT hResult = -1;

	switch(pEvent->eType)
	{
	case EVENT_AppLoad:
		{
			TInitForm *pWin = new TInitForm(this);
			if (pWin)
			{
				SetActiveWindow(pWin);
				gHwndId_Init = pWin->GetWindowHwndId();
			}
			else
			{	// 窗口创建失败，退出应用。
				SendStopEvent();
			}

			//检测缓存
			CheckCacheIsEnough();
			// 创建 Timer, 启动画面等待500ms后开始建立网络连接
			m_nTimerId = TIMER_Create(500, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, 0, 0);
			bHandled = TRUE;
			break;
		}

	case EVENT_AppStopNotify:
		{
			bHandled = FALSE;
			break;
		}

	case MESSAGE_TIMER:
		//容错,如果TimerID == 0, 则直接忽略
		if(pEvent->sParam1 == 0)
			break;

		//建立网络连接
		if (pEvent->sParam1 == m_nTimerId)
		{
			bHandled = TRUE;
			TIMER_Release(m_nTimerId);
			m_nTimerId = -1;

			// 无法拨号则退出
			if (m_pConnectManger == NULL)
			{
				TUChar  pNetErrorInfo[64] = {0};
				TUChar  TempStr[16] = {0};
				TUString::StrUtf8ToStrUnicode(TempStr, (const Char *)"(0)");
				TUString::StrCopy(pNetErrorInfo, TResource::LoadConstString(APP_KA_ID_STRING_DialupFail));
				//TUString::StrCat(pNetErrorInfo, TempStr);
				MessageBox(pNetErrorInfo, TUSTR_Kx_NULL, WMB_OK);
				m_bConnected = FALSE;
				SendStopEvent();
			}

			//自动选择账号
			CMAccount aIDs;   
			if (TCOM_S_SUCCESS(m_pConnectManger->GetDefaultAccount(&aIDs,NULL,NULL)))   
			{   
				//赋值默认账号ID为接口返回的账号ID   
				m_tAID = aIDs.uAccountID;   
			}  
			else
			{
				TUChar  pNetErrorInfo[64] = {0};
				TUChar  TempStr[16] = {0};
				TUString::StrUtf8ToStrUnicode(TempStr, (const Char *)"(1)");
				TUString::StrCopy(pNetErrorInfo, TResource::LoadConstString(APP_KA_ID_STRING_DialupFail));
				//TUString::StrCat(pNetErrorInfo, TempStr);
				//MessageBox(pNetErrorInfo, TUSTR_Kx_NULL, WMB_OK);
				m_bConnected = FALSE;
				//SendStopEvent();
				//5秒重拨一次
				m_nTimerId = TIMER_Create(5000, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, 0, 0);
				break;
			}

			//异步建立连接
			hResult = m_pConnectManger->ASyncConnect(m_tAID, &m_uConnectID);
			if(TCOM_S_FAIL(hResult))
			{
				// 拨号失败
				TUChar  pNetErrorInfo[64] = {0};
				TUChar  TempStr[16] = {0};
				TUString::StrUtf8ToStrUnicode(TempStr, (const Char *)"(2)");
				TUString::StrCopy(pNetErrorInfo, TResource::LoadConstString(APP_KA_ID_STRING_DialupFail));
				//TUString::StrCat(pNetErrorInfo, TempStr);
				//MessageBox(pNetErrorInfo, TUSTR_Kx_NULL, WMB_OK);
				m_bConnected = FALSE;
				//SendStopEvent();		
				//5秒重拨一次
				m_nTimerId = TIMER_Create(5000, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, 0, 0);
				break;
			}
		}
		//定时获取新消息数量
		else if(pEvent->sParam1 == m_nMsgTimerId)
		{
			bHandled = TRUE;		
			KaiXinAPICommon_Download(KX_MessageCenter);
		}

		break;

		// 拨号的状态改变消息
	case MTE_NTY_TYPE_CM_CONN_STATUS_CHANGED:
		{
			BREAK_IF((UInt32)pEvent->sParam1 != m_uConnectID || TCOM_S_FAIL(pEvent->sParam2));

			// 根据连接的状态消息判断联网状态
			switch (pEvent->lParam4)
			{
			case CM_CONN_STATUS_RUN:
				{
					// 联网成功
				}
				break;

			case CM_CONN_STATUS_ESTABLISH:   
				{
					// 拨号中
				}
				break;
			}

			bHandled = TRUE;
		}
		break;


		//异步拨号结果消息
	case MTE_NTY_TYPE_CM_ASYNC_METHOD_RESULT_CONNECT:
		{
			BREAK_IF((UInt32)pEvent->sParam1 != m_uConnectID);
			// 根据连接的状态消息判断联网状态
			if (TCOM_S_SUCCESS(pEvent->sParam2))
			{
				// 联网成功
				//重新拨号成功则直接返回, 
				//如果是拨号过程的重拨, 则还是需要正常流程
				m_bConnected = TRUE;
				
				if( (m_bReConnected) && (gHwndId_Init == 0) )
				{
					break;
				}
				//启动主画面,先判断是否已经启动
				if(gHwndId_Login == 0)
				{
					TMainForm *pWin = new TMainForm(this);
					if (pWin)
					{
						SetActiveWindow(pWin);
						gHwndId_Login = pWin->GetWindowHwndId();
						
						//销毁Init界面(主要是要停掉Timer)
						this->CloseWindowByHwndId(gHwndId_Init);
						gHwndId_Init = 0;
					}
				}
			} 
			else
			{
				//错误提示
				TUChar  pNetErrorInfo[64] = {0};
				TUChar  TempStr[16] = {0};
				TUString::StrUtf8ToStrUnicode(TempStr, (const Char *)"(4)");
				TUString::StrCopy(pNetErrorInfo, TResource::LoadConstString(APP_KA_ID_STRING_DialupFail));
				//TUString::StrCat(pNetErrorInfo, TempStr);
				//MessageBox(pNetErrorInfo, TUSTR_Kx_NULL, WMB_OK);
				m_bConnected = FALSE;
				//SendStopEvent();					
				//5秒重拨一次
				m_nTimerId = TIMER_Create(5000, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, 0, 0);			
			}
			bHandled = TRUE;

		}
		break;

		// 断网的状态消息
	case MTE_NTY_TYPE_CM_ASYNC_METHOD_RESULT_DISCONNECT:
		{
			BREAK_IF((UInt32)pEvent->sParam1 != m_uConnectID);
			bHandled = TRUE;

			if (TCOM_S_FAIL(pEvent->sParam2))
			{
				// 断网失败
				break;
			}

			// 断网成功
			m_bConnected = FALSE;
			m_uConnectID = 0;
		}
		break;


		//服务器主动断网消息。收到此消息，表明已经拨号已经掉线
	case MTE_NTY_TYPE_CM_CONN_ABORTED:
		{ 
			CMAccount aIDs; 
			if (TCOM_S_SUCCESS(m_pConnectManger->GetDefaultAccount(&aIDs,NULL,NULL))) 
			{ 
				m_tAID = aIDs.uAccountID; 
				hResult = m_pConnectManger->ASyncConnect(m_tAID, &m_uConnectID); 
				if (hResult < 0) 
				{ 
					// 拨号失败 
					TUChar  pNetErrorInfo[64] = {0};
					TUChar  TempStr[16] = {0};
					TUString::StrUtf8ToStrUnicode(TempStr, (const Char *)"(5)");
					TUString::StrCopy(pNetErrorInfo, TResource::LoadConstString(APP_KA_ID_STRING_DialupFail));
					//TUString::StrCat(pNetErrorInfo, TempStr);
					//MessageBox(pNetErrorInfo, TUSTR_Kx_NULL, WMB_OK);
					m_bConnected = FALSE;
					//SendStopEvent();
					//5秒重拨一次
					m_nTimerId = TIMER_Create(5000, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, 0, 0);					
				} 
			}  
			else
			{ 
				TUChar  pNetErrorInfo[64] = {0};
				TUChar  TempStr[16] = {0};
				TUString::StrUtf8ToStrUnicode(TempStr, (const Char *)"(6)");
				TUString::StrCopy(pNetErrorInfo, TResource::LoadConstString(APP_KA_ID_STRING_DialupFail));
				//TUString::StrCat(pNetErrorInfo, TempStr);
				//MessageBox(pNetErrorInfo, TUSTR_Kx_NULL, WMB_OK);
				m_bConnected = FALSE;
				//SendStopEvent();
				//5秒重拨一次
				m_nTimerId = TIMER_Create(5000, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, 0, 0);
			} 
			//拨号已断，重新连接标志位 
			m_bReConnected = TRUE; 
			bHandled = TRUE;             
		} 
		break;	

	//直接创建动态Form
	case MSG_SWITCHFORM_UPDATE_FRIENDS_NEWS:
		{
			TUpdateFriendsNewsForm *pWin = new TUpdateFriendsNewsForm( this );
			RefeshAPIFormID(KX_UpdateFriendsNews);
			bHandled = TRUE;
			break;
		}

	//直接创建好友列表Form
	case MSG_SWITCHFORM_FRIEND_LIST:
		{
			TFriendListForm *pWin = new TFriendListForm( this );
			RefeshAPIFormID(KX_FriendList);
			bHandled = TRUE;
			break;
		}

	//直接创建我的地盘Form
	case MSG_SWITCHFORM_PROFILE:
		{
			TProfileForm *pWin = new TProfileForm( this );
			RefeshAPIFormID(KX_Profile);
			bHandled = TRUE;
			break;
		}

	//直接创建组件Form
	case MSG_SWITCHFORM_APPLIST:
		{
			TApplicationListForm *pWin = new TApplicationListForm(this);
			RefeshAPIFormID(KX_ApplicationList);
			bHandled = TRUE;
			break;
		}
	//直接创建更多Form
	case MSG_SWITCHFORM_MORE:
		{
			TMoreForm *pWin = new TMoreForm( this );
			RefeshAPIFormID(KX_More);
			bHandled = TRUE;
			break;
		}
	//消息中心
	case MSG_SWITCHFORM_MESSAGE_CENTER:
		{
			TMessageCenterForm* pWin = new TMessageCenterForm(this, !FormIsValid(KX_MessageCenter));
			RefeshAPIFormID(KX_MessageCenter);			
		}
		break;
	//登出
	case MSG_LOGOUT:
		{
			if(MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_AreYouSureToLogout),TResource::LoadConstString(APP_KA_ID_STRING_Logout),WMB_OKCANCEL) == 0)
			{
				//先保存设置
				STRCPY_Ex(KaiXinUserInfo.uid, "");
				STRCPY_Ex(KaiXinUserInfo.verify, "");
				STRCPY_Ex(KaiXinUserInfo.wapverify, "");
				memset(KaiXinUserInfo.status, 0x0, sizeof(KaiXinUserInfo.status));
				memset(KaiXinUserInfo.logoPath, 0x0, sizeof(KaiXinUserInfo.logoPath));			
				KaiXinAPI_SetConfig();

				//:TODO, 返回初始登录界面
				ClosePanelForm();		

				//TODO::停止短消息读取定时器
				TIMER_Release(m_nMsgTimerId);
				m_nMsgTimerId = -1;
			}
			bHandled = TRUE;			
			break;
		}
	//退出应用,统一处理,增加提示框
	case MSG_EXIT:
		{
			if(MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_AreYouSureToExit),TResource::LoadConstString(APP_KA_ID_STRING_Exit),WMB_OKCANCEL) == 0)
			{
				//this->CloseAllWindows();
				SendStopEvent();
			}

			bHandled = TRUE;
			break;
		}
	//下载开始, 显示等待界面
	case MSG_DL_THREAD_START:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			//若下载列表中还有需要waitingBox的(不一定是当前下载), 就显示waitingBox
			if(gHwndId_WaitingBox == 0)
			{
				Boolean bNeedWaitingBox = FALSE;
				int nList = 0;
				TAListElement* pElement = NULL;
				nList = g_pFileDown->GetSize();
				for(int i=1; i<=nList; i++)
				{
					pElement = g_pFileDown->GetElement(i);
					if(GetApiNeedWaitingBox((Kx_AccessType)pElement->accessType) )
					{
						bNeedWaitingBox = TRUE;
						break;
					}
					
				}

				if(bNeedWaitingBox)
				{
					TWaitingBoxForm* g_WaitingBoxForm = new TWaitingBoxForm(this);
					gHwndId_WaitingBox = g_WaitingBoxForm->GetWindowHwndId();
				}
			}
			#if 0
			bHandled = GetApiNeedWaitingBox((Kx_AccessType)notifyData.nAccessType);
			if(bHandled == TRUE)
			{
				if(gHwndId_WaitingBox != 0)
				{
					this->CloseWindowByHwndId(gHwndId_WaitingBox);
					gHwndId_WaitingBox = 0;
				}

				TWaitingBoxForm* g_WaitingBoxForm = new TWaitingBoxForm(this);
				gHwndId_WaitingBox = g_WaitingBoxForm->GetWindowHwndId();
			}
			#endif
			bHandled = TRUE;
			break;
		}
	//下载结束,关闭等待界面
	case MSG_DL_THREAD_END:
		{
			if(gHwndId_WaitingBox != 0)
			{
				Boolean bNeedWaitingBox = FALSE;
				int nList = 0;
				TAListElement* pElement = NULL;
				nList = g_pFileDown->GetSize();
				for(int i=1; i<=nList; i++)
				{
					pElement = g_pFileDown->GetElement(i);
					if(GetApiNeedWaitingBox((Kx_AccessType)pElement->accessType) )
					{
						bNeedWaitingBox = TRUE;
						break;
					}
					
				}

				if(bNeedWaitingBox == FALSE)
				{
					this->CloseWindowByHwndId(gHwndId_WaitingBox);
					gHwndId_WaitingBox = 0;
				}
				//this->CloseWindowByHwndId(gHwndId_WaitingBox);
				//gHwndId_WaitingBox = 0;
			}

			bHandled = TRUE;
			break;
		}
	//下载进程
	case MSG_DL_THREAD_PROCESS:
		{
			char buf[64];
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			sprintf(buf, "\n下载进度:%d/%d", notifyData.nCurSize, notifyData.nTotalSize);
			bHandled = TRUE;
			break;
		}

	//下载完成
	case MSG_DL_THREAD_NOTIFY:
		{
			int iRet = eSucceed;
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));
						
			//先销毁Dowload
			if(notifyData.pThisHandle != NULL)
				delete notifyData.pThisHandle;

			//清除下载列表中的数据(判断条件:accessType/nHwndId/nCtrlId/nParam 全匹配)
			TAListElement  pElement;
			MemSet(&pElement, 0, sizeof(TAListElement));
			pElement.accessType = notifyData.nAccessType;
			pElement.nHwndId = notifyData.nHwndId;
			pElement.nCtrlId = notifyData.nCtrlId;
			pElement.nParam = notifyData.nParam;
			iRet = KaiXinAPICommon_DownloadComplete(&pElement);
			
			//如果KaiXinAPICommon_DownloadComplete返回不是eSucced, 表明这个下载已被Cancel或其他异常,直接return TRUE, 不做处理
			if(iRet != eSucceed)
			{
				bHandled = TRUE;
				break;			
			}

			//如果是下载图片则让各个Form自行处理
			if(notifyData.nAccessType == KX_PhotoDownload)
			{
				bHandled = FALSE;
				break;
			}

			//定时查询新消息,单独处理
			if(notifyData.nAccessType == KX_MessageCenter)
			{
				UpdateNoticeCount();
				bHandled = TRUE;
				break;
			}

			// 销毁正在下载提示框
			{
				SS_GTID		gtidMain;
				SS_GetCurrentGTID(&gtidMain);
				App_PostMessageEx(&gtidMain, MSG_DL_THREAD_END, NULL, 0, 0, 0);
			}

			//bHandled默认置为TRUE
			bHandled = TRUE;

			//Json下载
			if(notifyData.eDLCode != DLC_FINISHED)
			{
				//下载失败/中断等统一提示处理
				//如果是不需要等待框的, 下载出错可以不弹出提示框
				if(GetApiNeedWaitingBox((Kx_AccessType)notifyData.nAccessType) == TRUE)
					MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_DownLoadError),TResource::LoadConstString(APP_KA_ID_STRING_DownLoadError),WMB_OK);
			}
			else
			{
				//如果是不需要App_kaiXin统一处理的(由各Form自行处理),直接bHandled=FALSE
				bHandled = GetApiHandle((Kx_AccessType)notifyData.nAccessType);
				if(bHandled == FALSE)
					break;

				//统一判断错误(判断ret值)
				TUChar ErrorInfo[ERROR_INFO_LEN] = {0};
				if(KaiXinAPI_JsonParse_bSuccess((Kx_AccessType)notifyData.nAccessType, ErrorInfo) == FALSE)
				{
					if(TUString::StrLen(ErrorInfo) > 0)
						MessageBox( ErrorInfo, TUSTR_Kx_NULL, WMB_OK);
					else
					{
						MessageBox( TResource::LoadConstString(APP_KA_ID_STRING_Fail), TUSTR_Kx_NULL, WMB_OK);
					}
					break;
				}

				//每个API Json的解析
				switch(notifyData.nAccessType)
				{
				case KX_InitialLogin:
					{
						int iRet =0;
						tResponseInitialLogin* Response = NULL;
						iRet = KaiXinAPI_JsonParse(KX_InitialLogin, (void **)&Response);
						if(iRet == eSucceed)
						{
							//先保存设置
							STRCPY_Ex(KaiXinUserInfo.uid, Response->uid);
							STRCPY_Ex(KaiXinUserInfo.verify, Response->verify);
							STRCPY_Ex(KaiXinUserInfo.wapverify, Response->wapverify);
							KaiXinAPI_SetConfig();

							//显示主页面
							KaiXinAPICommon_Download(KX_Profile);
							//TestForm *pWin = new TestForm(this);

							delete Response;
							Response = NULL;
						}
						break;
					}
				case KX_Logout:
					{
						//先保存设置
						STRCPY_Ex(KaiXinUserInfo.uid, "");
						STRCPY_Ex(KaiXinUserInfo.verify, "");
						STRCPY_Ex(KaiXinUserInfo.wapverify, "");
						KaiXinAPI_SetConfig();

						//:TODO, 返回初始登录界面
						ClosePanelForm();

						//TODO::停止短消息读取定时器
						TIMER_Release(m_nMsgTimerId);
						m_nMsgTimerId = -1;
						break;
					}
				case KX_Profile:
					{
						TProfileForm *pWin = new TProfileForm(this);
						RefeshAPIFormID(notifyData.nAccessType);

						//TODO::启动短消息读取定时器
						if(m_nMsgTimerId == -1)
						{
							KaiXinAPICommon_Download(KX_MessageCenter);
							m_nMsgTimerId = TIMER_Create(TIMER_GET_NEW_NOTICE, TIMER_MODE_AUTORUN | TIMER_MODE_PERIOD, NULL, 0, 0);
						}
						break;
					}

				case KX_UpdateFriendsNews:
					{
						TUpdateFriendsNewsForm*pWin = new TUpdateFriendsNewsForm(this, (KX_NewsShowType)notifyData.nParam);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_RecentNews:
					{
						TRecentNewsForm*pWin = new TRecentNewsForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_ApplicationList:
					{
						TApplicationListForm *pWin = new TApplicationListForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_FriendList:
					{
						TFriendListForm *pWin = new TFriendListForm(this, (int)notifyData.nParam);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_MessageCenter:
					{
						TMessageCenterForm* pWin = new TMessageCenterForm(this, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_MessagesList:
					{
						TAppCommonListForm* pWin = new TAppCommonListForm(this,KX_COMMON_LIST_TYPE_MESSAGE,!FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				//不需要发信箱
				case KX_SentMessagesList:
					{
						//TMessagesListForm *pWin = new TMessagesListForm(this);
						//RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_SystemMessage:
					{
						TSystemMessagesForm *pWin = new TSystemMessagesForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_FriendsCommentList:
					{
						TUserCommentListForm *pWin = new TUserCommentListForm(this, FriendCommentList);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_ReceivedAnObjectComments:
					{
						TUserCommentListForm *pWin = new TUserCommentListForm(this, ReceivedAnObjectCommentList);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_ReceivedRepasteComments:
					{
						TAppCommonListForm *pWin = new TAppCommonListForm(this, KX_COMMON_LIST_TYPE_USER_COMMENT_REPASTE,!FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_ReceivedDiaryComments:
					{
						TAppCommonListForm *pWin = new TAppCommonListForm(this, KX_COMMON_LIST_TYPE_COMMENT_DIARY,!FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_ReceivedRecordComments:
					{
						TAppCommonListForm *pWin = new TAppCommonListForm(this, KX_COMMON_LIST_TYPE_COMMENT_RECORD,!FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_ReceivedStateComments:
					{
						TAppCommonListForm *pWin = new TAppCommonListForm(this, KX_COMMON_LIST_TYPE_COMMENT_STATE,!FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_CommentDetail:
					{
						TCommentDetailForm *pWin = new TCommentDetailForm(this, ReceivedCommentDetail);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_SentCommentDetail:
					{
						TCommentDetailForm *pWin = new TCommentDetailForm(this, SentCommentDetail);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}				
				case KX_ReceivedUserCommentsList:
					{
						TAppCommonListForm* pWin = new TAppCommonListForm(this,KX_COMMON_LIST_TYPE_USER_COMMENT_RECEIVED, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_SentUserCommentsList:
					{
						TAppCommonListForm* pWin = new TAppCommonListForm(this,KX_COMMON_LIST_TYPE_USER_COMMENT_SENT, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_ReceivedCommentsList:
					{
						TAppCommonListForm* pWin = new TAppCommonListForm(this,KX_COMMON_LIST_TYPE_COMMENT_RECEIVED, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_RepasteCommentsList:
					{
						TAppCommonListForm* pWin = new TAppCommonListForm(this,KX_COMMON_LIST_TYPE_COMMENT_REPASTE, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_SentCommentsList:
					{
						TAppCommonListForm* pWin = new TAppCommonListForm(this,KX_COMMON_LIST_TYPE_COMMENT_SENT, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_UserCommentDetail:
					{
						TCommentDetailForm *pWin = new TCommentDetailForm(this, ReceivedUserCommentDetail);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}						
				case KX_SentUserCommentDetail:
					{
						TCommentDetailForm *pWin = new TCommentDetailForm(this, SentUserCommentDetail);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_GetUserInfos:
					{
						TGetUserInfosForm*pWin = new TGetUserInfosForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}						
				case KX_GetProfileDetail:
					{
						TGetProfileDetailForm*pWin = new TGetProfileDetailForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}
				case KX_RecordList:
					{
						//TRecordListForm*pWin = new TRecordListForm(this);
						TAppListViewForm *pWin = new TAppListViewForm(this, RecordListView, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;
					}

				case KX_RepasteIndex:
					{
						//need to add more codes.
						TRepasteIndexForm *pWin = new TRepasteIndexForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_RepasteDetail:
					{
						TRepasteDetailForm* pWin = new TRepasteDetailForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_RefreshVote:
					{
						TRepaste_VoteForm* pWin = new TRepaste_VoteForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_RefreshTag:
					{
						TRepaste_VoteForm* pWin = new TRepaste_VoteForm(this,KX_REPASTE_VOTE_TYPE_TAG, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_VoteDetail:
					{
						TVoteDetailForm* pWin = new TVoteDetailForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_DiaryList:
					{
						//need to add more codes.
						TAppListViewForm *pWin = new TAppListViewForm(this, DiaryListView, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_DiaryDetail:
					{
						//need to add more codes.
						TDiaryDetailForm *pWin = new TDiaryDetailForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}					

				case KX_BirthdayList:
					{
						TBirthdayListForm* pWin = new TBirthdayListForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}

				case KX_GardenDetail:
					{
						TGardenDetailForm* pWin = new TGardenDetailForm(this, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_RanchDetail:
					{
						TRanchDetailForm* pWin = new TRanchDetailForm(this, !FormIsValid(notifyData.nAccessType));
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}
				case KX_GardenList:
					{
						TGardenListForm* pWin = new TGardenListForm(this);
						break;				
					}
				case KX_RanchList:
					{
						TRanchListForm* pWin = new TRanchListForm(this);
						break;				
					}				
				case KX_AlbumList:
					{
						TAlbumListForm* pWin = new TAlbumListForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}					
				case KX_AlbumPhoto:
					{
						TAlbumPhotoForm* pWin = new TAlbumPhotoForm(this);
						RefeshAPIFormID(notifyData.nAccessType);
						break;				
					}

				default:
					break;
				}
			}
			break;
		}

	default:
		break;
	}

	if (FALSE == bHandled) 
	{
		return TApplication::EventHandler(pEvent);
	}

	return bHandled;
}

/**
 * \brief GetConnectID 
 * 获取连接的ID
 * \return 
 */
ULONG TApp_KaiXinApp::GetConnectID()
{
	return m_tAID;
}

/**
 * \brief FormIsValid 
 * 对应AccessType的Form是否有效,即是否已经存在
 * \param nAccessType
 *
 * \return 
 */
Boolean TApp_KaiXinApp::FormIsValid(Int32  nAccessType)
{
	TWindow *preWin = NULL;

	if(gHwndId_KaiXinApp[nAccessType] == 0)
		return FALSE;

	preWin = this->GetWindowByHwndId(gHwndId_KaiXinApp[nAccessType]);
	if(preWin == NULL)
		return FALSE;

	return WindowIsValid(preWin);
}

/**
 * \brief UpdateNoticeCount 
 * 更新新消息的条数
 * \return 
 */
int TApp_KaiXinApp::UpdateNoticeCount(void)
{
	int iRet = eSucceed;
	int i = 0;
	Boolean bNewNotice = FALSE;

	tResponseMessageCenter* Response = NULL;
	iRet = KaiXinAPI_JsonParse(KX_MessageCenter, (void **)&Response);
	if(Response != NULL)
	{
		if(iRet == 1)
		{
			//总的消息条数
			KaiXinUserInfo.NoticeCount[NOTICE_TYPE_ALL] = Response->nCount;
			//没有返回的类型消息为0条
			int	NoticeCount[7] = {0};
			for(i= 0; i<Response->nSize; i++)
			{
				//判断是否有新消息
				if(Response->pNotices[i].Num> KaiXinUserInfo.NoticeCount[Response->pNotices[i].Type])
					bNewNotice = TRUE;
				//先更新条数到临时变量
				NoticeCount[Response->pNotices[i].Type] = Response->pNotices[i].Num;
			}
			//更新全局的新消息条数
			for(i = NOTICE_TYPE_MESSAGE; i<=NOTICE_TYPE_REPLY_POST_COMMENT; i++)
				KaiXinUserInfo.NoticeCount[i] = NoticeCount[i];
		}

		delete Response;
		Response = NULL;
		//判断是否要弹出新消息提示框
		if( FormIsValid(KX_MessageCenter) == FALSE)
		{
			if(bNewNotice == TRUE)
			{
				if(MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_IfReadNewNotice),TResource::LoadConstString(APP_KA_ID_STRING_NewNotice),WMB_OKCANCEL) == 0)
				{
					//KaiXinAPICommon_Download(KX_MessageCenter);
					SS_GTID			gtidMain;
					SS_GetCurrentGTID(&gtidMain);
					App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_MESSAGE_CENTER, NULL, 0, 0, 0);						
				}
			}		
		}
		//若存在MessageCenter窗口,发送更新消息, 减少的情况也要更新
		else
		{
			SS_GTID			gtidMain;
			SS_GetCurrentGTID(&gtidMain);
			App_PostMessageEx(&gtidMain, MSG_FORM_UPDATE, NULL, 0, gHwndId_KaiXinApp[KX_MessageCenter], 0);	
		}
	}

	return eSucceed;
}
