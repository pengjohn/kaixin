// Application main form file.

// Original file name: App_KaiXinMainForm.cpp
// Generated by TOPS Builder:Project wizard,Date:2010-8-24

/*!
* 
* \file   App_KaiXinMainForm.cpp
* \author GoZone
* \date	  2011-1-28
* \brief  应用主窗口
* 
* \ref    CopyRight
*/


#include  "App_KaiXinMainForm.h"

#include  "App_KaiXinUnicodeScript_str.h"//include for show string

#include "TWindow.h"//for input method
#include "ImeTypes.h"//for input method
#include "TResource.h"//for ....


#include <stdlib.h>

#include  "TDownload.h"
#include "md5.h"

#include "KaiXinAPICommon.h"


TMainForm::TMainForm(TApplication * pApp):TWindow(pApp)
{
	Create(APP_KA_ID_Initial_Login_Form);
	KaiXinAPI_GetConfig();
}

TMainForm::~TMainForm()
{
	KaiXinAPI_SetConfig();
}

Boolean TMainForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch(pEvent->eType)
	{
	case EVENT_WinInit:
		{
			// Do initialization here
			_OnWinInitEvent();
			bHandled = TRUE;
		}
		break;
	case EVENT_WinPaint:
		{
			DrawWindow();
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			//switch(pEvent->sParam1)
			//{
			//case RES_SYSTEM_WINDOW_TITLE_BUTTON_ID:
			//	bHandled = TRUE;
			//	break;			
			//}

			// 处理控件点击事件或响应事件
			bHandled = _OnCtlSelectEvent( pApp, pEvent );

		}
		break;
	case EVENT_CtrlSetFocus:
	{
		bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
	}
	break;		
	case EVENT_CtrlKillFocus :
	{
		bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
	}
	break;	
	case EVENT_ListPreDraw:
		{
			bHandled = _OnLstPreDrawEvent(pEvent);
		}
		break;

	case EVENT_WinClose:
		{
			// Stop the application since the main form has been closed
			pApp->SendStopEvent();
			bHandled = TRUE;
		}
		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_ExitBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;		
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);
		
			// 擦除
			dc.EraseRectangle(&rc, 0);
			
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);
			
			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
				//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 
	
			
			pEraseEvent->result = 1;				
			
			bHandled = TRUE;
		}
		break;

	default:
		break;
	}

		
	if (FALSE == bHandled)
	{	
		return TWindow::EventHandler(pApp,pEvent);
	}
	return bHandled;
}

void TMainForm:: _OnWinInitEvent()
{
	//Open input method on winInitEvent
	ImeOpenIme( IME_MODE_VOLITANT,  IME_CLASS_ENGLISH);//IME_CLASS_CHINESE
	SetFocus(APP_KA_ID_Initial_Login_Form_KxRegisterBtn);//不要高亮在登录
	m_ExitBtn = SetAppExitButton(this);
	m_LoginBtn = SetAppLoginButton(this);
	
	//Focus背景设置为白色底色
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_Initial_Login_Form_AcountPswCoolBarList));
	if (pCoolBarList)
	{
		pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
	}
	//Init Widget
	TUChar pszString[128];
	TEdit*	pEditAccount = static_cast<TEdit*>(GetControlPtr(APP_KA_ID_Initial_Login_Form_Account));
	TUString::StrGBToUnicode(pszString,(Char*)KaiXinUserInfo.email);
	pEditAccount->SetMaxChars(127);
	pEditAccount->Insert (pszString, TUString::StrLen(pszString) );	

	TEdit*	pEditPassword = static_cast<TEdit*>(GetControlPtr(APP_KA_ID_Initial_Login_Form_Password));
	pEditPassword->SetMaxChars(63);
	if(KaiXinUserInfo.bSavePwd == TRUE)
	{
		TUString::StrGBToUnicode(pszString,(Char*)KaiXinUserInfo.password);
		pEditPassword->Insert (pszString, TUString::StrLen(pszString) );	
	}

	// 1. 显示密码设置不保存
	#if 0
	if(KaiXinUserInfo.bShowPwd == TRUE)
	{
		TEdit* psw = reinterpret_cast<TEdit*>(this->GetControlPtr(APP_KA_ID_Initial_Login_Form_Password));
		if(psw)
		{
			psw->SetMaskChar(NULL);
			psw->Draw();
		}
	}
	#endif
	// 2. 如果有记录密码,第一次按显示密码,会清空
	if(strlen((char*)KaiXinUserInfo.password) )
		bCleanPwdWhenFirstShowPwd = TRUE;
	else
		bCleanPwdWhenFirstShowPwd = FALSE;
	
	reinterpret_cast<TCheckBox*>(this->GetControlPtr(APP_KA_ID_Initial_Login_Form_RememberPwd))->SetValue(KaiXinUserInfo.bSavePwd);	
	reinterpret_cast<TCheckBox*>(this->GetControlPtr(APP_KA_ID_Initial_Login_Form_AutoLogin))->SetValue(KaiXinUserInfo.bAutoLogin);	
	//reinterpret_cast<TCheckBox*>(this->GetControlPtr(APP_KA_ID_Initial_Login_Form_ShowPwd))->SetValue(KaiXinUserInfo.bShowPwd);	

	//处理自动登录
	if(KaiXinUserInfo.bAutoLogin && KaiXinUserInfo.bSavePwd)
	{
		Char password[64];	
		char* pMd5Password = NULL;
		Set_Url_Params(KX_InitialLogin, "email", KaiXinUserInfo.email);
		strcpy((char*)password, KaiXinUserInfo.password);
		strcat((char*)password, "_");
		strcat((char*)password, KAIXIN_SKEY);
		pMd5Password = MD5Create((char*)password);
		Set_Url_Params(KX_InitialLogin, "password", pMd5Password);
		free(pMd5Password);

		//下载
		KaiXinAPICommon_Download(KX_InitialLogin);	
	}

 	TImage  *pImage = NULL;
	pImage = static_cast<TImage*>(GetControlPtr(APP_KA_ID_Initial_Login_Form_KxLittleLogo));
	if (pImage)
	{
		pImage->SetTransparent(TRUE);
	}

	TButton* tBtn = static_cast<TButton*>(GetControlPtr(APP_KA_ID_Initial_Login_Form_KxRegisterBtn)); 
	if(tBtn != NULL)
	{		
		//pExitBtn->SetFont(tFont);
		const TBitmap * pNormalBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button98);
		const TBitmap * pOverBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button98_over); 	
		tBtn->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_WHITE);
		tBtn->SetColor(CTL_COLOR_TYPE_BACK,RGB_COLOR_WHITE);
		tBtn->SetColor(CTL_COLOR_TYPE_FOCUS_FORE,RGB_COLOR_WHITE);
		tBtn->SetColor(CTL_COLOR_TYPE_FOCUS_BACK,RGB_COLOR_WHITE);
		
		tBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Register),FALSE);
		tBtn->SetStyles(BTN_STYLES_GRAPGICS);
		tBtn->SetImage(pNormalBmp,0);
		tBtn->SetImage(pOverBmp,1);		
		tBtn->Show(TRUE);
	}	
}

Boolean TMainForm::_OnLstPreDrawEvent(EventType * pEvent)
{
	Boolean     bHandled = FALSE;

	return bHandled;

}


Boolean TMainForm:: _OnCtlSelectEvent( TApplication * pApp,EventType * pEvent )
{
	Boolean bHandled = FALSE;
	switch( pEvent->sParam1 )
	{
		//Login form		
	case APP_KA_ID_Initial_Login_Form_KxRegisterBtn:
		{
			TWebForm *pWin = new TWebForm(pApp, TResource::LoadConstString(APP_KA_ID_STRING_Register), "http://wap.kaixin001.com/reg/reg_step1.php?id=uphone");
			// 开始按钮被按下，执行相应动作
			bHandled = TRUE;
		}
		break;
		
	case APP_KA_ID_Initial_Login_Form_RememberPwd:
	{
		Boolean bSavePwd = this->GetControlPtr(APP_KA_ID_Initial_Login_Form_RememberPwd )->GetValue();
		if(bSavePwd == FALSE)
		{
			this->GetControlPtr(APP_KA_ID_Initial_Login_Form_AutoLogin )->SetValue(FALSE);
		}

		KaiXinUserInfo.bSavePwd = bSavePwd;
		KaiXinAPI_SetConfig();
		break;
	}
	case APP_KA_ID_Initial_Login_Form_AutoLogin:
	{
		Boolean bAutoLogin = this->GetControlPtr(APP_KA_ID_Initial_Login_Form_AutoLogin )->GetValue();
		if(bAutoLogin == TRUE)
		{
			this->GetControlPtr(APP_KA_ID_Initial_Login_Form_RememberPwd )->SetValue(TRUE);
		}

		KaiXinUserInfo.bAutoLogin = bAutoLogin;
		KaiXinAPI_SetConfig();		
		break;
	}
	case APP_KA_ID_Initial_Login_Form_ShowPwd:
	{
		TUChar MaskChar[1] = {'*'};
		Boolean bShowPwd = this->GetControlPtr(APP_KA_ID_Initial_Login_Form_ShowPwd )->GetValue();
		if(bShowPwd == FALSE)
		{
			TEdit* psw = reinterpret_cast<TEdit*>(this->GetControlPtr(APP_KA_ID_Initial_Login_Form_Password));
			if(psw)
			{
				psw->SetMaskChar(MaskChar[0]);
				psw->Draw();
			}
		}
		else
		{
			//pengjohn debug,按照三星需求,暂时不需要做这个处理
			//if(bCleanPwdWhenFirstShowPwd == TRUE)
			//{
			//	this->GetControlPtr(APP_KA_ID_Initial_Login_Form_Password)->SetCaption(TUSTR_Kx_NULL, FALSE);
			//	bCleanPwdWhenFirstShowPwd = FALSE;
			//}
			
				
			TEdit* psw = reinterpret_cast<TEdit*>(this->GetControlPtr(APP_KA_ID_Initial_Login_Form_Password));
			if(psw)
			{
				psw->SetMaskChar(NULL);
				psw->Draw();
			}
		}

		//记住密码设置不保存
		//KaiXinUserInfo.bShowPwd = bShowPwd;
		//KaiXinAPI_SetConfig();
		break;
	}
	default:

		//ImeCloseIme();
		break;
		//case APP_DE_ID_DemoMainWindow_GraphicalButton:
		//{
		// 图形按钮被按下，执行相应动作
		//bHandled = TRUE;
		//}
		//break;
	}
	if(!bHandled)
	{
		if(pEvent->sParam1 == m_ExitBtn)//退出
		{
			pApp->CloseAllWindows();
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == m_LoginBtn)
		{
			//获取输入框的字符串
			const TUChar *TUCharEmail = this->GetControlPtr(APP_KA_ID_Initial_Login_Form_Account)->GetCaption();
			const TUChar *TUCharPassword = this->GetControlPtr(APP_KA_ID_Initial_Login_Form_Password)->GetCaption();
			Boolean bSavePwd = this->GetControlPtr(APP_KA_ID_Initial_Login_Form_RememberPwd )->GetValue();
			Boolean bAutoLogin = this->GetControlPtr(APP_KA_ID_Initial_Login_Form_AutoLogin )->GetValue();
			Char email[128];
			Char password[64];
			TUString::StrUnicodeToStrUtf8(email, TUCharEmail);
			TUString::StrUnicodeToStrUtf8(password, TUCharPassword);

			//判断输入是否为空
			if(strlen((char*)email) == 0)
			{
				pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_AccountNull),TResource::LoadConstString(APP_KA_ID_STRING_PleaseInputAgain),WMB_OKCANCEL);
				return TRUE;
			}
			if(strlen((char*)password) == 0)
			{
				pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_PasswordNull),TResource::LoadConstString(APP_KA_ID_STRING_PleaseInputAgain),WMB_OKCANCEL);
				return TRUE;
			}
			
			//保存设置
			STRCPY_Ex(KaiXinUserInfo.email, (char*)email);
			STRCPY_Ex(KaiXinUserInfo.password, (char*)password);
			KaiXinUserInfo.bAutoLogin = bAutoLogin;
			KaiXinUserInfo.bSavePwd = bSavePwd;
			
			//设置参数
			char* pMd5Password = NULL;
			Set_Url_Params(KX_InitialLogin, "email", (char*)email);
			strcat((char*)password, "_");
			strcat((char*)password, KAIXIN_SKEY);
			pMd5Password = MD5Create((char*)password);
			Set_Url_Params(KX_InitialLogin, "password", pMd5Password);
			free(pMd5Password);

			//下载
			KaiXinAPICommon_Download(KX_InitialLogin);
	
			bHandled = TRUE;
		}
	}
	return bHandled;
}

Boolean TMainForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 
	if( (CtrlID == APP_KA_ID_Initial_Login_Form_Account) || (APP_KA_ID_Initial_Login_Form_Password) )
	{	
		//open input method
		//ImeOpenIme( IME_MODE_VOLITANT,  IME_CLASS_ENGLISH);
		bHandled = TRUE;
	}	
		
	return bHandled;	

}
Boolean TMainForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 
	if( (CtrlID == APP_KA_ID_Initial_Login_Form_Account) || (APP_KA_ID_Initial_Login_Form_Password) )
	{
		//close input method
		//ImeCloseIme();
		bHandled = TRUE;
	}
	return bHandled;
}
