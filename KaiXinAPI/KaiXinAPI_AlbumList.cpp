/*!
* \file	 KaiXinApp_AlbumList.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 相册列表
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

//相册控件间间隙
#define KX_ALBUM_ITEM_W_SPACE	(10)
#define KX_ALBUM_ITEM_H_SPACE	(5)


//相册封面坐标
#define KX_ALBUM_COVER_IMAGE_X			(KX_ALBUM_ITEM_W_SPACE)
#define KX_ALBUM_COVER_IMAGE_Y			(KX_ALBUM_ITEM_H_SPACE)
#define KX_ALBUM_COVER_IMAGE_W			(60)
#define KX_ALBUM_COVER_IMAGE_H			(60)

//相册标题坐标
#define KX_ALBUM_TITLE_X			(KX_ALBUM_COVER_IMAGE_X + KX_ALBUM_COVER_IMAGE_W + KX_ALBUM_ITEM_W_SPACE)
#define KX_ALBUM_TITLE_Y			(10)
#define KX_ALBUM_TITLE_W			(SCR_W- KX_ALBUM_ITEM_W_SPACE - KX_ALBUM_COVER_IMAGE_W - KX_ALBUM_COVER_IMAGE_X)
#define KX_ALBUM_TITLE_H			(20)

//相册私密图标
#define KX_ALBUM_PIVACY_ICON_X			(KX_ALBUM_COVER_IMAGE_X + KX_ALBUM_COVER_IMAGE_W + KX_ALBUM_ITEM_W_SPACE)
#define KX_ALBUM_PIVACY_ICON_Y			(5)//代码中动态变化
#define KX_ALBUM_PIVACY_ICON_W			(13)
#define KX_ALBUM_PIVACY_ICON_H			(13)


//相册更新时间坐标
#define KX_ALBUM_UPDATE_TIME_X			(KX_ALBUM_PIVACY_ICON_X + KX_ALBUM_PIVACY_ICON_W + KX_ALBUM_ITEM_W_SPACE)
#define KX_ALBUM_UPDATE_TIME_Y			(5)//代码中动态变化
#define KX_ALBUM_UPDATE_TIME_W			(100)//(320- KX_ALBUM_ITEM_W_SPACE - KX_ALBUM_PIVACY_ICON_W - KX_ALBUM_PIVACY_ICON_X)
#define KX_ALBUM_UPDATE_TIME_H			(20)


void* KaiXinAPI_AlbumList_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseAlbumList*  Response = new tResponseAlbumList;
	memset(Response, 0 , sizeof(tResponseAlbumList));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "albums");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_albums = nSize1;
			if( nSize1 != 0 )
			{
				Response->albums = NULL;
				Response->albums = (AlbumList_albums*) malloc(sizeof( AlbumList_albums ) * nSize1 );
				memset(Response->albums, 0 , sizeof(AlbumList_albums) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "picnum");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->albums[i].picnum, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->albums[i].picnum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "privacy");
				if(pTemp1)
				{
					STRCPY_Ex(Response->albums[i].privacy, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->albums[i].ctime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "mtime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->albums[i].mtime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "coverpid");
				if(pTemp1)
				{
					STRCPY_Ex(Response->albums[i].coverpid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "coverpic");
				if(pTemp1)
				{
					STRCPY_Ex(Response->albums[i].coverpic, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "albumid");
				if(pTemp1)
				{
					if(IsNullString(pTemp1->valuestring) == FALSE)
						STRCPY_Ex(Response->albums[i].albumid, pTemp1->valuestring);
					else
						sprintf(Response->albums[i].albumid, "%d", pTemp1->valueint);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "title");
				if(pTemp1)
				{
					STRCPY_Ex(Response->albums[i].title, pTemp1->valuestring);
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TAlbumListForm::TAlbumListForm(TApplication* pApp):TWindow(pApp)
{
	Response = NULL;	

	for(int i=0; i<KX_ALBUM_LIST_ITEM_COUNT_MAX; i++)
	{
		pAlbumCoverBmp[i] = NULL;	
	}

	Create(APP_KA_ID_CommonCoolBarListForm);
}

// 析构函数
TAlbumListForm::~TAlbumListForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());
	if(Response)
	{
		delete Response;
	}

	for(int i=0; i<KX_ALBUM_LIST_ITEM_COUNT_MAX; i++)
	{
		if( pAlbumCoverBmp[i] != NULL)
		{
			pAlbumCoverBmp[i]->Destroy();
			pAlbumCoverBmp[i] = NULL; 								
		}
	}	
}

// 窗口事件处理
Boolean TAlbumListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{	
#if 0
					//下载完后跟新缩略图图标
					if( pAlbumCoverBmp[notifyData.nParam] != NULL)
					{
						pAlbumCoverBmp[notifyData.nParam]->Destroy();
						pAlbumCoverBmp[notifyData.nParam] = NULL;								
					}
					pAlbumCoverBmp[notifyData.nParam] = LoadImgByPath(notifyData.pszFilePath);

					if(pAlbumCoverBmp[notifyData.nParam])
					{
						TImage* pTImage;

						pTImage = static_cast< TImage* >(this->GetControlPtr(this->nAlbumCoverImage[notifyData.nParam]));
						if(pTImage)
						{	
							TRectangle RC;
							pTImage->GetBounds(&RC);
							TBitmap* pNewBitmap = TBitmap::Create(RC.Width(), RC.Height(), pAlbumCoverBmp[notifyData.nParam]->GetDepth());
							//pTImage->SetBitmap(pAlbumCoverBmp[notifyData.nParam]);
							pNewBitmap->QuickSpecialZoom(pAlbumCoverBmp[notifyData.nParam],0,0);
							pTImage->SetBitmap(pNewBitmap);
							pTImage->Draw();

							if(pNewBitmap)
							{
								//pNewBitmap->Destroy();
								//pNewBitmap = NULL;
							}
						}
					}						
#endif
#if 1
					//下载完后跟新缩略图图标
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

					if(pDownLoadBitmap)
					{
						TImage* pTImage;

						pTImage = static_cast< TImage* >(this->GetControlPtr(this->nAlbumCoverImage[notifyData.nParam]));
						if(pTImage)
						{	
							TRectangle RC;
							pTImage->GetBounds(&RC);
							pAlbumCoverBmp[notifyData.nParam] = TBitmap::Create(RC.Width(), RC.Height(), pDownLoadBitmap->GetDepth());
							//pAlbumCoverBmp[notifyData.nParam]->QuickSpecialZoom(pDownLoadBitmap,0,0);
							pAlbumCoverBmp[notifyData.nParam]->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(214, 214, 214, 255));
							pTImage->SetBitmap(pAlbumCoverBmp[notifyData.nParam]);
							pTImage->Draw();
						}
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL;
					}						
#endif																
					break;
				}				
			}
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break; 	
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TAlbumListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//init login form
	int iRet = eFailed;
	iRet = KaiXinAPI_JsonParse(KX_AlbumList, (void **)&this->Response);
	m_BackBtn = SetAppBackButton(this);
	if(iRet == eSucceed)
	{
		_SetFormTilte(pApp);
		_SetAlbumCoolBarList(pApp);
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TAlbumListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TAlbumListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	switch(pEvent->sParam1)
	{
	case APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList:
		{ 
			TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
			switch( pRow->GetIndex() ) 
			{ 
			case 0: 
				{ 
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int ItemIndex = pItem->GetIndex();
					if(Response)
					{
						char* szFuid = NULL; 								
						szFuid = (char*)malloc(32);
						memset(szFuid, 0, sizeof(32));

						Get_Url_Params(KX_AlbumList, "fuid", &szFuid);								
						Set_Url_Params(KX_AlbumPhoto, "fuid",szFuid);
						free(szFuid);//使用完毕，则进行释放

						Set_Url_Params(KX_AlbumPhoto, "albumid", Response->albums[ItemIndex].albumid);

						//Set_Url_Params(KX_AlbumPhoto, "passwd", gFuid);//需要密码部分 后续应继续完善，查看自己无需密码
						KaiXinAPICommon_Download(KX_AlbumPhoto, this->GetWindowHwndId()); 									
					}					
					break;
				} 

			default:
				break;
			} 
			bHandled = TRUE; 
		}
	default:
		break;
	}

	return bHandled;
}

//创建标题标签 for Title
Int32 TAlbumListForm::_SetFormTilte(TApplication * pApp)
{			
	TUChar pszCaption[64] = {0};
	TUChar pszName[32];
	char* szUid = NULL;
	char* szFuid = NULL;		

	szUid = (char*)malloc(32);
	szFuid = (char*)malloc(32);
	memset(szUid, 0, sizeof(32));
	memset(szFuid, 0, sizeof(32));

	Get_Url_Params(KX_AlbumList, "uid", &szUid);			
	Get_Url_Params(KX_AlbumList, "fuid", &szFuid);

	if(strcmp(szUid, szFuid)==0)
	{
		TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else
	{
		Int32 Fuid = 0, i = 0;
		TUChar TUCharFuid[32];
		int iRet = eFailed;
		tResponseGetUserInfos* Response = NULL;
		TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)szFuid);
		Fuid = TUString::StrAToI(TUCharFuid);
		iRet = KaiXinAPI_JsonParse(KX_GetUserInfos, (void **)&Response);
		if(iRet == eSucceed)
		{
			for(i = 0; i<Response->nSize_friends; i++)
			{
				if((Int32)Response->friends[i].fuid == Fuid)
				{
					TUString::StrUtf8ToStrUnicode(pszName , (const Char *)Response->friends[i].fname);
					TUString::StrCat (pszCaption, pszName);
					break;
				}
			}
			if(i >= Response->nSize_friends)
			{
				TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
			}
			delete Response;
		}
		else
		{
			TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
		}
	}
	TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_SPhoto));
	free(szUid);
	free(szFuid);
	return SetAppTilte(this, 0, pszCaption);
}

Int32 TAlbumListForm::_SetAlbumCoolBarList(TApplication* pApp)
{
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;

	if(Response)
	{
		m_nAlbumItemCount = 0;//CoolbarItem值
		int nIndex = 0;
		int nCoolMaxItem = (Response->nSize_albums < KX_ALBUM_LIST_ITEM_COUNT_MAX)?Response->nSize_albums:KX_ALBUM_LIST_ITEM_COUNT_MAX; //cool最大item值
		TBarRow *lpRow = NULL;	
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList));
		if (pCoolBarList)
		{
			//背景设置为白色底色
			pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);

			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate(); 
			}
		}

		while( nIndex < nCoolMaxItem)
		{
			//头像照(id=0, albumid=""),暂时不支持,直接跳过
			if(strcmp(Response->albums[nIndex].albumid, "0") == 0)
			{
				nIndex++;
				continue;
			}

			//add Item
			TBarListItem* lpItem = NULL;
			if(lpRow)
			{
				lpItem = lpRow->AppendItem();
				if (lpItem)  
				{
					TFont objFontType;

					TUChar pszAlbumTitle[256] = {0};
					TUChar pszPicNum[32] = {0};

					TUChar pszDateTime[32] = {0};				

					Int32 ItemHeight = 0;
					Int32 ItemWidth = 0;

					TRectangle Rc_Temp;
					TUChar* pTempTitle = NULL;
					TUChar* pTempContent = NULL;						
					TRectangle rect;				
					lpItem->GetBounds(rect);
					lpItem->SetCaption(NULL);						
					lpItem->SetIndicatorType(itDefault);

					Int32 CoolBarDiffTop = rect.Y() - Rc_CoolBarList.Y();//coolbarlist 距界面顶部的值	


					//相册封面图片
					Int32 PrivacyIconResID = 0;
					Int32 CoverImageResID = 0;
					if(strcmp(Response->albums[nIndex].privacy,"2") == 0)						
					{
						PrivacyIconResID = APP_KA_ID_BITMAP_secret; //APP_KA_ID_BITMAP_locked;
						CoverImageResID = APP_KA_ID_BITMAP_albumpassword;
					}
					else
					{
						PrivacyIconResID = APP_KA_ID_BITMAP_unlocked;
						if((strcmp(Response->albums[nIndex].coverpic,"") == 0)||(strcmp(Response->albums[nIndex].coverpid,"0") == 0))
						{
							CoverImageResID = APP_KA_ID_BITMAP_albumpicture;
						}
						else
						{
							KaiXinAPICommon_DownloadPhoto(Response->albums[nIndex].coverpic, this->GetWindowHwndId(), nIndex );
						}
					}					

					nAlbumCoverImage[nIndex]= lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
					const TBitmap * pCoverBmp = TResource::LoadConstBitmap(CoverImageResID);
					TImage* pCoverImage = static_cast<TImage*>(GetControlPtr(nAlbumCoverImage[nIndex]));
					TRectangle Rc_CoverImage(KX_ALBUM_COVER_IMAGE_X, CoolBarDiffTop + KX_ALBUM_COVER_IMAGE_Y, KX_ALBUM_COVER_IMAGE_W, KX_ALBUM_COVER_IMAGE_H);
					pCoverImage->SetBounds(&Rc_CoverImage);
					pCoverImage->SetEnabled(FALSE);
					if(pCoverBmp)
					{
						pCoverImage->SetBitmap(pCoverBmp);
					}					
					ItemWidth = ItemWidth + KX_ALBUM_COVER_IMAGE_X + KX_ALBUM_COVER_IMAGE_W + KX_ALBUM_ITEM_W_SPACE;											


					//相册标题
					TUString::StrUtf8ToStrUnicode(pszAlbumTitle, (const Char *)Response->albums[nIndex].title);
					TUString::StrUtf8ToStrUnicode(pszPicNum, (const Char *)Response->albums[nIndex].picnum);

					TUString::StrCat(pszAlbumTitle, TUSTR_Kx_Empty_Cell);
					TUString::StrCat(pszAlbumTitle, TUSTR_Kx_Left_Parenthesis);
					TUString::StrCat(pszAlbumTitle, pszPicNum);
					TUString::StrCat(pszAlbumTitle, TUSTR_Kx_Right_Parenthesis);

					Int32 nAlbumTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
					TRichView* pAlbumTitle = static_cast<TRichView*>(GetControlPtr(nAlbumTitleId));
					TRectangle Rc_AlbumTitle(ItemWidth, CoolBarDiffTop + KX_ALBUM_TITLE_Y, KX_ALBUM_TITLE_W, KX_ALBUM_TITLE_H);
					pAlbumTitle->SetBounds(&Rc_AlbumTitle);
					objFontType = pAlbumTitle->GetFont();
					objFontType.Create(FONT_TITLE, FONT_TITLE);
					pAlbumTitle->SetFont(objFontType); 
					pAlbumTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_BLACK);
					//pAlbumTitle->SetColor(CTL_COLOR_TYPE_BACK, LTBLUE);

					pAlbumTitle->SetWordWrapAttr(FALSE);
					pAlbumTitle->SetTransparent(TRUE);
					pAlbumTitle->SetEnabled(FALSE);
					pAlbumTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
					pAlbumTitle->SetCaption(pszAlbumTitle,FALSE);
					pAlbumTitle->SetMaxVisibleLines(pAlbumTitle->GetLinesCount(), TRUE);

					pAlbumTitle->GetBounds(&Rc_Temp);


					ItemHeight = KX_ALBUM_TITLE_Y + Rc_Temp.Height() + KX_ALBUM_ITEM_H_SPACE ;

					//相册私密图标
					Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
					const TBitmap * pBmp = TResource::LoadConstBitmap(PrivacyIconResID);
					TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
					TRectangle Rc_Icon(ItemWidth, ItemHeight + CoolBarDiffTop, pBmp->GetWidth(), pBmp->GetHeight());
					pImage1->SetBounds(&Rc_Icon);
					if(pBmp)
					{
						pImage1->SetBitmap(pBmp);
					}									
					pImage1->GetBounds(&Rc_Temp);

					ItemWidth = ItemWidth + Rc_Temp.Width()+ KX_ALBUM_ITEM_W_SPACE;					

					//相册更新时间
					TUString::StrUtf8ToStrUnicode(pszDateTime, (const Char *)Response->albums[nIndex].mtime);
					TUString::StrCat(pszDateTime, TResource::LoadConstString(APP_KA_ID_STRING_Update));

					Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 0, 0);
					TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
					TRectangle Rc_Time(ItemWidth, ItemHeight + CoolBarDiffTop, KX_ALBUM_UPDATE_TIME_W, KX_ALBUM_UPDATE_TIME_H);
					pTime->SetBounds(&Rc_Time);
					objFontType = pTime->GetFont();
					objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
					pTime->SetFont(objFontType); 
					pTime->SetCaption(pszDateTime,FALSE);
					pTime->SetColor(CTL_COLOR_TYPE_FORE, GRAY);					
					pTime->GetBounds(&Rc_Temp);

					ItemHeight = ItemHeight + Rc_Temp.Height() + KX_ALBUM_ITEM_H_SPACE;

#if 0
					Int32 nDetailIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
					const TBitmap * pDetailBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_triangle);
					TImage* pDetailIcon = static_cast<TImage*>(GetControlPtr(nDetailIconId));
					TRectangle Rc_DetailIcon(SCR_W - pDetailBmp->GetWidth() - KX_ALBUM_ITEM_W_SPACE, (KX_ALBUM_COVER_IMAGE_H/2)+ CoolBarDiffTop, pDetailBmp->GetWidth(), pDetailBmp->GetHeight());
					pDetailIcon->SetBounds(&Rc_DetailIcon);
					pDetailIcon->SetBitmap(pDetailBmp);
#endif


					if(ItemHeight>KX_ALBUM_COVER_IMAGE_H)
					{
						lpItem->SetHeight(ItemHeight);
					}
					else
					{
						lpItem->SetHeight(KX_ALBUM_COVER_IMAGE_H + 2*KX_ALBUM_ITEM_H_SPACE );
					}														
				}
			}
			nIndex++;
			m_nAlbumItemCount++;
		}
		if (pCoolBarList)
		{
			pCoolBarList->Update();
		}

		//this->DrawWindow();
		this->UpdateWindow(0);
	}

	return TRUE;
}


