/*!
* \file	 KaiXinApp_AlbumPhoto.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 相册中图片
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"


#if(LCD_SIZE == LCD_HVGA )
//相册缩略图坐标
#define KX_ALBUM_PHOTO_THUMB_IMAGE_W			(75)
#define KX_ALBUM_PHOTO_THUMB_IMAGE_H			(75)
#elif(LCD_SIZE == LCD_WVGA )
//相册缩略图坐标
#define KX_ALBUM_PHOTO_THUMB_IMAGE_W			(110)
#define KX_ALBUM_PHOTO_THUMB_IMAGE_H			(110)
#endif

//相册图片间间隙
#define KX_ALBUM_PHOTO_ITEM_W_SPACE	((SCR_W - KX_ALBUM_PHOTO_THUMB_IMAGE_W*4)/5)
#define KX_ALBUM_PHOTO_ITEM_H_SPACE	(KX_ALBUM_PHOTO_ITEM_W_SPACE)

#define KX_ALBUM_PHOTO_THUMB_IMAGE_X			(KX_ALBUM_PHOTO_ITEM_W_SPACE)//代码中动态变化
#define KX_ALBUM_PHOTO_THUMB_IMAGE_Y			(KX_ALBUM_PHOTO_ITEM_H_SPACE)//代码中动态变化


//相册照片数量标签坐标
#define KX_ALBUM_PHOTO_TOTAL_LABEL_X			(110)
#define KX_ALBUM_PHOTO_TOTAL_LABEL_Y			(KX_ALBUM_PHOTO_ITEM_H_SPACE)//代码中动态变化
#define KX_ALBUM_PHOTO_TOTAL_LABEL_W		(80)
#define KX_ALBUM_PHOTO_TOTAL_LABEL_H			(FONT_CONTENT)


void* KaiXinAPI_AlbumPhoto_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseAlbumPhoto*  Response = new tResponseAlbumPhoto;
	memset(Response, 0 , sizeof(tResponseAlbumPhoto));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->uid, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "photos");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_photos = nSize1;
			if( nSize1 != 0 )
			{
				Response->photos = NULL;
				Response->photos = (AlbumPhoto_photos*) malloc(sizeof( AlbumPhoto_photos ) * nSize1 );
				memset(Response->photos, 0 , sizeof(AlbumPhoto_photos) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "pid");
				if(pTemp1)
				{
					if(pTemp1->valuedouble > 0)
						DoubleToChar(pTemp1->valuedouble, Response->photos[i].pid);
					else
						STRCPY_Ex(Response->photos[i].pid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "title");
				if(pTemp1)
				{
					STRCPY_Ex(Response->photos[i].title, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "thumbnail");
				if(pTemp1)
				{
					STRCPY_Ex(Response->photos[i].thumbnail, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "large");
				if(pTemp1)
				{
					STRCPY_Ex(Response->photos[i].large, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "privacy");
				if(pTemp1)
				{
					STRCPY_Ex(Response->photos[i].privacy, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->photos[i].ctime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "pic130");
				if(pTemp1)
				{
					STRCPY_Ex(Response->photos[i].pic130, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "pclarge");
				if(pTemp1)
				{
					STRCPY_Ex(Response->photos[i].pclarge, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "cnum");
				if(pTemp1)
				{
					Response->photos[i].cnum = pTemp1->valueint;
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TAlbumPhotoForm::TAlbumPhotoForm(TApplication* pApp):TWindow(pApp)
{
	Response = NULL;	

	for(int i=0; i<KX_ALBUM_PHOTO_THUMBNAIL_COUNT_MAX; i++)
	{
		pAlbumThumbnailBmp[i] = NULL;	
	}

	Create(APP_KA_ID_AlbumPhotoForm);
}

// 析构函数
TAlbumPhotoForm::~TAlbumPhotoForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());
	if(Response)
	{
		delete Response;
	}

	for(int i=0; i<KX_ALBUM_PHOTO_THUMBNAIL_COUNT_MAX; i++)
	{
		if( pAlbumThumbnailBmp[i] != NULL)
		{
			pAlbumThumbnailBmp[i]->Destroy();
			pAlbumThumbnailBmp[i] = NULL; 								
		}
	}	
}

// 窗口事件处理
Boolean TAlbumPhotoForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{	
					//下载完后跟新缩略图图标
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

					if(pDownLoadBitmap)
					{
						TImage* pTImage;

						pTImage = static_cast< TImage* >(this->GetControlPtr(this->nAlbumThumbnailImage[notifyData.nParam]));
						if(pTImage)
						{
							TRectangle RC;
							pTImage->GetBounds(&RC);
							pAlbumThumbnailBmp[notifyData.nParam] = TBitmap::Create(RC.Width(), RC.Height(), pDownLoadBitmap->GetDepth());
							//pAlbumThumbnailBmp[notifyData.nParam]->QuickSpecialZoom(pDownLoadBitmap,0,0);
							pAlbumThumbnailBmp[notifyData.nParam]->QuickZoom(pDownLoadBitmap, FALSE, TRUE,RGBA(100, 160, 160, 255));						
							pTImage->SetBitmap(pAlbumThumbnailBmp[notifyData.nParam]);
							pTImage->Draw();
						}
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL;
					}						
					break;
				}				
			}
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TAlbumPhotoForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//init login form
	int iRet = eFailed;
	iRet = KaiXinAPI_JsonParse(KX_AlbumPhoto, (void **)&this->Response);

	m_BackBtn = SetAppBackButton(this);
	if(iRet == eSucceed)
	{
		m_TitleButtonCtlID = 0;

		m_TitleButtonCtlID = _SetTilteButton(pApp);
		_SetFormTilte(pApp);
		_CreateAlbumPhotos(pApp);		
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TAlbumPhotoForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TAlbumPhotoForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	Int32 nSelectCtrlID = pEvent->sParam1;
	if(nSelectCtrlID)
	{
		if(nSelectCtrlID == m_TitleButtonCtlID)
		{
			//返回专辑列表
			CloseWindow();
		}
		else
		{
			for(int i = 0; i < this->m_nAlbumPhotoCount; i++)
			{
				if(nSelectCtrlID == this->nAlbumThumbnailImage[i])
				{
					//显示图片详情
					tPhotoDetail photodata;
					MemSet(&photodata, 0, sizeof(tPhotoDetail));

					TUChar pszPicNum[16] = {0};
					Char szPicNum[32] = {0};
					TUString::StrIToA(pszPicNum,m_nAlbumPhotoCount);
					TUString::StrUnicodeToStrUtf8(szPicNum, pszPicNum);

					photodata.dataFrom = 0; //0: from albumPhoto, 1: from updatefriendsnews

					char* szFuid = NULL;								
					szFuid = (char*)malloc(32);
					memset(szFuid, 0, sizeof(32));
					Get_Url_Params(KX_AlbumPhoto, "fuid",&szFuid);
					STRCPY_Ex(photodata.photouid,szFuid);	  //照片所属用户id
					free(szFuid);//使用完毕，则进行释放

					STRCPY_Ex(photodata.pid, Response->photos[i].pid);
					STRCPY_Ex(photodata.title, Response->photos[i].title);
					STRCPY_Ex(photodata.thumbnail, Response->photos[i].pic130);
					STRCPY_Ex(photodata.large, Response->photos[i].large);
					STRCPY_Ex(photodata.privacy, Response->photos[i].privacy);
					STRCPY_Ex(photodata.albumid, m_AlbumId);
					STRCPY_Ex(photodata.albumtitle, m_AlbumTitle);
					STRCPY_Ex(photodata.picnum, (char*)szPicNum);
					photodata.pos = i + 1;//所在位置为数组下标增加1
					photodata.ctime = 0;//AlbumPhoto 取回的是字串
					STRCPY_Ex(photodata.ctimeString, Response->photos[i].ctime);	
					photodata.cnum = Response->photos[i].cnum;

					TPhotoDetailForm *pComm1 = new TPhotoDetailForm( pApp, photodata);
					bHandled = TRUE;
					break;
				}
			}
		}

	}
	return bHandled;
}

//创建标题按钮
Int32 TAlbumPhotoForm::_SetTilteButton(TApplication * pApp)
{
	TCtrl *m_TitleButtonContrl;
	TRectangle obBtnRec(0,0,0,0);	//初始(left, top, w, h)
	Int32 m_TitleButtonCtlID = 0;
	TFont tFont;

	//创建图片按钮
	m_TitleButtonContrl =new TButton ;	

	obBtnRec.SetRect(BUTTON_X, BUTTON_Y, BUTTON_W, BUTTON_H);
	if(m_TitleButtonContrl->Create(this))
	{
		m_TitleButtonContrl->SetBounds(&obBtnRec);	
		m_TitleButtonCtlID = m_TitleButtonContrl->GetId();

		tFont = m_TitleButtonContrl->GetFont();
		tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
		m_TitleButtonContrl->SetFont(tFont);

		m_TitleButtonContrl->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Photo),FALSE);
		m_TitleButtonContrl->Hide(TRUE);//暂时屏蔽		
	}

	return m_TitleButtonCtlID;
}

//创建标题标签 for Title
Int32 TAlbumPhotoForm::_SetFormTilte(TApplication * pApp)
{
	TUChar pszAlbumTitle[256] = {0};

	char* szAlbumId = NULL;
	szAlbumId = (char*)malloc(32);
	memset(szAlbumId, 0, sizeof(32));

	Get_Url_Params(KX_AlbumPhoto, "albumid", &szAlbumId);			

	int iRet = eFailed;
	tResponseAlbumList* AlbumListResponse = NULL;
	iRet = KaiXinAPI_JsonParse(KX_AlbumList, (void **)&AlbumListResponse);
	if(iRet == eSucceed)
	{
		for(int i = 0; i < AlbumListResponse->nSize_albums; i++)
		{
			if(strcmp(AlbumListResponse->albums[i].albumid,szAlbumId)==0)
			{	
				STRCPY_Ex(m_AlbumId, szAlbumId);
				STRCPY_Ex(m_AlbumTitle, AlbumListResponse->albums[i].title);	
				TUString::StrUtf8ToStrUnicode(pszAlbumTitle, (const Char *)AlbumListResponse->albums[i].title);
				break;
			}				
		}
	}

	if(AlbumListResponse)
	{
		delete AlbumListResponse;		
	}

	free(szAlbumId);

	return SetAppTilte(this, 0, pszAlbumTitle);
}
Int32 TAlbumPhotoForm::_CreateAlbumPhotos(TApplication* pApp)
{
	if(Response)
	{
		TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_AlbumPhotoForm_AlbumPhotoPanel));
		if(pTPanel)
		{
			//设置最大显示数，放置数组溢出
			m_nAlbumPhotoCount = (Response->nSize_photos < KX_ALBUM_PHOTO_THUMBNAIL_COUNT_MAX)?Response->nSize_photos:KX_ALBUM_PHOTO_THUMBNAIL_COUNT_MAX;

			TRectangle obBtnRec(0, 0, 0, 0);
			TFont tFont;
			TUChar pszTotal[32]={0};
			TUChar pszShowTotalString[64]={0};

			for(int i = 0; i < m_nAlbumPhotoCount; i++)
			{
				KaiXinAPICommon_DownloadPhoto(Response->photos[i].pic130, this->GetWindowHwndId(), i);	

				//创建TImage 
				pAlbumThumbnailImage[i] = new TImage;		
				obBtnRec.SetRect(KX_ALBUM_PHOTO_THUMB_IMAGE_X + (KX_ALBUM_PHOTO_THUMB_IMAGE_W + KX_ALBUM_PHOTO_ITEM_H_SPACE) * (i%4), KX_ALBUM_PHOTO_THUMB_IMAGE_Y + (KX_ALBUM_PHOTO_THUMB_IMAGE_H + KX_ALBUM_PHOTO_ITEM_H_SPACE) * (i/4) ,KX_ALBUM_PHOTO_THUMB_IMAGE_W,KX_ALBUM_PHOTO_THUMB_IMAGE_H);

				if(pAlbumThumbnailImage[i]->Create(pTPanel))
				{		
					pAlbumThumbnailImage[i]->SetBounds(&obBtnRec);	
					nAlbumThumbnailImage[i] = pAlbumThumbnailImage[i]->GetId();//save TImage ID
					pAlbumThumbnailImage[i]->SetBitmapByResId(APP_KA_ID_BITMAP_albumdefaultpic);
					pAlbumThumbnailImage[i]->SetEnabled(TRUE);
					pAlbumThumbnailImage[i]->SetTransVisible(TRUE);
					pAlbumThumbnailImage[i]->Show(TRUE);		
				}
			}

			//创建标签"共 *  张照片"
			TLabel* pTotalPhotoLabel =new TLabel;

			TUString::StrPrintF(pszShowTotalString, TResource::LoadConstString(APP_KA_ID_STRING_TotalPhotos),m_nAlbumPhotoCount);

			Int32 nRow = 0;
			if(m_nAlbumPhotoCount%4)
			{
				nRow = m_nAlbumPhotoCount/4 + 1;
			}
			else
			{
				nRow = m_nAlbumPhotoCount/4;
			}

			if(pTotalPhotoLabel->Create(pTPanel))
			{		
				Int32 nWidth = 0;
				pTotalPhotoLabel->SetAutoSize(FALSE);
				pTotalPhotoLabel->SetCaption(pszShowTotalString,FALSE);
				tFont = pTotalPhotoLabel->GetFont();
				tFont.Create(FONT_CONTENT, FONT_CONTENT);
				nWidth = GetShowAllStringWidth(pszShowTotalString, tFont);
				obBtnRec.SetRect(KX_ALBUM_PHOTO_TOTAL_LABEL_X,KX_ALBUM_PHOTO_THUMB_IMAGE_Y + (KX_ALBUM_PHOTO_THUMB_IMAGE_H + KX_ALBUM_PHOTO_ITEM_H_SPACE) * nRow,nWidth,KX_ALBUM_PHOTO_TOTAL_LABEL_H);
				pTotalPhotoLabel->SetFont(tFont);
				pTotalPhotoLabel->SetBounds(&obBtnRec);					
				pTotalPhotoLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_BLACK);
				pTotalPhotoLabel->SetEnabled(FALSE);
				pTotalPhotoLabel->Show(TRUE);		
			}
		}
	}
	return 0;
}

