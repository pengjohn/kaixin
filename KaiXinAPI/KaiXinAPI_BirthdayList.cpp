/*!
* \file	 KaiXinApp_BirthdayList.cpp
* \author	 huxianxiang@GoZone
* \date	 2010-9-29
* \brief  解析与UI: 好友列表中显示生日
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#define KX_BIRTHDAY_ITEM_WIDGET_SPACE	(5)
#define KX_BIRTHDAY_ITEM_LINE_SPACE		(2)
#define KX_BIRTHDAY_ITEM_ICON_X			(10)
#define KX_BIRTHDAY_ITEM_ICON_Y			(5)
#define KX_BIRTHDAY_ITEM_ICON_W			(14)
#define KX_BIRTHDAY_ITEM_ICON_H			(14)
#define KX_BIRTHDAY_ITEM_TITLE_X		(KX_BIRTHDAY_ITEM_ICON_X + KX_BIRTHDAY_ITEM_ICON_W + KX_BIRTHDAY_ITEM_WIDGET_SPACE)
#define KX_BIRTHDAY_ITEM_TITLE_Y		(KX_BIRTHDAY_ITEM_ICON_Y)
#define KX_BIRTHDAY_ITEM_TITLE_W		(50)
#define KX_BIRTHDAY_ITEM_TITLE_H		(14)

#define KX_BIRTHDAY_ITEM_LOGO_X			(KX_BIRTHDAY_ITEM_ICON_X)
#define KX_BIRTHDAY_ITEM_LOGO_Y			(KX_BIRTHDAY_ITEM_ICON_Y + KX_BIRTHDAY_ITEM_ICON_H + KX_BIRTHDAY_ITEM_WIDGET_SPACE )
#define KX_BIRTHDAY_ITEM_LOGO_W			(50)
#define KX_BIRTHDAY_ITEM_LOGO_H			(50)
#define KX_BIRTHDAY_ITEM_CONTENT_X		(KX_BIRTHDAY_ITEM_ICON_X)
#define KX_BIRTHDAY_ITEM_CONTENT_Y		(KX_BIRTHDAY_ITEM_LOGO_Y)
#define KX_BIRTHDAY_ITEM_CONTENT_W		(280)
#define KX_BIRTHDAY_ITEM_CONTENT_H		(40)
#define KX_BIRTHDAY_ITEM_ACTIONS_X		(100)
#define KX_BIRTHDAY_ITEM_ACTIONS_Y		(KX_BIRTHDAY_ITEM_CONTENT_Y + KX_BIRTHDAY_ITEM_CONTENT_H + KX_BIRTHDAY_ITEM_WIDGET_SPACE )
#define KX_BIRTHDAY_ITEM_ACTIONS_W		(80)
#define KX_BIRTHDAY_ITEM_ACTIONS_H		(30)
#define KX_BIRTHDAY_ITEM_RESULT_X		(KX_BIRTHDAY_ITEM_ICON_X)
#define KX_BIRTHDAY_ITEM_RESULT_Y		(KX_BIRTHDAY_ITEM_LOGO_Y + KX_BIRTHDAY_ITEM_LOGO_H + KX_BIRTHDAY_ITEM_WIDGET_SPACE )
#define KX_BIRTHDAY_ITEM_RESULT_W		(280)
#define KX_BIRTHDAY_ITEM_RESULT_H		(30)

#define KX_BIRTHDAY_ITEM_DEFAULT_H		(100)
#define KX_BIRTHDAY_FONT_SIZE_TITLE		(12)
#define KX_BIRTHDAY_FONT_SIZE_CONTENT	(12)
#define KX_BIRTHDAY_FONT_SIZE_ACTION	(12)
#define KX_BIRTHDAY_FONT_SIZE_RESULT	(12)

void* KaiXinAPI_BirthdayList_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseBirthdayList*  Response = new tResponseBirthdayList;
	memset(Response, 0 , sizeof(tResponseBirthdayList));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->uid, "%d", pTemp0->valueint );
			else
				STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "n");
		if(pTemp0)
		{
			Response->nNum = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "birthlist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_BirthList = nSize1;
			if( nSize1 != 0 )
			{
				Response->BirthList = NULL;
				Response->BirthList = (BirthdayList_BirthList*) malloc(sizeof( BirthdayList_BirthList ) * nSize1 );
				memset(Response->BirthList, 0 , sizeof(BirthdayList_BirthList) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->BirthList[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->BirthList[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->BirthList[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->BirthList[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "birthday");
				if(pTemp1)
				{
					STRCPY_Ex(Response->BirthList[i].birthday, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "birthdisplay");
				if(pTemp1)
				{
					STRCPY_Ex(Response->BirthList[i].birthdisplay, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "send");
				if(pTemp1)
				{
					Response->BirthList[i].send = pTemp1->valueint;
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TBirthdayListForm::TBirthdayListForm(TApplication* pApp):TWindow(pApp)
{
	for(int i=0; i<KX_BIRTHDAY_ITEM_COUNT_MAX; i++)
	{
		pBmp[i] = NULL;	
		pLogo[i] = NULL;
		pLogoID[i] = 0;
		ActionButID[i] = 0;
		ResultID[i] = 0;
	}
	memset(pUid, 0 , sizeof(pUid));
	Create(APP_KA_ID_CommonCoolBarListForm);
}

// 析构函数
TBirthdayListForm::~TBirthdayListForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<KX_BIRTHDAY_ITEM_COUNT_MAX; i++)
	{
		if( pBmp[i] != NULL)
		{
			pBmp[i]->Destroy();
			pBmp[i] = NULL; 								
		}
	}
}

// 窗口事件处理
Boolean TBirthdayListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					if( pBmp[notifyData.nParam] != NULL)
					{
						pBmp[notifyData.nParam]->Destroy();
						pBmp[notifyData.nParam] = NULL; 								
					}
					pBmp[notifyData.nParam] = LoadImgByPath(notifyData.pszFilePath);

					if(pBmp[notifyData.nParam])
					{
						Int32 nIndex =0;
						nIndex = notifyData.nParam;
						if(nIndex < ItemCount)
						{
							TImage* pImage = static_cast<TImage*>(GetControlPtr(pLogoID[nIndex]));
							if(pImage)
							{
								pImage->SetBitmap(pBmp[notifyData.nParam]);
							}
						}	
					}
				}
				break;
			case KX_SendBirthdayGift:
				{
					int iRet = eFailed;
					tResponseSendBirthdayGift* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_SendBirthdayGift, (void **)&Response);
					if(Response->ret == 1)
					{
						TButton* pActionBtn = static_cast<TButton*>(GetControlPtr(ActionButID[nActionIndex]));
						TRichView* pResult = static_cast<TRichView*>(GetControlPtr(ResultID[nActionIndex]));
						pResult->Show(TRUE);
					}
					else
					{
						TUChar pszError[128] = {0};
						TButton* pActionBtn = static_cast<TButton*>(GetControlPtr(ActionButID[nActionIndex]));
						TRichView* pResult = static_cast<TRichView*>(GetControlPtr(ResultID[nActionIndex]));
						TUString::StrUtf8ToStrUnicode(pszError, (const Char*)Response->ErrorInfo);
						if(pszError)
						{
							pResult->SetCaption(pszError,FALSE);
						}
						pResult->Show(TRUE);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;

			default:
				break;
			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			break;
		}
		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TBirthdayListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	tResponseBirthdayList* Response = NULL;

	m_BackBtn = SetAppBackButton(this);
	SetAppTilte(this,APP_KA_ID_STRING_BirthDayReminder);//生日提醒

	iRet = KaiXinAPI_JsonParse(KX_BirthdayList, (void **)&Response);
	if(iRet == 1)
	{
		ItemCount = 0;
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList));
		if (pCoolBarList)
		{
			//pCoolBarList->SetBounds(RC_LIST_NORMAL);	

			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate(); 
			}
		}

		while( nIndex < Response->nSize_BirthList )
		{
			//add Item
			TBarListItem* lpItem = NULL;
			if(lpRow)
			{
				lpItem = lpRow->AppendItem();
				if (lpItem)  
				{
					TFont objFontType;
					TUChar pszName[32] = {0};
					TUChar pszContent[256] = {0};
					TUChar* pszDateTime = NULL;
					TUChar* pszMsgTypeTemp = NULL;
					Int32 ItemHeight = 0;

					TRectangle rect;
					lpItem->GetBounds(rect);
					lpItem->SetCaption(NULL);                       
					lpItem->SetIndicatorType(itNone);

					STRCPY_Ex(pUid[nIndex], Response->BirthList[nIndex].fuid);

#if 0
					Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
					TImage* pImage = static_cast<TImage*>(GetControlPtr(nIconId));
					TRectangle Rc_Icon(KX_BIRTHDAY_ITEM_ICON_X, rect.Y() - Rc_CoolBarList.Y() + KX_BIRTHDAY_ITEM_ICON_Y, KX_BIRTHDAY_ITEM_ICON_W, KX_BIRTHDAY_ITEM_ICON_H);
					pImage->SetBounds(&Rc_Icon);
					pImage->SetBitmapByResId(APP_KA_ID_BITMAP_Birthday_Default);
#endif
					CtrlAddItemToCoolBarList_Image(this, lpItem, KX_BIRTHDAY_ITEM_ICON_X, KX_BIRTHDAY_ITEM_ICON_Y, KX_BIRTHDAY_ITEM_ICON_W, KX_BIRTHDAY_ITEM_ICON_H, (TBitmap*)TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Birthday_Default));

					TUString::StrUtf8ToStrUnicode(pszName , (const Char *)Response->BirthList[nIndex].fname);
#if 0					
					Int32 nLabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
					TLabel* pLabel = static_cast<TLabel*>(GetControlPtr(nLabelId));
					TRectangle Rc_Label(KX_BIRTHDAY_ITEM_TITLE_X, rect.Y() - Rc_CoolBarList.Y() + KX_BIRTHDAY_ITEM_TITLE_Y, KX_BIRTHDAY_ITEM_TITLE_W, KX_BIRTHDAY_ITEM_TITLE_H);
					pLabel->SetBounds(&Rc_Label);
					objFontType = pLabel->GetFont();
					objFontType.Create(FONT_TITLE, FONT_TITLE);
					pLabel->SetFont(objFontType); 
					pLabel->SetCaption(pszName,FALSE);
					CtrlAddItemToCoolBarList_Lable(this, lpItem,  KX_BIRTHDAY_ITEM_TITLE_X, KX_BIRTHDAY_ITEM_TITLE_Y, KX_BIRTHDAY_ITEM_TITLE_W, FONT_NORMAL, pszName);
#endif
					ItemHeight = ItemHeight + KX_BIRTHDAY_ITEM_TITLE_Y + KX_BIRTHDAY_ITEM_TITLE_H + KX_BIRTHDAY_ITEM_WIDGET_SPACE;

					TRectangle Rc_Temp;
					TUChar* pTemp = NULL;

					Int32 nLogoId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
					TImage* pUserLogo = static_cast<TImage*>(GetControlPtr(nLogoId));
					pLogoID[nIndex] = nLogoId;
					pLogo[nIndex] = pUserLogo;
					TRectangle Rc_Logo(KX_BIRTHDAY_ITEM_LOGO_X, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_BIRTHDAY_ITEM_LOGO_W, KX_BIRTHDAY_ITEM_LOGO_H);
					pUserLogo->SetBounds(&Rc_Logo);
					pUserLogo->SetBitmapByResId(APP_KA_ID_BITMAP_Default);
					KaiXinAPICommon_DownloadPhoto(Response->BirthList[nIndex].flogo, this->GetWindowHwndId(), nIndex );

					TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)Response->BirthList[nIndex].birthdisplay);
					Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
					TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
					TRectangle Rc_Content(KX_BIRTHDAY_ITEM_CONTENT_X + KX_BIRTHDAY_ITEM_LOGO_X + KX_BIRTHDAY_ITEM_LOGO_W + KX_BIRTHDAY_ITEM_WIDGET_SPACE, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_BIRTHDAY_ITEM_CONTENT_W, KX_BIRTHDAY_ITEM_CONTENT_H);
					pContent->SetBounds(&Rc_Content);
					pContent->SetWordWrapAttr(TRUE);
					objFontType = pContent->GetFont();
					objFontType.Create(FONT_CONTENT, FONT_CONTENT);
					pContent->SetFont(objFontType); 
					pContent->SetCaption(pszContent,FALSE);
					pContent->SetWordWrapAttr(TRUE);
					pContent->SetTransparent(TRUE);
					pContent->SetEnabled(FALSE);
					pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
					pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
					pContent->GetBounds(&Rc_Temp);

					
					Int32 Button_Y = 0;
					Button_Y = ItemHeight + Rc_Temp.Height() + KX_BIRTHDAY_ITEM_WIDGET_SPACE;
					if( Rc_Temp.Height()> KX_BIRTHDAY_ITEM_LOGO_H )
					{
						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_BIRTHDAY_ITEM_WIDGET_SPACE;
					}
					else
					{
						ItemHeight = ItemHeight + KX_BIRTHDAY_ITEM_LOGO_H + KX_BIRTHDAY_ITEM_WIDGET_SPACE;							
					}

					Int32 nActionGiftId = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
					TButton* pActionGift = static_cast<TButton*>(GetControlPtr(nActionGiftId));
					TRectangle Rc_ActionGift(KX_BIRTHDAY_ITEM_ACTIONS_X + KX_BIRTHDAY_ITEM_ACTIONS_W + 20, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_BIRTHDAY_ITEM_ACTIONS_W, KX_BIRTHDAY_ITEM_ACTIONS_H);
					pActionGift->SetBounds(&Rc_ActionGift);
					objFontType = pActionGift->GetFont();
					objFontType.Create(FONT_CONTENT, FONT_CONTENT);
					pActionGift->SetFont(objFontType);
					pActionGift->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Gift),FALSE);
					pActionGift->GetBounds(&Rc_Temp);

					ActionButID[nIndex] = nActionGiftId;

					Int32 nGiftSentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
					TRichView* pGiftSent = static_cast<TRichView*>(GetControlPtr(nGiftSentId));
					TRectangle Rc_GiftSent(KX_BIRTHDAY_ITEM_RESULT_X, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_BIRTHDAY_ITEM_RESULT_W, KX_BIRTHDAY_ITEM_ACTIONS_H);
					pGiftSent->SetBounds(&Rc_GiftSent);
					objFontType = pGiftSent->GetFont();
					objFontType.Create(FONT_CONTENT, FONT_CONTENT);
					pGiftSent->SetFont(objFontType);						
					pGiftSent->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_GiftSentHim),FALSE);
					pGiftSent->SetBorderStyle(bsSingle, TRUE);
					pGiftSent->SetFrameWidth(1);
					pGiftSent->SetEnabled(FALSE);
					//	pGiftSent->SetColor(CTL_FRAME_COLOR,RGB(255, 186, 67)); 
					pGiftSent->SetColor(CTL_COLOR_TYPE_BACK, RGB(253, 255, 206));
					pGiftSent->SetWordWrapAttr(TRUE);
					pGiftSent->SetScrollBarMode(CTL_SCL_MODE_NONE);		
					//	pGiftSent->SetMaxVisibleLines(pGiftSent->GetLinesCount(), TRUE);
					if( Response->BirthList[nIndex].send == 0 )	//未发送
					{
						pGiftSent->Hide(TRUE);
					}
					else
					{
						pGiftSent->GetBounds(&Rc_Temp);
						pActionGift->Hide(FALSE);
					}
					ResultID[nIndex] = nGiftSentId;
					ItemHeight = ItemHeight + Rc_Temp.Height()+ KX_BIRTHDAY_ITEM_WIDGET_SPACE;

					lpItem->SetHeight(ItemHeight);
				}
			}
			nIndex++;
			ItemCount++;
		}
	}

	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TBirthdayListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TBirthdayListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	Int32 nCtrlID = pEvent->sParam1;
	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(nCtrlID)
	{
		for(int i=0; i<KX_SYSMSGS_ITEM_COUNT_MAX; i++)
		{
			if( ActionButID[i] == nCtrlID )
			{
				Set_Url_Params(KX_SendBirthdayGift, "fuid", pUid[i]);
				Set_Url_Params(KX_SendBirthdayGift, "msg", "");
				Set_Url_Params(KX_SendBirthdayGift, "quiet", "1");
				nActionIndex = i;
				KaiXinAPICommon_Download(KX_SendBirthdayGift, this->GetWindowHwndId());
				break;
			}
			else
			{

			}
		}
	}
	return bHandled;
}

