/*!
* \file	 KaiXinAPI_Comment.cpp
* \author	 huxianxiang@GoZone
* \date	 2010-10-8
* \brief  解析与UI: 转贴的评论
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/
//短消息列表
//留言列表
//留言回复列表
//评论列表
//评论回复列表

//日记评论
//记录评论
#include "KaiXinAPICommon.h"

#define KX_COMMENT_ITEM_LOAD_TIMER		(50)

#define KX_COMMENT_ITEM_NUM_MAX			(50)
#define KX_COMMENT_ITEM_WIDGET_SPACE	(5)
#define KX_COMMENT_ITEM_LINE_SPACE		(2)

#define KX_COMMENT_ITEM_LOGO_X			(10)
#define KX_COMMENT_ITEM_LOGO_Y			(10)
#define KX_COMMENT_ITEM_LOGO_W			(PHOTO_MASK_W)
#define KX_COMMENT_ITEM_LOGO_H			(PHOTO_MASK_H)

#define KX_COMMENT_ITEM_NAME_X			(KX_COMMENT_ITEM_LOGO_X + KX_COMMENT_ITEM_LOGO_W + KX_COMMENT_ITEM_WIDGET_SPACE)
#define KX_COMMENT_ITEM_NAME_Y			(KX_COMMENT_ITEM_LOGO_Y)
#define KX_COMMENT_ITEM_NAME_W			(SCR_W/5)
#define KX_COMMENT_ITEM_NAME_H			(FONT_OTHER_INFO)

#define KX_COMMENT_ITEM_WHISPER_X		(KX_COMMENT_ITEM_NAME_X + KX_COMMENT_ITEM_NAME_W + KX_COMMENT_ITEM_WIDGET_SPACE)
#define KX_COMMENT_ITEM_WHISPER_Y		(KX_COMMENT_ITEM_NAME_Y)
#define KX_COMMENT_ITEM_WHISPER_W		(SCR_W/5)
#define KX_COMMENT_ITEM_WHISPER_H		(14)

#define KX_COMMENT_ITEM_TIME_X			(KX_COMMENT_ITEM_WHISPER_X + KX_COMMENT_ITEM_WHISPER_W + KX_COMMENT_ITEM_WIDGET_SPACE*2)
#define KX_COMMENT_ITEM_TIME_Y			(KX_COMMENT_ITEM_NAME_Y)
#define KX_COMMENT_ITEM_TIME_W			(SCR_W/5)
#define KX_COMMENT_ITEM_TIME_H			(FONT_SMALL)

#define KX_COMMENT_ITEM_CONTENT_X		(KX_COMMENT_ITEM_NAME_X)
#define KX_COMMENT_ITEM_CONTENT_Y		(KX_COMMENT_ITEM_NAME_Y + KX_COMMENT_ITEM_NAME_H + KX_COMMENT_ITEM_WIDGET_SPACE)
#define KX_COMMENT_ITEM_CONTENT_W		(SCR_W - KX_COMMENT_ITEM_NAME_X - 15)
#define KX_COMMENT_ITEM_CONTENT_H		(FONT_NORMAL)

#define KX_COMMENT_ITEM_ACTIONS_X		(KX_COMMENT_ITEM_NAME_X)
#define KX_COMMENT_ITEM_ACTIONS_Y		(KX_COMMENT_ITEM_CONTENT_Y + KX_COMMENT_ITEM_CONTENT_H + KX_COMMENT_ITEM_WIDGET_SPACE )
#define KX_COMMENT_ITEM_ACTIONS_W		(SCR_W/5)
#define KX_COMMENT_ITEM_ACTIONS_H		(BUTTON_H)


void* KaiXinAPI_PostComment_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponsePostComment*  Response = new tResponsePostComment;
	memset(Response, 0 , sizeof(tResponsePostComment));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "cid");
		if(pTemp0)
		{
			Response->cid = pTemp0->valueint;
		}
	}
	cJSON_Delete(json);
	return Response;
}

// 构造函数
TAppCommonListForm::TAppCommonListForm(TApplication* pApp, Boolean bNew):TWindow(pApp)
{
	AppType = KX_COMMON_LIST_TYPE_COMMENT_RECEIVED;
	TAppCommonListForm_Init(pApp);
	Create(APP_KA_ID_CommonList_Form);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);	
}

TAppCommonListForm::TAppCommonListForm(TApplication* pApp,KX_CommonListType nType, Boolean bNew):TWindow(pApp)
{
	AppType = nType;
	TAppCommonListForm_Init(pApp);
	Create(APP_KA_ID_CommonList_Form);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);	
}
// 析构函数
TAppCommonListForm::~TAppCommonListForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<KX_COMMENT_ITEM_COUNT_MAX; i++)
	{
		if( pBmp[i] != NULL)
		{
			pBmp[i]->Destroy();
			pBmp[i] = NULL; 								
		}
	}

	if(bNeedRefresh)
	{
		//:TODO:Update the Pre-Form
		KaiXinAPICommon_Download(nPreHandle, 0);
	}

	//TODO::停止短消息读取定时器
	TIMER_Release(nTimerId);
	nTimerId = -1;
}

Boolean TAppCommonListForm::TAppCommonListForm_Init(TApplication* pApp)
{
	for(int i=0; i<KX_COMMENT_ITEM_COUNT_MAX; i++)
	{
		pLogoID[i] = 0;
		pBmp[i] = NULL;
	}

	for(int i=0; i<KX_COMMENT_COUNT_MAX; i++)
	{
		ActionButID[i] = 0;
	}
	memset(nCommonListGroup, 0, sizeof(char)*KX_COMMENT_COUNT_MAX*32);
	memset(nMidGroup, 0, sizeof(char)*KX_COMMENT_COUNT_MAX*32);
	memset(&pCommentList, 0, sizeof(tResponseUserCommentList));
	memset(&pMessagetList, 0, sizeof(tResponseMessagesList));
	m_BackBtn = 0;
	nGroupCount = 0;
	nItemCount = 0;
	nTimerId = -1;
	nCurrentIndex = 0;
	nCurrentItem = 0;
	nLogoIndex = 0;
	pItemList = NULL;
	nWriteNewBtn = 0;	
	nNoneItemInfo = APP_KA_ID_STRING_NoComment;
	
	switch(AppType)
	{
	case KX_COMMON_LIST_TYPE_COMMENT_RECEIVED:
		{
			nPreHandle = KX_MessageCenter;
			bShowDetail = FALSE;
			bShowCommentTitle = TRUE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoComment;
			if(KaiXinUserInfo.NoticeCount[NOTICE_TYPE_POST_COMMENT] > 0)
				bNeedRefresh = TRUE;
			else
				bNeedRefresh = FALSE;
		}
		break;
	case KX_COMMON_LIST_TYPE_COMMENT_SENT:
		{
			nPreHandle = KX_MessageCenter;
			bShowDetail = FALSE;
			bShowCommentTitle = TRUE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoReceivedComment;
			if(KaiXinUserInfo.NoticeCount[NOTICE_TYPE_REPLY_POST_COMMENT] > 0)
				bNeedRefresh = TRUE;
			else
				bNeedRefresh = FALSE;
		}
		break;
	case KX_COMMON_LIST_TYPE_USER_COMMENT_RECEIVED:
		{
			nPreHandle = KX_MessageCenter;
			bShowDetail = FALSE;
			bShowCommentTitle = TRUE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoUserComment;
			if(KaiXinUserInfo.NoticeCount[NOTICE_TYPE_USER_COMMENT] > 0)
				bNeedRefresh = TRUE;
			else
				bNeedRefresh = FALSE;
		}
		break;
	case KX_COMMON_LIST_TYPE_USER_COMMENT_SENT:
		{
			nPreHandle = KX_MessageCenter;
			bShowDetail = FALSE;
			bShowCommentTitle = TRUE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoReceivedUserComment;
			if(KaiXinUserInfo.NoticeCount[NOTICE_TYPE_REPLY_USER_COMMENT] > 0)
				bNeedRefresh = TRUE;
			else
				bNeedRefresh = FALSE;
		}
		break;

	case KX_COMMON_LIST_TYPE_MESSAGE:
		{
			nPreHandle = KX_MessageCenter;
			bShowDetail = FALSE;
			bShowCommentTitle = FALSE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoMessage;
			if(KaiXinUserInfo.NoticeCount[NOTICE_TYPE_MESSAGE] > 0)
				bNeedRefresh = TRUE;
			else
				bNeedRefresh = FALSE;
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_REPASTE:
		{
			nPreHandle = KX_RepasteDetail;
			bShowDetail = TRUE;
			bShowCommentTitle = FALSE;
			bNeedRefresh = FALSE;
			bNeedDownloadDetail = TRUE;
			nNoneItemInfo = APP_KA_ID_STRING_NoComment;
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_REPASTE:
		{
			nPreHandle = KX_ReceivedRepasteComments;
			bShowDetail = TRUE;
			bShowCommentTitle = FALSE;
			bNeedRefresh = FALSE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoComment;
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_DIARY:
		{
			//:TODO:  Add your Pre-handle here
			nPreHandle = KX_ReceivedDiaryComments;
			bShowDetail = TRUE;
			bShowCommentTitle = FALSE;
			bNeedRefresh = FALSE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoComment;
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_RECORD:
		{
			//:TODO:  Add your Pre-handle here
			nPreHandle = KX_ReceivedRecordComments;
			bShowDetail = TRUE;
			bShowCommentTitle = FALSE;
			bNeedRefresh = FALSE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoComment;
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_STATE:
		{
			//:TODO:  Add your Pre-handle here
			nPreHandle = KX_ReceivedStateComments;
			bShowDetail = TRUE;
			bShowCommentTitle = FALSE;
			bNeedRefresh = FALSE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoComment;
		}
		break;

	default:
		{
			nPreHandle = KX_AccessTypeStart;
			bShowDetail = FALSE;
			bShowCommentTitle = FALSE;
			bNeedRefresh = FALSE;
			bNeedDownloadDetail = FALSE;
			nNoneItemInfo = APP_KA_ID_STRING_NoComment;
		}
		break;
	}

	return TRUE;
}

Int32 TAppCommonListForm::TAppCommonListForm_DownloadDetail(TApplication* pApp, Int32 nIndex)
{
	Int32 nRet = eFailed;

	if( nGroupCount < 0 || nIndex >= nGroupCount || nIndex > KX_COMMENT_ITEM_NUM_MAX )
	{
		return eFailed;
	}

	switch(AppType)
	{
	case KX_COMMON_LIST_TYPE_COMMENT_REPASTE:
		{
			Set_Url_Params(KX_CommentDetail, "thread_cid", nCommonListGroup[nIndex]);
			KaiXinAPICommon_Download(KX_CommentDetail, this->GetWindowHwndId());
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_REPASTE:
	case KX_COMMON_LIST_TYPE_COMMENT_DIARY:
	case KX_COMMON_LIST_TYPE_COMMENT_RECORD:
	case KX_COMMON_LIST_TYPE_COMMENT_STATE:
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_RECEIVED:
		{
			Set_Url_Params(KX_CommentDetail, "thread_cid", nCommonListGroup[nIndex]);
			KaiXinAPICommon_Download(KX_CommentDetail, this->GetWindowHwndId());
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_SENT:
		{
			Set_Url_Params(KX_SentCommentDetail, "thread_cid", nCommonListGroup[nIndex]);
			KaiXinAPICommon_Download(KX_SentCommentDetail, this->GetWindowHwndId());
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_RECEIVED:
		{
			Set_Url_Params(KX_UserCommentDetail, "thread_cid", nCommonListGroup[nIndex]);
			KaiXinAPICommon_Download(KX_UserCommentDetail, this->GetWindowHwndId());
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_SENT:
		{
			Set_Url_Params(KX_SentUserCommentDetail, "thread_cid", nCommonListGroup[nIndex]);
			KaiXinAPICommon_Download(KX_SentUserCommentDetail, this->GetWindowHwndId());
		}
		break;

	case KX_COMMON_LIST_TYPE_MESSAGE:
		{
			Set_Url_Params(KX_MessageDetail, "n", "20");
			Set_Url_Params(KX_MessageDetail, "mid", nMidGroup[nIndex]);
			KaiXinAPICommon_Download(KX_MessageDetail, this->GetWindowHwndId());
		}
		break;

	default:
		break;
	}

	return nRet;
}

Int32 TAppCommonListForm::TAppCommonListForm_ShowGroup(TApplication* pApp, void* pInfoList, Int32 nItemIndex)
{
	Int32 nRet = eFailed;

	if( pApp == NULL || pInfoList == NULL )
	{
		return eFailed;
	}

	switch(AppType)
	{
	case KX_COMMON_LIST_TYPE_COMMENT_RECEIVED:
	case KX_COMMON_LIST_TYPE_COMMENT_SENT:
	case KX_COMMON_LIST_TYPE_USER_COMMENT_RECEIVED:
	case KX_COMMON_LIST_TYPE_USER_COMMENT_SENT:
		{
			tResponseUserCommentList* pList = (tResponseUserCommentList*) pInfoList;
			nCurrentIndex = 0;
			TBarListItem* lpItem = NULL;
			TBarRowList* 	lpRowList = NULL;
			TBarRow* 		lpRow = NULL;
			TCoolBarList* 	pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonList_Form_CommonList_CoolBar));
			if (pCoolBarList == NULL)
			{
				return eFailed;
			}
				
			lpRowList = pCoolBarList->Rows();
			if(lpRowList == NULL)
			{
				return eFailed;
			}

			lpRowList->BeginUpdate();

			lpRowList->Clear();
			lpRow = lpRowList->AppendRow();
			while( nGroupCount > 0 && nCurrentIndex < nGroupCount && nCurrentIndex < KX_COMMENT_ITEM_NUM_MAX )
			{
				//add Item
				lpItem = lpRow->AppendItem();
				if (lpItem)
				{
					TFont objFontType;
					TUChar pszName[32] = {0};
					TUChar pszContent[1024] = {0};
					TUChar pszTitle[32+256] = {0};
					TUChar pszTemp[256] = {0};	
					TUChar* pszDateTime = NULL;

					Int32 ItemHeight = 0;
					TRectangle Rc_Temp;
					
					lpItem->SetTitle(NULL);
					lpItem->SetCaption(NULL);                       
					lpItem->SetIndicatorType(itNone);

					//head
					TBitmap * pBmpDefault = (TBitmap *)TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
					TBitmap * pBmpMask = (TBitmap *)TResource::LoadConstBitmap(APP_KA_ID_BITMAP_head1);								
					pLogoID[nLogoIndex] = CtrlAddItemToCoolBarList_MaskButton(this, lpItem, KX_COMMENT_ITEM_LOGO_X, KX_COMMENT_ITEM_LOGO_Y, KX_COMMENT_ITEM_LOGO_W, KX_COMMENT_ITEM_LOGO_H, pBmpDefault, pBmpMask);


					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByUrl(pList->comments[nCurrentIndex].flogo);
					if(pDownLoadBitmap)
					{
						TMaskButton* pImage = static_cast<TMaskButton*>(GetControlPtr(pLogoID[nLogoIndex]));
						if(pImage)
						{
							TRectangle rc;
							pImage->GetBounds(&rc);

							pBmp[nLogoIndex] = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
							pBmp[nLogoIndex]->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
						
							pImage->SetImage(pBmp[nLogoIndex],(rc.Width()-pBmp[nLogoIndex]->GetWidth())/2, (rc.Height()-pBmp[nLogoIndex]->GetHeight())/2);
							pImage->Draw();
						}
						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 								
					}
					else
					{				
					KaiXinAPICommon_DownloadPhoto(pList->comments[nCurrentIndex].flogo, this->GetWindowHwndId(), nLogoIndex );
					}
					nLogoIndex++;													

					//name
					TUString::StrUtf8ToStrUnicode(pszName , (const Char *)pList->comments[nCurrentIndex].fname);
					CtrlAddItemToCoolBarList_Lable(this, lpItem, KX_COMMENT_ITEM_NAME_X, KX_COMMENT_ITEM_NAME_Y, 0, FONT_MIDDLE, pszName);
					
					if( strcmp(pList->comments[nCurrentIndex].mtype,"1" )== 0 )
					{
						CtrlAddItemToCoolBarList_Lable(this, lpItem, KX_COMMENT_ITEM_WHISPER_X, KX_COMMENT_ITEM_WHISPER_Y, 0, FONT_SMALL, (TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Comment_Whisper), RGB_COLOR_RED);
					}

					//time
					cUnixTime_ConvertUnixTimeToFormatString(pList->comments[nCurrentIndex].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
					CtrlAddItemToCoolBarList_Lable(this, lpItem, KX_COMMENT_ITEM_TIME_X, KX_COMMENT_ITEM_TIME_Y, 0, FONT_SMALL, pszDateTime, COLOR_DATE_TIME);
					if(pszDateTime) 
					{
						delete[] pszDateTime;
						pszDateTime = NULL;
					}

					//content
					TUString::StrUtf8ToStrUnicode(pszContent , (const Char *)pList->comments[nCurrentIndex].abscont);
					CtrlAddItemToCoolBarList_Lable(this, lpItem, KX_COMMENT_ITEM_CONTENT_X, KX_COMMENT_ITEM_CONTENT_Y, KX_COMMENT_ITEM_CONTENT_W, FONT_NORMAL, pszContent);

					//count
					TUChar MsgInfo[32] = {0};
					TUString::StrPrintF(MsgInfo, TResource::LoadConstString(APP_KA_ID_STRING_TotalComments),pList->comments[nCurrentIndex].cnum);
					Int32 nCountId = CtrlAddItemToCoolBarList_Lable(this, lpItem, KX_COMMENT_ITEM_ACTIONS_X, KX_COMMENT_ITEM_ACTIONS_Y, 0, FONT_SMALL, MsgInfo);

					TLabel* pCount = static_cast<TLabel*>(GetControlPtr(nCountId));
					pCount->GetBounds(&Rc_Temp);
					ItemHeight = ItemHeight + KX_COMMENT_ITEM_LOGO_Y + KX_COMMENT_ITEM_LOGO_H;

					if( bShowCommentTitle == TRUE )
					{
						Int32 Title_Y = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;
						TUString::StrUtf8ToStrUnicode(pszTitle,(const Char *)pList->comments[nCurrentIndex].title);
						Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pTitle = static_cast<TRichView*>(GetControlPtr(nTitleId));
						TRectangle Rc_Title(KX_COMMENT_ITEM_ACTIONS_X, Title_Y, KX_COMMENT_ITEM_CONTENT_W, KX_COMMENT_ITEM_ACTIONS_H);
						pTitle->SetBounds(&Rc_Title);
						pTitle->SetWordWrapAttr(TRUE);
						objFontType = pTitle->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pTitle->SetFont(objFontType); 
						pTitle->SetCaption(pszTitle,FALSE);
						pTitle->SetTransparent(TRUE);
						pTitle->SetEnabled(FALSE);
						pTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pTitle->SetColor(CTL_COLOR_TYPE_FORE, DKGRAY);
						pTitle->SetMaxVisibleLines(1, TRUE);
						pTitle->GetBounds(&Rc_Temp);
					}

					if( ItemHeight < Rc_Temp.Y() + Rc_Temp.Height())
					{
						ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;
					}
					else
					{
						ItemHeight = ItemHeight + KX_COMMENT_ITEM_LINE_SPACE;
					}

					lpItem->SetHeight(ItemHeight );
				}
				nCurrentIndex ++;
			}
			lpRowList->EndUpdate();
		}
		nRet = eFailed;	//一次性都显示出来,不再用timer方式
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_REPASTE:
		{
			tResponseCommentDetail* pDetail = (tResponseCommentDetail*) pInfoList;
			if( nGroupCount > 0 && nCurrentIndex < nGroupCount && nCurrentIndex < KX_COMMENT_ITEM_NUM_MAX )
			{
				TBarRowList* 	lpRowList = NULL;
				TRectangle 		Rc_CoolBarList;
				TBarRow* 		lpRow = NULL;
				TCoolBarList* 	pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonList_Form_CommonList_CoolBar));
				if (pCoolBarList)
				{
					Int32 nIndex = 0;
					pCoolBarList->GetBounds(&Rc_CoolBarList);
					lpRowList = pCoolBarList->Rows();
					//add row
					if (lpRowList)
					{
						lpRowList->BeginUpdate();
						if( nCurrentIndex == 0 )
						{
							lpRowList->Clear();
							lpRow = lpRowList->AppendRow();
						}
						else
						{
							lpRow = lpRowList->GetRow(0);
						}										
						lpRowList->EndUpdate(); 

						//add Item
						TBarListItem* lpItem = NULL;
						if(lpRow)
						{
							lpItem = lpRow->AppendItem();
							if (lpItem)
							{
								TFont objFontType;
								TUChar pszName[32] = {0};
								TUChar pszContent[60] = {0};
								TUChar pszTitle[32+256] = {0};
								TUChar pszTemp[256] = {0};	
								TUChar* pszDateTime = NULL;

								Int32 ItemHeight = 0;
								TRectangle Rc_Temp;

								TRectangle rect;
								lpItem->GetBounds(rect);
								lpItem->SetCaption(NULL);                       
								lpItem->SetIndicatorType(itNone);

								ItemHeight = rect.Y() - Rc_CoolBarList.Y();

								while( nIndex < pDetail->cnum )
								{
									Int32 Offset = 0; 
									if( nIndex > 0 )
									{
										Offset = KX_COMMENT_ITEM_LOGO_W + KX_COMMENT_ITEM_WIDGET_SPACE;

										//Drew Line
#if 0
										Int32 nLineId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
										TRichView* pLine = static_cast<TRichView*>(GetControlPtr(nLineId));
										TRectangle Rc_Line(KX_COMMENT_ITEM_LOGO_X + Offset, ItemHeight + KX_COMMENT_ITEM_LINE_SPACE, 224, 1);
										pLine->SetBounds(&Rc_Line);
										pLine->SetCaption(L"",FALSE);
										pLine->SetWordWrapAttr(TRUE);
										pLine->SetTransparent(TRUE);
										pLine->SetEnabled(FALSE);
										pLine->SetColor(CTL_COLOR_TYPE_DISABLE_BACK,BLUE);
										pLine->SetBorderStyle(bsSingle,TRUE);
										pLine->SetScrollBarMode(CTL_SCL_MODE_NONE);
#endif
									}

									//head
									Int32 nLogoId = lpItem->AddCtrl(CTL_CLASS_MASK_BUTTON, 0, 0);
									TMaskButton* pUserLogo = static_cast<TMaskButton*>(GetControlPtr(nLogoId));
									pLogoID[nLogoIndex] = nLogoId;
									TRectangle Rc_Logo(KX_COMMENT_ITEM_LOGO_X + Offset, KX_COMMENT_ITEM_LOGO_Y + ItemHeight, KX_COMMENT_ITEM_LOGO_W, KX_COMMENT_ITEM_LOGO_H);
									pUserLogo->SetBounds(&Rc_Logo);
									//	pUserLogo->SetFrameWidth(2);

									const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
									const TBitmap * pBmpMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_head1);
								
									pUserLogo->SetImage(pBmp,(Rc_Logo.Width()-pBmp->GetWidth())/2, (Rc_Logo.Height()-pBmp->GetHeight())/2);
									pUserLogo->SetBackImage(pBmpMask, 0, 0);
								
									KaiXinAPICommon_DownloadPhoto(pDetail->comments[nIndex].flogo, this->GetWindowHwndId(), nLogoIndex );
									nLogoIndex++;													

									TUString::StrUtf8ToStrUnicode(pszName , (const Char *)pDetail->comments[nIndex].fname);
									Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
									TRectangle Rc_Name(KX_COMMENT_ITEM_NAME_X + Offset, KX_COMMENT_ITEM_NAME_Y + ItemHeight, KX_COMMENT_ITEM_NAME_W - Offset, KX_COMMENT_ITEM_NAME_H);
									pName->SetBounds(&Rc_Name);
									objFontType = pName->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pName->SetFont(objFontType); 
									pName->SetCaption(pszName,FALSE);

									if( nIndex == 0 && strcmp(pDetail->mtype,"1")== 0 )
									{
										Int32 nWhisperId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
										TLabel* pWhisper = static_cast<TLabel*>(GetControlPtr(nWhisperId));
										TRectangle Rc_Whisper(KX_COMMENT_ITEM_WHISPER_X, KX_COMMENT_ITEM_WHISPER_Y + ItemHeight, KX_COMMENT_ITEM_WHISPER_W, KX_COMMENT_ITEM_WHISPER_H);
										pWhisper->SetBounds(&Rc_Whisper);
										objFontType = pWhisper->GetFont();
										objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
										pWhisper->SetFont(objFontType);
										pWhisper->SetColor(CTL_COLOR_TYPE_FORE, RED); 
										pWhisper->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Comment_Whisper),FALSE);
									}

									cUnixTime_ConvertUnixTimeToFormatString(pDetail->comments[nIndex].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
									Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
									TRectangle Rc_Time(KX_COMMENT_ITEM_TIME_X, KX_COMMENT_ITEM_TIME_Y + ItemHeight, KX_COMMENT_ITEM_TIME_W, KX_COMMENT_ITEM_TIME_H);
									pTime->SetBounds(&Rc_Time);
									objFontType = pTime->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pTime->SetFont(objFontType); 
									pTime->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
									pTime->SetCaption(pszDateTime,FALSE);
									if(pszDateTime) 
									{
										delete[] pszDateTime;
										pszDateTime = NULL;
									}

									TUString::StrUtf8ToStrUnicode(pszContent , (const Char *)pDetail->comments[nIndex].abscont);
									Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
									TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
									TRectangle Rc_Content(KX_COMMENT_ITEM_CONTENT_X + Offset, KX_COMMENT_ITEM_CONTENT_Y + ItemHeight, KX_COMMENT_ITEM_CONTENT_W - Offset, KX_COMMENT_ITEM_CONTENT_H);
									pContent->SetBounds(&Rc_Content);
									objFontType = pContent->GetFont();
									objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
									pContent->SetFont(objFontType); 
									pContent->SetCaption(pszContent,FALSE);
									pContent->SetWordWrapAttr(TRUE);
									pContent->SetTransparent(TRUE);
									pContent->SetEnabled(FALSE);
									pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
									pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
									pContent->GetBounds(&Rc_Temp);
									ItemHeight = ItemHeight + KX_COMMENT_ITEM_LOGO_Y + KX_COMMENT_ITEM_LOGO_H;
									if( ItemHeight < Rc_Temp.Y() + Rc_Temp.Height())
									{
										ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;
									}
									else
									{
										ItemHeight = ItemHeight + KX_COMMENT_ITEM_LINE_SPACE;
									}

									nIndex++;
								}

								Int32 nActionId = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
								TButton* pAction = static_cast<TButton*>(GetControlPtr(nActionId));
								TRectangle Rc_Action(KX_COMMENT_ITEM_ACTIONS_X, ItemHeight + 4, KX_COMMENT_ITEM_ACTIONS_W, KX_COMMENT_ITEM_ACTIONS_H);
								pAction->SetBounds(&Rc_Action);
								objFontType = pAction->GetFont();
								objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
								pAction->SetFont(objFontType);
								pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Reply),FALSE);

								ActionButID[nCurrentIndex] = nActionId;

								if( bShowCommentTitle == TRUE )
								{
									TUString::StrUtf8ToStrUnicode(pszTitle,(const Char *)pDetail->title);
									Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
									TRichView* pTitle = static_cast<TRichView*>(GetControlPtr(nTitleId));
									TRectangle Rc_Title(KX_COMMENT_ITEM_ACTIONS_X, ItemHeight + 30, 250, KX_COMMENT_ITEM_ACTIONS_H);
									pTitle->SetBounds(&Rc_Title);
									pTitle->SetWordWrapAttr(TRUE);
									objFontType = pTitle->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pTitle->SetFont(objFontType); 
									pTitle->SetCaption(pszTitle,FALSE);
									pTitle->SetTransparent(TRUE);
									pTitle->SetEnabled(FALSE);
									pTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
									pTitle->SetColor(CTL_COLOR_TYPE_FORE, DKGRAY);
									pTitle->SetMaxVisibleLines(1, TRUE);
									pTitle->GetBounds(&Rc_Temp);
								}
								else
								{
									pAction->GetBounds(&Rc_Temp);
								}											

								ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;

								lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );							
							}
						}
					}
				}
				nRet = eSucceed;
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_REPASTE:
	case KX_COMMON_LIST_TYPE_COMMENT_DIARY:
	case KX_COMMON_LIST_TYPE_COMMENT_RECORD:
	case KX_COMMON_LIST_TYPE_COMMENT_STATE:
		{
			tResponseUserCommentList* pDetail = (tResponseUserCommentList*) pInfoList;
			if( nGroupCount > 0 && nCurrentIndex < nGroupCount && nCurrentIndex < KX_COMMENT_ITEM_NUM_MAX )
			{
				TBarRowList* 	lpRowList = NULL;
				TRectangle 		Rc_CoolBarList;
				TBarRow* 		lpRow = NULL;
				TCoolBarList* 	pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonList_Form_CommonList_CoolBar));
				if (pCoolBarList)
				{
					pCoolBarList->GetBounds(&Rc_CoolBarList);
					lpRowList = pCoolBarList->Rows();
					//add row
					if (lpRowList)
					{
						lpRowList->BeginUpdate();
						if( nCurrentIndex == 0 )
						{
							lpRowList->Clear();
							lpRow = lpRowList->AppendRow();
						}
						else
						{
							lpRow = lpRowList->GetRow(0);
						}										
						lpRowList->EndUpdate(); 

						//add Item
						TBarListItem* lpItem = NULL;
						if(lpRow)
						{
							lpItem = lpRow->AppendItem();
							if (lpItem)
							{
								TFont objFontType;
								TUChar pszName[32] = {0};
								TUChar pszContent[60] = {0};
								TUChar pszTitle[32+256] = {0};
								TUChar pszTemp[256] = {0};	
								TUChar* pszDateTime = NULL;

								Int32 ItemHeight = 0;
								TRectangle Rc_Temp;

								TRectangle rect;
								lpItem->GetBounds(rect);
								lpItem->SetCaption(NULL);                       
								lpItem->SetIndicatorType(itNone);

								ItemHeight = rect.Y() - Rc_CoolBarList.Y();

								do
								{
									Int32 Offset = 0; 
									if( pDetail->comments[nCurrentItem].mainthread == 0 )
									{
										Offset = KX_COMMENT_ITEM_LOGO_W + KX_COMMENT_ITEM_WIDGET_SPACE;

										//Drew Line
#if 0
										Int32 nLineId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
										TRichView* pLine = static_cast<TRichView*>(GetControlPtr(nLineId));
										TRectangle Rc_Line(KX_COMMENT_ITEM_LOGO_X + Offset, ItemHeight + KX_COMMENT_ITEM_LINE_SPACE, 224, 1);
										pLine->SetBounds(&Rc_Line);
										pLine->SetCaption(L"",FALSE);
										pLine->SetWordWrapAttr(TRUE);
										pLine->SetTransparent(TRUE);
										pLine->SetEnabled(FALSE);
										pLine->SetColor(CTL_COLOR_TYPE_DISABLE_BACK,BLUE);
										pLine->SetBorderStyle(bsSingle,TRUE);
										pLine->SetScrollBarMode(CTL_SCL_MODE_NONE);
#endif
									}

									//head
									Int32 nLogoId = lpItem->AddCtrl(CTL_CLASS_MASK_BUTTON, 0, 0);
									TMaskButton* pUserLogo = static_cast<TMaskButton*>(GetControlPtr(nLogoId));
									pLogoID[nLogoIndex] = nLogoId;
									TRectangle Rc_Logo(KX_COMMENT_ITEM_LOGO_X + Offset, KX_COMMENT_ITEM_LOGO_Y + ItemHeight, KX_COMMENT_ITEM_LOGO_W, KX_COMMENT_ITEM_LOGO_H);
									pUserLogo->SetBounds(&Rc_Logo);
									//	pUserLogo->SetFrameWidth(2);
									

									const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
									const TBitmap * pBmpMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_head1);
									pUserLogo->SetImage(pBmp,(Rc_Logo.Width()-pBmp->GetWidth())/2, (Rc_Logo.Height()-pBmp->GetHeight())/2);
									pUserLogo->SetBackImage(pBmpMask, 0, 0);
									
									KaiXinAPICommon_DownloadPhoto(pDetail->comments[nCurrentItem].flogo, this->GetWindowHwndId(), nLogoIndex );
									nLogoIndex++;													

									TUString::StrUtf8ToStrUnicode(pszName , (const Char *)pDetail->comments[nCurrentItem].fname);
									Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
									TRectangle Rc_Name(KX_COMMENT_ITEM_NAME_X + Offset, KX_COMMENT_ITEM_NAME_Y + ItemHeight, KX_COMMENT_ITEM_NAME_W - Offset, KX_COMMENT_ITEM_NAME_H);
									pName->SetBounds(&Rc_Name);
									objFontType = pName->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pName->SetFont(objFontType); 
									pName->SetCaption(pszName,FALSE);

									if( pDetail->comments[nCurrentItem].mainthread == 1 && strcmp(pDetail->comments[nCurrentItem].mtype,"1")== 0 )
									{
										Int32 nWhisperId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
										TLabel* pWhisper = static_cast<TLabel*>(GetControlPtr(nWhisperId));
										TRectangle Rc_Whisper(KX_COMMENT_ITEM_WHISPER_X, KX_COMMENT_ITEM_WHISPER_Y + ItemHeight, KX_COMMENT_ITEM_WHISPER_W, KX_COMMENT_ITEM_WHISPER_H);
										pWhisper->SetBounds(&Rc_Whisper);
										objFontType = pWhisper->GetFont();
										objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
										pWhisper->SetFont(objFontType);
										pWhisper->SetColor(CTL_COLOR_TYPE_FORE, RED); 
										pWhisper->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Comment_Whisper),FALSE);
									}

									cUnixTime_ConvertUnixTimeToFormatString(pDetail->comments[nCurrentItem].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
									Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
									TRectangle Rc_Time(KX_COMMENT_ITEM_TIME_X, KX_COMMENT_ITEM_TIME_Y + ItemHeight, KX_COMMENT_ITEM_TIME_W, KX_COMMENT_ITEM_TIME_H);
									pTime->SetBounds(&Rc_Time);
									objFontType = pTime->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pTime->SetFont(objFontType); 
									pTime->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
									pTime->SetCaption(pszDateTime,FALSE);
									if(pszDateTime) 
									{
										delete[] pszDateTime;
										pszDateTime = NULL;
									}

									TUString::StrUtf8ToStrUnicode(pszContent , (const Char *)pDetail->comments[nCurrentItem].abscont);
									Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
									TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
									TRectangle Rc_Content(KX_COMMENT_ITEM_CONTENT_X + Offset, KX_COMMENT_ITEM_CONTENT_Y + ItemHeight, KX_COMMENT_ITEM_CONTENT_W - Offset, KX_COMMENT_ITEM_CONTENT_H);
									pContent->SetBounds(&Rc_Content);
									objFontType = pContent->GetFont();
									objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
									pContent->SetFont(objFontType); 
									pContent->SetCaption(pszContent,FALSE);
									pContent->SetWordWrapAttr(TRUE);
									pContent->SetTransparent(TRUE);
									pContent->SetEnabled(FALSE);
									pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
									pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
									pContent->GetBounds(&Rc_Temp);
									ItemHeight = ItemHeight + KX_COMMENT_ITEM_LOGO_Y + KX_COMMENT_ITEM_LOGO_H;
									if( ItemHeight < Rc_Temp.Y() + Rc_Temp.Height())
									{
										ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;
									}
									else
									{
										ItemHeight = ItemHeight + KX_COMMENT_ITEM_LINE_SPACE;
									}

									nCurrentItem++;
								}while( nCurrentItem < nItemCount && pDetail->comments[nCurrentItem].mainthread == 0 );

								Int32 nActionId = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
								TButton* pAction = static_cast<TButton*>(GetControlPtr(nActionId));
								TRectangle Rc_Action(KX_COMMENT_ITEM_ACTIONS_X, ItemHeight + 4, KX_COMMENT_ITEM_ACTIONS_W, KX_COMMENT_ITEM_ACTIONS_H);
								pAction->SetBounds(&Rc_Action);
								objFontType = pAction->GetFont();
								objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
								pAction->SetFont(objFontType);
								pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Reply),FALSE);
								pAction->GetBounds(&Rc_Temp);

								ActionButID[nCurrentIndex] = nActionId;

								ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;

								lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );							
							}
						}
					}
				}
				nRet = eSucceed;
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_MESSAGE:
		{
			tResponseMessagesList* pList = (tResponseMessagesList*) pInfoList;
			if( nItemIndex < 0 || nItemIndex >= pList->n )//:TODO:
			{
				return eFailed;
			}

			if( nGroupCount > 0 && nCurrentIndex < nGroupCount && nCurrentIndex < KX_COMMENT_ITEM_NUM_MAX )
			{
				TBarRowList* 	lpRowList = NULL;
				TRectangle 		Rc_CoolBarList;
				TBarRow* 		lpRow = NULL;
				TCoolBarList* 	pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonList_Form_CommonList_CoolBar));
				if (pCoolBarList)
				{
					pCoolBarList->GetBounds(&Rc_CoolBarList);
					lpRowList = pCoolBarList->Rows();
					//add row
					if (lpRowList)
					{
						lpRowList->BeginUpdate();
						if( nCurrentIndex == 0 )
						{
							lpRowList->Clear();
							lpRow = lpRowList->AppendRow();
						}
						else
						{
							lpRow = lpRowList->GetRow(0);
						}										
						lpRowList->EndUpdate(); 

						//add Item
						TBarListItem* lpItem = NULL;
						if(lpRow)
						{
							lpItem = lpRow->AppendItem();
							if (lpItem)
							{
								TFont objFontType;
								TUChar pszName[32] = {0};
								TUChar pszContent[64+1] = {0};
								TUChar pszTitle[32+256] = {0};
								TUChar pszTemp[256] = {0};	
								TUChar* pszDateTime = NULL;

								Int32 ItemHeight = 0;
								TRectangle Rc_Temp;

								TRectangle rect;
								lpItem->GetBounds(rect);
								lpItem->SetCaption(NULL);                       
								lpItem->SetIndicatorType(itNone);

								ItemHeight = rect.Y() - Rc_CoolBarList.Y();

								Int32 nLogoId = lpItem->AddCtrl(CTL_CLASS_MASK_BUTTON, 0, 0);
								TMaskButton* pUserLogo = static_cast<TMaskButton*>(GetControlPtr(nLogoId));
								pLogoID[nLogoIndex] = nLogoId;
								TRectangle Rc_Logo(KX_COMMENT_ITEM_LOGO_X, KX_COMMENT_ITEM_LOGO_Y + ItemHeight, KX_COMMENT_ITEM_LOGO_W, KX_COMMENT_ITEM_LOGO_H);
								pUserLogo->SetBounds(&Rc_Logo);
								//	pUserLogo->SetFrameWidth(2);
								const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
								const TBitmap * pBmpMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_head1);
								pUserLogo->SetImage(pBmp,(Rc_Logo.Width()-pBmp->GetWidth())/2, (Rc_Logo.Height()-pBmp->GetHeight())/2);
								pUserLogo->SetBackImage(pBmpMask, 0, 0);
									
								KaiXinAPICommon_DownloadPhoto(pList->msgs[nCurrentIndex].flogo, this->GetWindowHwndId(), nLogoIndex );
								nLogoIndex++;													

								TUString::StrUtf8ToStrUnicode(pszName , (const Char *)pList->msgs[nCurrentIndex].fnames[0].fname);
								Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
								TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
								TRectangle Rc_Name(KX_COMMENT_ITEM_NAME_X, KX_COMMENT_ITEM_NAME_Y + ItemHeight, KX_COMMENT_ITEM_NAME_W, KX_COMMENT_ITEM_NAME_H);
								pName->SetBounds(&Rc_Name);
								objFontType = pName->GetFont();
								objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
								pName->SetFont(objFontType); 
								pName->SetCaption(pszName,FALSE);

								cUnixTime_ConvertUnixTimeToFormatString(pList->msgs[nCurrentIndex].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
								Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
								TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
								TRectangle Rc_Time(KX_COMMENT_ITEM_TIME_X, KX_COMMENT_ITEM_TIME_Y + ItemHeight, KX_COMMENT_ITEM_TIME_W, KX_COMMENT_ITEM_TIME_H);
								pTime->SetBounds(&Rc_Time);
								objFontType = pTime->GetFont();
								objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
								pTime->SetFont(objFontType); 
								pTime->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
								pTime->SetCaption(pszDateTime,FALSE);
								if(pszDateTime) 
								{
									delete[] pszDateTime;
									pszDateTime = NULL;
								}

								TUString::StrUtf8ToStrUnicode(pszContent , (const Char *)pList->msgs[nCurrentIndex].abscont);
								Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
								TRectangle Rc_Content(KX_COMMENT_ITEM_CONTENT_X, KX_COMMENT_ITEM_CONTENT_Y + ItemHeight, KX_COMMENT_ITEM_CONTENT_W, KX_COMMENT_ITEM_CONTENT_H);
								pContent->SetBounds(&Rc_Content);
								objFontType = pContent->GetFont();
								objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
								pContent->SetFont(objFontType); 
								pContent->SetCaption(pszContent,FALSE);
								pContent->SetWordWrapAttr(TRUE);
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(FALSE);
								pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
								pContent->GetBounds(&Rc_Temp);

								Int32 Count_Y = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;
								TUChar MsgInfo[32] = {0};
								TUChar nCount[16] = {0};
								TUString::StrUtf8ToStrUnicode(nCount , (const Char *)pList->msgs[nCurrentIndex].msgnum);
								TUString::StrPrintF(MsgInfo, TResource::LoadConstString(APP_KA_ID_STRING_TotalMessages),nCount);
								Int32 nCountId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
								TLabel* pCount = static_cast<TLabel*>(GetControlPtr(nCountId));
								TRectangle Rc_Count(KX_COMMENT_ITEM_ACTIONS_X, Count_Y, KX_COMMENT_ITEM_TIME_W, KX_COMMENT_ITEM_TIME_H);
								pCount->SetBounds(&Rc_Count);
								objFontType = pCount->GetFont();
								objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
								pCount->SetFont(objFontType);
								pCount->SetCaption(MsgInfo,FALSE);
								pCount->GetBounds(&Rc_Temp);

								ItemHeight = ItemHeight + KX_COMMENT_ITEM_LOGO_Y + KX_COMMENT_ITEM_LOGO_H;

								if( ItemHeight < Rc_Temp.Y() + Rc_Temp.Height())
								{
									ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_ITEM_LINE_SPACE;
								}
								else
								{
									ItemHeight = ItemHeight + KX_COMMENT_ITEM_LINE_SPACE;
								}

								lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );
							}
						}
					}
				}
				nRet = eSucceed;
			}
		}
		break;

	default:
		nRet = eFailed;
		break;
	}

	return nRet;
}

Int32 TAppCommonListForm::TAppCommonListForm_TypeFilter( void* pList, KX_CommonListType nType )
{
	Int32 nRet = eSucceed;
	int i = 0;

	switch(AppType)
	{
	case KX_COMMON_LIST_TYPE_COMMENT_REPASTE:
		{
			tResponseUserCommentList* pCommentList = (tResponseUserCommentList*)pList;
			tResponseRepasteDetail* Res_detail = NULL;
			nRet = KaiXinAPI_JsonParse(KX_RepasteDetail, (void **)&Res_detail);
			if( nRet == eSucceed )
			{
				for(i=0;i<pCommentList->nCommentCount;i++)
				{
					if(strcmp(pCommentList->comments[i].id,Res_detail->surpid)==0)
					{
						STRCPY_Ex(nCommonListGroup[nGroupCount],pCommentList->comments[i].thread_cid);
						nGroupCount++;
					}
				}
			}
			if( Res_detail )
			{
				delete Res_detail;	
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_REPASTE:
	case KX_COMMON_LIST_TYPE_COMMENT_DIARY:
	case KX_COMMON_LIST_TYPE_COMMENT_RECORD:
	case KX_COMMON_LIST_TYPE_COMMENT_STATE:
		{
			tResponseUserCommentList* pCommentList = (tResponseUserCommentList*)pList;
			for(i=0;i<pCommentList->nCommentCount;i++)
			{
				if( pCommentList->comments[i].mainthread == 1 )
				{
					STRCPY_Ex(nCommonListGroup[nGroupCount],pCommentList->comments[i].thread_cid);
					nCommonListGroupFuid[nGroupCount] = pCommentList->comments[i].fuidInt;
					nGroupCount++;
				}
				nItemCount++;
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_RECEIVED:
	case KX_COMMON_LIST_TYPE_COMMENT_SENT:
	case KX_COMMON_LIST_TYPE_USER_COMMENT_RECEIVED:
	case KX_COMMON_LIST_TYPE_USER_COMMENT_SENT:
		{
			tResponseUserCommentList* pCommentList = (tResponseUserCommentList*)pList;
			//:TODO: size
			for(i=0;i<pCommentList->nCommentCount;i++)
			{
				STRCPY_Ex(nCommonListGroup[nGroupCount],pCommentList->comments[i].thread_cid);
				nCommonListGroupFuid[nGroupCount] = pCommentList->comments[i].fuidInt;
				nGroupCount++;
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_MESSAGE:
		{
			tResponseMessagesList* pMessageList = (tResponseMessagesList*)pList;
			for(i=0;i<pMessageList->n;i++)
			{
				STRCPY_Ex(nMidGroup[i],pMessageList->msgs[i].mid);
				nGroupCount++;
			}
		}
		break;

	default:
		break;
	}

	return nRet;
}

// 窗口事件处理
Boolean TAppCommonListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			dc.SetBackColor(RGB_COLOR_WHITE);
			dc.EraseRectangle(&rc, 0);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case MESSAGE_TIMER:
		if (pEvent->sParam1 == nTimerId)
		{
			Int32 nRet = eFailed;


			//TODO::停止短消息读取定时器
			TIMER_Release(nTimerId);
			nTimerId = -1;

			nRet = TAppCommonListForm_ShowGroup(pApp, pItemList,nCurrentIndex);
			if( nRet == eSucceed )
			{
				nCurrentIndex++;
				nTimerId = TIMER_Create(KX_COMMENT_ITEM_LOAD_TIMER, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, this->GetWindowHwndId(), 0);
			}
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					if( notifyData.nParam >= KX_COMMENT_ITEM_COUNT_MAX )
					{
						break;
					}
					if( pBmp[notifyData.nParam] != NULL )
					{
						pBmp[notifyData.nParam]->Destroy();
						pBmp[notifyData.nParam] = NULL; 								
					}

					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);
					if(pDownLoadBitmap)
					{
						TMaskButton* pImage = static_cast<TMaskButton*>(GetControlPtr(pLogoID[notifyData.nParam]));
						if(pImage)
						{
							TRectangle rc;
							pImage->GetBounds(&rc);

							pBmp[notifyData.nParam] = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
							pBmp[notifyData.nParam]->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
						
							pImage->SetImage(pBmp[notifyData.nParam],(rc.Width()-pBmp[notifyData.nParam]->GetWidth())/2, (rc.Height()-pBmp[notifyData.nParam]->GetHeight())/2);
							pImage->Draw();
						}
						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 								
					}
				}
				break;

			case KX_CommentDetail:
				{
					int iRet = eFailed;

					if( bShowDetail == TRUE )
					{
						tResponseCommentDetail* Response = NULL;
						iRet = KaiXinAPI_JsonParse(KX_CommentDetail, (void **)&Response);
						if(iRet == eSucceed)
						{
							if( nGroupCount > 0 && nCurrentIndex < nGroupCount && nCurrentIndex < KX_COMMENT_ITEM_NUM_MAX )
							{
								iRet = TAppCommonListForm_ShowGroup(pApp,(void*)Response,nCurrentIndex);
								if(iRet == eSucceed)
								{
									nCurrentIndex++;
									TAppCommonListForm_DownloadDetail(pApp,nCurrentIndex);
								}								
							}
						}						

						if( Response )
						{
							delete Response;	
						}
					}
					else
					{
						TComment_DetailForm *pWin = new TComment_DetailForm(pApp,KX_MESSAGE_TYPE_COMMENT_RECEIVED);
					}
				}
				break;

			case KX_SentCommentDetail:
				{
					TComment_DetailForm *pWin = new TComment_DetailForm(pApp,KX_MESSAGE_TYPE_COMMENT_SENT);
				}
				break;

			case KX_UserCommentDetail:
				{
					TComment_DetailForm *pWin = new TComment_DetailForm(pApp,KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED);
				}
				break;

			case KX_SentUserCommentDetail:
				{
					TComment_DetailForm *pWin = new TComment_DetailForm(pApp,KX_MESSAGE_TYPE_USER_COMMENT_SENT);
				}
				break;

			case KX_MessageDetail:
				{
					TComment_DetailForm *pWin = new TComment_DetailForm(pApp,KX_MESSAGE_TYPE_SMS);
				}
				break;

			case KX_PostComment:
				{
					int iRet = eFailed;

					tResponsePostComment* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_PostComment, (void **)&Response);
					if(iRet == eSucceed)
					{
						//:TODO:刷新界面
						//不用再重新设定参数，直接重新download
						KaiXinAPICommon_Download(nPreHandle, this->GetWindowHwndId()); 								
					}
					else
					{							
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_FriendComment),WMB_OK);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;
			case KX_ReplyComment:
				{
					int iRet = eFailed;

					tResponsePostComment* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_ReplyComment, (void **)&Response);
					if(iRet == eSucceed)
					{
						//:TODO:刷新界面
						//不用再重新设定参数，直接重新download
						KaiXinAPICommon_Download(nPreHandle, this->GetWindowHwndId());								
					}						
					else
					{							
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_FriendComment),WMB_OK);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;

			default:
				break;
			}
			break;
		}
#if 0
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == NewCommentEdit)
			{
				Set_Url_Params(KX_PostComment, "type", notifyData.PostMsgData.commentdata.nType);
				Set_Url_Params(KX_PostComment, "id", notifyData.PostMsgData.commentdata.nId);
				Set_Url_Params(KX_PostComment, "ouid", notifyData.PostMsgData.commentdata.nOuid);
				if(notifyData.PostMsgData.commentdata.nHidden == 1)
				{
					Set_Url_Params(KX_PostComment, "hidden", "1");
				}
				else
				{
					Set_Url_Params(KX_PostComment, "hidden", "0");
				}
				Set_Url_Params(KX_PostComment, "content", notifyData.PostMsgData.commentdata.pszCommentContent);
				KaiXinAPICommon_Download(KX_PostComment, this->GetWindowHwndId());
			}

			bHandled = TRUE;
		}
		break;
#endif

	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			switch(notifyData.nEditType)
			{
			case NewCommentEdit:
				{		
					Set_Url_Params(KX_PostComment, "type", notifyData.PostMsgData.commentdata.nType);
					Set_Url_Params(KX_PostComment, "id", notifyData.PostMsgData.commentdata.nId);
					Set_Url_Params(KX_PostComment, "ouid", notifyData.PostMsgData.commentdata.nOuid);
					if(notifyData.PostMsgData.commentdata.nHidden == 1)
					{
						Set_Url_Params(KX_PostComment, "hidden", "1");
					}
					else
					{
						Set_Url_Params(KX_PostComment, "hidden", "0");
					}
					Set_Url_Params(KX_PostComment, "content", notifyData.PostMsgData.commentdata.pszCommentContent);
					KaiXinAPICommon_Download(KX_PostComment, this->GetWindowHwndId());

					break;
				}
			case ReplyCommentEdit:
				{		
					Set_Url_Params(KX_ReplyComment, "replycont", (char*)notifyData.PostMsgData.commentdata.pszCommentContent);
					Set_Url_Params(KX_ReplyComment, "fuid", (char*)notifyData.PostMsgData.commentdata.nOuid); 
					Set_Url_Params(KX_ReplyComment, "thread_cid", (char*)notifyData.PostMsgData.commentdata.nId); 				

					KaiXinAPICommon_Download(KX_ReplyComment, this->GetWindowHwndId());
					break;
				}			

			default:
				break;

			}

			bHandled = TRUE;
		}
		break;	
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TAppCommonListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	void* Response = NULL;

	m_BackBtn = SetAppBackButton(this);

	switch(AppType)
	{
	case KX_COMMON_LIST_TYPE_COMMENT_REPASTE:
		{
			SetAppTilte(this,APP_KA_ID_STRING_FriendComment);
			nWriteNewBtn = SetAppWriteButton(this);
			iRet = KaiXinAPI_JsonParse(KX_RepasteCommentsList, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_REPASTE:
		{
			SetAppTilte(this,APP_KA_ID_STRING_FriendComment);
			nWriteNewBtn = SetAppWriteButton(this);
			iRet = KaiXinAPI_JsonParse(KX_ReceivedRepasteComments, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_DIARY:
		{
			//:TODO: Set your title here
			SetAppTilte(this,APP_KA_ID_STRING_FriendComment);
			nWriteNewBtn = SetAppWriteButton(this);
			iRet = KaiXinAPI_JsonParse(KX_ReceivedDiaryComments, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_RECORD:
		{
			//:TODO: Set your title here
			SetAppTilte(this,APP_KA_ID_STRING_FriendComment);
			nWriteNewBtn = SetAppWriteButton(this);
			iRet = KaiXinAPI_JsonParse(KX_ReceivedRecordComments, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_STATE:
		{
			//:TODO: Set your title here
			SetAppTilte(this,APP_KA_ID_STRING_FriendComment);
			nWriteNewBtn = SetAppWriteButton(this);
			iRet = KaiXinAPI_JsonParse(KX_ReceivedStateComments, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_RECEIVED:
		{
			SetAppTilte(this,APP_KA_ID_STRING_FriendComment);
			iRet = KaiXinAPI_JsonParse(KX_ReceivedCommentsList, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_SENT:
		{
			SetAppTilte(this,APP_KA_ID_STRING_SentCommentList);
			iRet = KaiXinAPI_JsonParse(KX_SentCommentsList, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_RECEIVED:
		{
			SetAppTilte(this,APP_KA_ID_STRING_ReceivedUserCommentList);
			iRet = KaiXinAPI_JsonParse(KX_ReceivedUserCommentsList, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_SENT:
		{
			SetAppTilte(this,APP_KA_ID_STRING_SentUserCommentList);
			iRet = KaiXinAPI_JsonParse(KX_SentUserCommentsList, (void **)&Response);
		}
		break;

	case KX_COMMON_LIST_TYPE_MESSAGE:
		{
			SetAppTilte(this,APP_KA_ID_STRING_Message);
			iRet = KaiXinAPI_JsonParse(KX_MessagesList, (void **)&Response);
		}
		break;

	default:
		break;
	}

	if(iRet == eSucceed)
	{
		int i = 0;
		nGroupCount = 0;
		nItemCount = 0;
		memset(nCommonListGroup, 0, sizeof(char)*KX_COMMENT_COUNT_MAX*32);
		memset(nMidGroup, 0, sizeof(char)*KX_COMMENT_COUNT_MAX*32);
		TAppCommonListForm_TypeFilter((void*)Response,AppType);
		if( nGroupCount > 0 )
		{
			nCurrentIndex = 0;
			nCurrentItem = 0;
			nLogoIndex = 0;
			if( bShowDetail == TRUE && bNeedDownloadDetail == TRUE )
			{
				TAppCommonListForm_DownloadDetail(pApp,nCurrentIndex);
			}
			else
			{
				if( AppType == KX_COMMON_LIST_TYPE_MESSAGE )
				{
					MemCopy((void*)&pMessagetList, (const void*)Response, sizeof(tResponseMessagesList));
					pItemList = (void*)&pMessagetList;
					nTimerId = TIMER_Create(KX_COMMENT_ITEM_LOAD_TIMER, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, this->GetWindowHwndId(), 0);
				}
				else
				{
					MemCopy((void*)&pCommentList, (const void*)Response, sizeof(tResponseUserCommentList));
					pItemList = (void*)&pCommentList;
					nTimerId = TIMER_Create(KX_COMMENT_ITEM_LOAD_TIMER, TIMER_MODE_AUTORUN | TIMER_MODE_NORMAL, NULL, this->GetWindowHwndId(), 0);
				}
			}
		}

		if( nGroupCount == 0)
		{
			TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonList_Form_CommonList_CoolBar));
			if(pCoolBarList)
			{
				pCoolBarList->Hide(TRUE);
			}

			// 显示"还没有人评论过"标签
			TImage* pCommentIcon = static_cast<TImage*>(GetControlPtr(APP_KA_ID_CommonList_Form_commenbitmap));
			if(pCommentIcon)
			{
				pCommentIcon->Show(TRUE);
			}

			TLabel* pNoCommentLabel = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_CommonList_Form_NoCommentLabel));
			if(pNoCommentLabel)
			{
				pNoCommentLabel->SetCaption(TResource::LoadConstString(nNoneItemInfo), TRUE);
				pNoCommentLabel->Show(TRUE);
			}

			this->UpdateWindow(0);
		}
	}

	if( Response )
	{
		delete Response;	
	}

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TAppCommonListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	//TODO::停止短消息读取定时器
	TIMER_Release(nTimerId);
	nTimerId = -1;
	return TRUE;
}


// 控件点击事件处理
Boolean TAppCommonListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	Int32 nCtrlID = pEvent->sParam1;
	bHandled = FALSE;

	if(m_BackBtn == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	switch(AppType)
	{
	case KX_COMMON_LIST_TYPE_COMMENT_REPASTE:
		{
			if( nCtrlID == nWriteNewBtn )
			{
				int iRet = eFailed;
				tResponseCommentDetail* Response = NULL;
				PostNotifyMsgDataType in_msgData;
				MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

				iRet = KaiXinAPI_JsonParse(KX_CommentDetail, (void **)&Response);
				if(iRet == eSucceed)
				{
					in_msgData.nCtrlId = 0;
					in_msgData.nHwndId = this->GetWindowHwndId();
					in_msgData.nEditType = NewCommentEdit;

					STRCPY_Ex(in_msgData.PostMsgData.commentdata.nType,Response->appid);
					STRCPY_Ex(in_msgData.PostMsgData.commentdata.nId,Response->thread_cid);
					STRCPY_Ex(in_msgData.PostMsgData.commentdata.nOuid,Response->uid);

					TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);
				}
				if( Response )
				{
					delete Response;	
				}
				break;
			}
			else
			{
				for(int i=0; i<KX_COMMENT_COUNT_MAX; i++)
				{
					if( ActionButID[i] == nCtrlID )
					{
						PostNotifyMsgDataType in_msgData;
						MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
						in_msgData.nCtrlId = 0;
						in_msgData.nHwndId = this->GetWindowHwndId();
						in_msgData.nEditType = ReplyCommentEdit;

						TAppEditForm *pNewEdit = new TAppEditForm( pApp, in_msgData);
						bHandled = TRUE;
						break;
					}
				}
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_REPASTE:
	case KX_COMMON_LIST_TYPE_COMMENT_DIARY:
	case KX_COMMON_LIST_TYPE_COMMENT_RECORD:
	case KX_COMMON_LIST_TYPE_COMMENT_STATE:
		//:TODO:评论列表事件处理，比如回复
		{
			if( nCtrlID == nWriteNewBtn )
			{
				int iRet = eFailed;
				tResponseUserCommentList* Response = NULL;
				PostNotifyMsgDataType in_msgData;
				MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

				iRet = KaiXinAPI_JsonParse(nPreHandle, (void **)&Response);
				if(iRet == eSucceed)
				{
					in_msgData.nCtrlId = 0;
					in_msgData.nHwndId = this->GetWindowHwndId();
					in_msgData.nEditType = NewCommentEdit;

					STRCPY_Ex(in_msgData.PostMsgData.commentdata.nType,Response->type);
					STRCPY_Ex(in_msgData.PostMsgData.commentdata.nId,Response->oid);
					STRCPY_Ex(in_msgData.PostMsgData.commentdata.nOuid,Response->ouid);

					TAppEditForm *pWin = new TAppEditForm( pApp, in_msgData);
				}
				if( Response )
				{
					delete Response;	
				}
				bHandled = TRUE;
				break;
			}
			else
			{
				for(int i=0; i<KX_COMMENT_COUNT_MAX; i++)
				{
					if( ActionButID[i] == nCtrlID )
					{
						int iRet = eFailed;
						tResponseUserCommentList* Response = NULL;
						PostNotifyMsgDataType in_msgData;
						MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
						iRet = KaiXinAPI_JsonParse(nPreHandle, (void **)&Response);

						in_msgData.nCtrlId = 0;
						in_msgData.nHwndId = this->GetWindowHwndId();
						in_msgData.nEditType = ReplyCommentEdit;

						STRCPY_Ex(in_msgData.PostMsgData.commentdata.nType,Response->type);
						STRCPY_Ex(in_msgData.PostMsgData.commentdata.nId,nCommonListGroup[i]);//回复评论时，nID保存thread_id

						//STRCPY_Ex(in_msgData.PostMsgData.commentdata.nOuid,Response->ouid);
						TUChar TFuid[16] = {0};
						char pszFuid[16] = {0};
						TUString::StrIToA(TFuid,nCommonListGroupFuid[i]);
						TUString::StrUnicodeToStrUtf8((Char *)pszFuid,TFuid);
						STRCPY_Ex(in_msgData.PostMsgData.commentdata.nOuid,pszFuid);

						TAppEditForm *pNewEdit = new TAppEditForm( pApp, in_msgData);
						if( Response )
						{
							delete Response;	
						}
						bHandled = TRUE;
						break;
					}
				}
			}
		}

		break;

	case KX_COMMON_LIST_TYPE_MESSAGE:
		{
			if( nCtrlID == APP_KA_ID_CommonList_Form_CommonList_CoolBar )
			{
				TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
				if( pRow->GetIndex() == 0 )	//First Row
				{ 
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int ItemIndex = pItem->GetIndex();
					Set_Url_Params(KX_MessageDetail, "mid", nMidGroup[ItemIndex]);
					KaiXinAPICommon_Download(KX_MessageDetail, this->GetWindowHwndId());
					bHandled = TRUE; 							
				}						
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_RECEIVED:
		{
			if( nCtrlID == APP_KA_ID_CommonList_Form_CommonList_CoolBar )
			{
				TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
				if( pRow->GetIndex() == 0 )	//First Row
				{ 
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int ItemIndex = pItem->GetIndex();
					Set_Url_Params(KX_CommentDetail, "thread_cid", nCommonListGroup[ItemIndex]);
					KaiXinAPICommon_Download(KX_CommentDetail, this->GetWindowHwndId());
					bHandled = TRUE; 							
				}						
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_COMMENT_SENT:
		{
			if( nCtrlID == APP_KA_ID_CommonList_Form_CommonList_CoolBar )
			{
				TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
				if( pRow->GetIndex() == 0 )	//First Row
				{ 
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int ItemIndex = pItem->GetIndex();
					char sFuid[32] = {0};
					sprintf(sFuid, "%d", nCommonListGroupFuid[ItemIndex]);
					Set_Url_Params(KX_SentCommentDetail, "fuid", sFuid);					
					Set_Url_Params(KX_SentCommentDetail, "thread_cid", nCommonListGroup[ItemIndex]);
					KaiXinAPICommon_Download(KX_SentCommentDetail, this->GetWindowHwndId());
					bHandled = TRUE; 							
				}						
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_RECEIVED:
		{
			if( nCtrlID == APP_KA_ID_CommonList_Form_CommonList_CoolBar )
			{
				TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
				if( pRow->GetIndex() == 0 )	//First Row
				{ 
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int ItemIndex = pItem->GetIndex();
					Set_Url_Params(KX_UserCommentDetail, "thread_cid", nCommonListGroup[ItemIndex]);
					KaiXinAPICommon_Download(KX_UserCommentDetail, this->GetWindowHwndId());
					bHandled = TRUE; 							
				}						
			}
		}
		break;

	case KX_COMMON_LIST_TYPE_USER_COMMENT_SENT:
		{
			if( nCtrlID == APP_KA_ID_CommonList_Form_CommonList_CoolBar )
			{
				TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
				if( pRow->GetIndex() == 0 )	//First Row
				{ 
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int ItemIndex = pItem->GetIndex();
					Set_Url_Params(KX_SentUserCommentDetail, "thread_cid", nCommonListGroup[ItemIndex]);
					KaiXinAPICommon_Download(KX_SentUserCommentDetail, this->GetWindowHwndId());
					bHandled = TRUE; 							
				}						
			}
		}
		break;

	default:
		break;
	}
	return bHandled;
}

