/*!
* \file	 KaiXinApp_CommentDetail.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 评论的处理
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/
#include "KaiXinAPICommon.h"

#include "KaiXinAPI_CommentDetail.h"

void* KaiXinAPI_CommentDetail_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseCommentDetail*  Response = new tResponseCommentDetail;
	memset(Response, 0 , sizeof(tResponseCommentDetail));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->uid, "%d", pTemp0->valueint );
			else
				STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "n");
		if(pTemp0)
		{
			Response->n = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "thread_cid");
		if(pTemp0)
		{
			if(pTemp0->valuedouble > 0)
				DoubleToChar(pTemp0->valuedouble, Response->thread_cid);
			else
				STRCPY_Ex(Response->thread_cid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "mtype");
		if(pTemp0)
		{
			if(IsNullString(pTemp0->valuestring))
				sprintf(Response->mtype, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->mtype, pTemp0->valuestring);			
		}
		
		pTemp0 = cJSON_GetObjectItem(json, "flogo");
		if(pTemp0)
		{
			STRCPY_Ex(Response->flogo, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "cnum");
		if(pTemp0)
		{
			Response->cnum = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "more");
		if(pTemp0)
		{
			Response->more = pTemp0->valueint;
		}

		//new added
		pTemp0 = cJSON_GetObjectItem(json, "title");				
		if(pTemp0)
		{
			STRCPY_Ex(Response->title, pTemp0->valuestring);
		}

		pTemp0 = cJSON_GetObjectItem(json, "thumbnail");

		if(pTemp0)

		{

			STRCPY_Ex(Response->thumbnail, pTemp0->valuestring);

		}

		pTemp0 = cJSON_GetObjectItem(json, "appid");

		if(pTemp0)
		{

			STRCPY_Ex(Response->appid, pTemp0->valuestring);

		}

		pTemp0 = cJSON_GetObjectItem(json, "comments");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize = nSize1;
			if( nSize1 != 0 )
			{
				Response->comments = NULL;
				Response->comments = (CommentDetail_comments*) malloc(sizeof( CommentDetail_comments ) * nSize1 );
				memset(Response->comments, 0 , sizeof(CommentDetail_comments) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->comments[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "cid");
				if(pTemp1)
				{
					Response->comments[i].cid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					Response->comments[i].fuid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->comments[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "abscont");
				if(pTemp1)
				{
					STRCPY_Ex(Response->comments[i].abscont, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					Response->comments[i].ctime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "strctime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->comments[i].strctime, pTemp1->valuestring);
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TCommentDetailForm::TCommentDetailForm(TApplication* pApp):TWindow(pApp)
{

	this->m_pResponse = NULL;

	m_nCtlIDCount = 0;
	m_nReplyBtnID = 0;
	m_nDeleteBtnID = 0;	
	m_nTitleReplyBtnID = 0; 
	m_nTitleLblID = 0; 


	for(int i=0; i<COMMENTDETAIL_MAXITEM; i++)
	{
		pBmp[i] = NULL;	
	}


	this->m_appCommentDetailType = ReceivedUserCommentDetail;

	Create(APP_KA_ID_CommentDetailForm);
}

TCommentDetailForm::TCommentDetailForm(TApplication* pApp,AppCommentDetailType appCommentDetailType):TWindow(pApp)
{
	this->m_pResponse = NULL;

	m_nCtlIDCount = 0;
	m_nReplyBtnID = 0;
	m_nDeleteBtnID = 0;	
	m_nTitleReplyBtnID = 0; 
	m_nTitleLblID = 0; 

	for(int i=0; i<COMMENTDETAIL_MAXITEM; i++)
	{
		pBmp[i] = NULL;	
	}


	this->m_appCommentDetailType = appCommentDetailType;
	Create(APP_KA_ID_CommentDetailForm);
}


// 析构函数
TCommentDetailForm::~TCommentDetailForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if(this->m_pResponse)
	{
		delete this->m_pResponse;
	}

	for(int i=0; i<COMMENTDETAIL_MAXITEM; i++)
	{
		if( pBmp[i] != NULL)
		{
			pBmp[i]->Destroy();
			pBmp[i] = NULL; 								
		}
	}
}

// 窗口事件处理
Boolean TCommentDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			switch(notifyData.nEditType)
			{
			case ReplyUserCommentEdit:
			case ReplyCommentEdit:
				{		
					Set_Url_Params(KX_ReplyComment, "replycont", (char*)notifyData.PostMsgData.commentdata.pszCommentContent);
					Set_Url_Params(KX_ReplyComment, "fuid", (char*)notifyData.PostMsgData.commentdata.nOuid);	
					Set_Url_Params(KX_ReplyComment, "thread_cid", (char*)notifyData.PostMsgData.commentdata.nId);					

					KaiXinAPICommon_Download(KX_ReplyComment, this->GetWindowHwndId());
					break;
				}			

			default:
				break;

			}

			bHandled = TRUE;
		}
		break;	
		//下载完成消息在给各自form中处理模板
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					if( pBmp[notifyData.nParam] != NULL)
					{
						pBmp[notifyData.nParam]->Destroy();
						pBmp[notifyData.nParam] = NULL; 								
					}
					pBmp[notifyData.nParam] = LoadImgByPath(notifyData.pszFilePath);

					if(pBmp[notifyData.nParam])
					{
						TImage* pTImage;

						pTImage = static_cast< TImage* >(this->GetControlPtr(m_iaTImageID[notifyData.nParam]));
						if(pTImage)
						{
							pTImage->SetBitmap(pBmp[notifyData.nParam]);
							pTImage->Draw();
						}
					}
					break;
				}
			case KX_ReplyComment:
				{
					//Shoud do update data here

					break;
				}
			case KX_DeleteComment:
				{
					//Shoud do update data here
					this->CloseWindow();
					break;
				}				
			}

		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TCommentDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	m_BackBtn = SetAppBackButton(this);
	SetDetailData(this->m_appCommentDetailType);
	_OnCommentDetailControl(pApp);
	SetTitleString(this->m_appCommentDetailType);
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TCommentDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{

	return TRUE;
}


// 控件点击事件处理
Boolean TCommentDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(pEvent->sParam1 == this->m_nReplyBtnID || pEvent->sParam1 == this->m_nTitleReplyBtnID)
	{
		this->GoToReplyInterface(pApp, m_appCommentDetailType);
	}
	if(pEvent->sParam1 == this->m_nDeleteBtnID)
	{
		this->GoToDeleteComment(pApp, m_appCommentDetailType);
	}

	switch(pEvent->sParam1)
	{
	case 0:
		{
			break;
		}
	default:
		break;
	}

	return bHandled;
}

Int32 TCommentDetailForm::_OnCommentDetailControl(TApplication * pApp)
{
	Int32 bnRetCod = 0;	
	TPanel* pTPanel;	
	TRectangle obBtnRec(100,50,150,30);	//初始(left, top, w, h)
	TFont tFont;

	Int32 nShowItemNum = 0;
	Int32 itemHeight = 150;

	m_nTitleReplyBtnID = SetTilteButton(pApp); 
	m_nTitleLblID = SetFormTilte(pApp); 

	//创建TPanel: CommentForm_CommentDetailPanel
	m_obContrl[m_nCtlIDCount] =new TPanel;	
	obBtnRec.SetRect(0, TITLEBAR_H, SCR_W, 370);
	if(m_obContrl[m_nCtlIDCount]->Create(this))
	{		
		m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
		m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
		m_iaTPanelID[0] = m_obContrl[m_nCtlIDCount]->GetId();//Save TPanel ID

		m_obContrl[m_nCtlIDCount]->SetTransparent(TRUE);//设置透明
		m_obContrl[m_nCtlIDCount]->SetFrameWidth(0);//设置边框	
		m_obContrl[m_nCtlIDCount]->SetEnabled(TRUE);
		m_obContrl[m_nCtlIDCount]->Show(TRUE);	
	}
	else
	{
		bnRetCod++;
	}
	m_nCtlIDCount++;


	//创建普通button: 回复
	m_obContrl[m_nCtlIDCount] =new TButton ;
	obBtnRec.SetRect(80,420,50,30);
	if(m_obContrl[m_nCtlIDCount]->Create(this))
	{
		m_obContrl[m_nCtlIDCount]->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Reply),TRUE);
		m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);
		tFont = m_obContrl[m_nCtlIDCount]->GetFont();
		tFont.Create(14, 14);
		m_obContrl[m_nCtlIDCount]->SetFont(tFont);
		// 保存控件ID，以便处理消息
		m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
		m_nReplyBtnID = m_obContrl[m_nCtlIDCount]->GetId();//save reply button ID
		m_obContrl[m_nCtlIDCount]->Show(TRUE);		
	}
	else
	{
		bnRetCod++;
	}
	// 增加生成控件数量
	m_nCtlIDCount++;

	//创建普通button: 删除
	m_obContrl[m_nCtlIDCount] =new TButton ;
	obBtnRec.SetRect(160,420,50,30);
	if(m_obContrl[m_nCtlIDCount]->Create(this))
	{
		m_obContrl[m_nCtlIDCount]->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Delete),TRUE);
		m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);
		tFont = m_obContrl[m_nCtlIDCount]->GetFont();
		tFont.Create(14, 14);
		m_obContrl[m_nCtlIDCount]->SetFont(tFont);
		// 保存控件ID，以便处理消息
		m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
		m_nDeleteBtnID = m_obContrl[m_nCtlIDCount]->GetId();//save delete button ID
		m_obContrl[m_nCtlIDCount]->Show(TRUE);		
	}
	else
	{
		bnRetCod++;
	}
	// 增加生成控件数量
	m_nCtlIDCount++;



	//一下的控件都在TPanel中
	//创建Label 悄悄话		

	pTPanel = static_cast< TPanel* >(this->GetControlPtr(m_iaTPanelID[0]));

	if(pTPanel)
	{	
		CreateDetailItemControl(0,itemHeight, pTPanel, 0);	

		nShowItemNum = (this->m_nCommentDetailItemNum>COMMENTDETAIL_MAXITEM)?(COMMENTDETAIL_MAXITEM-1):(m_nCommentDetailItemNum-1);
		int startItem = (this->m_nCommentDetailItemNum>COMMENTDETAIL_MAXITEM)?(this->m_nCommentDetailItemNum-COMMENTDETAIL_MAXITEM):1;
		//历史留言详情
		int ctrlGroupIndex = 1;
		for(int i=startItem; i< this->m_nCommentDetailItemNum; i++)
		{			
			CreateDetailItemControl(i,itemHeight, pTPanel, ctrlGroupIndex);
			ctrlGroupIndex++;
		}

		pTPanel->Show(TRUE);
	}

	return bnRetCod;

}
void TCommentDetailForm::SetTitleString(AppCommentDetailType appCommentDetailType)
{
	TLabel* tLabel = static_cast< TLabel* >(GetControlPtr(this->m_nTitleLblID));
	if(tLabel)
	{
		switch(appCommentDetailType)
		{
		case ReceivedUserCommentList:
			{
				tLabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_ReceivedUserCommentList),FALSE);
				break;
			}
		case SentUserCommentList:
			{
				tLabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SentUserCommentList),FALSE);
				break;
			}
		case ReceivedCommentList:
			{
				tLabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_ReceivedCommentList),FALSE);
				break;
			}
		case SentCommentList:
			{
				tLabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SentCommentList),FALSE);
				break;
			}
		case FriendCommentList:
			{
				tLabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendsCommentList),FALSE);
				break;
			}
		case ReceivedAnObjectCommentList:
			{
				tLabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_ReceivedAnObjectCommentList),FALSE);
				break;
			}	
		default:
			break;
		}

	}	
}

void TCommentDetailForm::SetDetailData(AppCommentDetailType appCommentDetailType)
{	
	int iRet = eFailed;

	switch(appCommentDetailType)
	{
	case ReceivedUserCommentDetail:
		{
			iRet = KaiXinAPI_JsonParse(KX_UserCommentDetail, (void **)&m_pResponse);
			break;
		}
	case SentUserCommentDetail:
		{
			iRet = KaiXinAPI_JsonParse(KX_SentUserCommentDetail, (void **)&m_pResponse);
			break;
		}
	case ReceivedCommentDetail:
		{
			iRet = KaiXinAPI_JsonParse(KX_CommentDetail, (void **)&m_pResponse);
			break;

		}
	case SentCommentDetail:
		{
			iRet = KaiXinAPI_JsonParse(KX_SentCommentDetail, (void **)&m_pResponse);			
			break;
		}	
	default:
		break;
	}

	if(iRet == eSucceed)
	{
		m_nCommentDetailItemNum = m_pResponse->nSize;
		for(int i = 0; i<m_nCommentDetailItemNum; i++)
		{
			KaiXinAPICommon_DownloadPhoto(m_pResponse->comments[i].flogo, this->GetWindowHwndId(), i );
		}
	}

}
Int32 TCommentDetailForm::CreateDetailItemControl(Int32 itemIndex,Int32 itemHeight, TPanel *pTPanel, int ctrlGroupIndex)
{
	Int32 bnRetCod = 0;	
	TRectangle obBtnRec(100,50,150,30);	//初始(left, top, w, h)
	TFont tFont;

	Int32 nCtrlHeight = (itemIndex == 0)?0:(itemHeight*(ctrlGroupIndex)-20);

	TUChar pszNameString[32];
	TUChar pszDateTimeString[32];
	TUChar pszContentString[1024];
	TUChar pszTemp[32];

	memset(pszNameString, 0, sizeof(pszNameString));
	memset(pszDateTimeString, 0, sizeof(pszDateTimeString));
	memset(pszContentString, 0, sizeof(pszContentString));
	memset(pszTemp, 0, sizeof(pszTemp));


	if(m_pResponse == NULL) return  bnRetCod;


	Int32 Fuid = 0;
	TUChar TUCharFuid[32];
	TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)KaiXinUserInfo.uid);
	Fuid = TUString::StrAToI(TUCharFuid);
	if(m_pResponse->comments[itemIndex].fuid == Fuid)
	{
		TUString::StrCopy(pszNameString, TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else	
	{
		TUString::StrUtf8ToStrUnicode(pszNameString , (const Char *)m_pResponse->comments[itemIndex].fname);
	}

	if(itemIndex==0)
	{
		if(this->m_appCommentDetailType == ReceivedUserCommentDetail||this->m_appCommentDetailType == SentUserCommentDetail)
		{
			//TUString::StrUtf8ToStrUnicode(pszTemp , TResource::LoadConstString(APP_KA_ID_STRING_UserCommentIs));
			TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_UserCommentIs));										
		}
		else if(this->m_appCommentDetailType == FriendCommentDetail)
		{
			TUString::StrUtf8ToStrUnicode(pszTemp ,(const Char *)m_pResponse->title);
			TUString::StrCopy(pszNameString,pszTemp);
			//TUString::StrUtf8ToStrUnicode(pszTemp ,TResource::LoadConstString(APP_KA_ID_STRING_CommentIs));
			TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_CommentIs));						
		}
		else
		{
			TUString::StrUtf8ToStrUnicode(pszTemp ,(const Char *)m_pResponse->title);
			TUString::StrCat(pszNameString,pszTemp);
			//TUString::StrUtf8ToStrUnicode(pszTemp ,TResource::LoadConstString(APP_KA_ID_STRING_CommentIs));
			TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_CommentIs));						
		}
	}
	else
	{
		//TUString::StrUtf8ToStrUnicode(pszTemp , TResource::LoadConstString(APP_KA_ID_STRING_ReplyIs));
		TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_ReplyIs));										
	}




	//ctime
	//TUString::StrIToA(pszDateTimeString , m_pResponse->comments[itemIndex].ctime);

	//content
	TUString::StrUtf8ToStrUnicode( pszContentString , (const Char *)m_pResponse->comments[itemIndex].abscont ); 


	//const TBitmap * pImgBg = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_UserCommentReplyBG);
	//SetBackGroundBitmap(pImgBg,0);

	if(pTPanel)
	{		
		if(itemIndex == 0)//First item
		{

			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(5,5,60,12);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanel))
			{	
				TUChar pszMTypeString[32];

				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				TUString::StrUtf8ToStrUnicode(pszMTypeString , (const Char *)m_pResponse->mtype);					
				if( TUString::StrAToI(pszMTypeString) )//悄悄话//m_pResponse->comments[i].mtype 
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_UserComment_QQH,FALSE);
				}
				else
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_Profile_None_Title,FALSE);
				}
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(11, 11);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(255, 0, 0));
				m_obContrl[m_nCtlIDCount]->SetEnabled(FALSE);
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;


		}

		//创建TImage 头像
		m_obContrl[m_nCtlIDCount] =new TImage;		
		obBtnRec.SetRect(5,35+nCtrlHeight,40,35);
		const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);

		if(m_obContrl[m_nCtlIDCount]->Create(pTPanel))
		{		
			m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
			m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
			m_iaTImageID[itemIndex] = m_obContrl[m_nCtlIDCount]->GetId();//save TImage ID
			if(pBmp[itemIndex])
			{
				((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmap(pBmp[itemIndex]);
			}
			else
			{
				((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmap(pImgNormal);
			}
			//((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmapByResId(APP_KA_ID_BITMAP_Default);
			m_obContrl[m_nCtlIDCount]->SetEnabled(FALSE);
			((TImage*)m_obContrl[m_nCtlIDCount])->SetTransVisible(TRUE);
			m_obContrl[m_nCtlIDCount]->SetFrameWidth(2);
			m_obContrl[m_nCtlIDCount]->Show(TRUE);		
		}
		else
		{
			bnRetCod++;
		}
		m_nCtlIDCount++;

		//创建姓名标签 for comment username
		m_obContrl[m_nCtlIDCount] =new TLabel;		
		obBtnRec.SetRect(65+5,35+nCtrlHeight+8,130,12);
		if(m_obContrl[m_nCtlIDCount]->Create(pTPanel))
		{		
			m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
			m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

			m_obContrl[m_nCtlIDCount]->SetCaption(pszNameString,FALSE);//TResource::LoadConstString()TUSTR_Kx_UserComment_QQH
			//自适应文字大小
			((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
			//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

			tFont = m_obContrl[m_nCtlIDCount]->GetFont();
			tFont.Create(12, 12);
			m_obContrl[m_nCtlIDCount]->SetFont(tFont);

			//设置颜色
			m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 0));
			m_obContrl[m_nCtlIDCount]->SetEnabled(FALSE);
			m_obContrl[m_nCtlIDCount]->Show(TRUE);		
		}
		else
		{
			bnRetCod++;
		}
		m_nCtlIDCount++;

		//创建日期标签 for comment datetime
		m_obContrl[m_nCtlIDCount] =new TLabel;		
		obBtnRec.SetRect(245,35+nCtrlHeight-5,60,12);
		if(m_obContrl[m_nCtlIDCount]->Create(pTPanel))
		{		
			m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
			m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

			//m_obContrl[m_nCtlIDCount]->SetCaption(pszDateTimeString,FALSE);
			TUChar* pszDateTime = NULL;
			cUnixTime_ConvertUnixTimeToFormatString( m_pResponse->comments[itemIndex].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
			m_obContrl[m_nCtlIDCount]->SetCaption(pszDateTime,FALSE);
			if(pszDateTime) 
			{
				delete[] pszDateTime; 
				pszDateTime = NULL;
			}
			//自适应文字大小
			((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
			//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

			tFont = m_obContrl[m_nCtlIDCount]->GetFont();
			tFont.Create(10, 10);
			m_obContrl[m_nCtlIDCount]->SetFont(tFont);

			//设置颜色
			m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 255));
			m_obContrl[m_nCtlIDCount]->Show(TRUE);		
		}
		else
		{
			bnRetCod++;
		}
		m_nCtlIDCount++;


		//创建  TRichView for content
		m_obContrl[m_nCtlIDCount] =new TRichView;	
		if(itemIndex == 0)//First item
		{
			obBtnRec.SetRect(65+5,35+30+nCtrlHeight,245,80);		
		}
		else
		{
			obBtnRec.SetRect(65+5,35+30+nCtrlHeight,245,80); 	
		}		

		if(m_obContrl[m_nCtlIDCount]->Create(pTPanel))
		{		
			m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
			m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
			tFont = m_obContrl[m_nCtlIDCount]->GetFont();
			tFont.Create(12, 12);
			m_obContrl[m_nCtlIDCount]->SetFont(tFont);
			m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(111, 0, 255));
			m_obContrl[m_nCtlIDCount]->SetCaption(pszContentString,FALSE);//TResource::LoadConstString()
			m_obContrl[m_nCtlIDCount]->SetFrameWidth(2);
			m_obContrl[m_nCtlIDCount]->SetEnabled(TRUE);//FALSE

			//((TRichView*)m_obContrl[m_nCtlIDCount])->SetScrollBarMode(CTL_SCL_MODE_VERTICAL);
			((TRichView*)m_obContrl[m_nCtlIDCount])->SetBorderStyle(bsSingle, FALSE);
			m_obContrl[m_nCtlIDCount]->Show(TRUE);	
		}
		else
		{
			bnRetCod++;
		}
		m_nCtlIDCount++;
	}
	return bnRetCod;
}


Int32 TCommentDetailForm::SetTilteButton(TApplication * pApp)
{
	TCtrl *m_TitleButtonContrl;
	TRectangle obBtnRec(0,0,0,0);	//初始(left, top, w, h)
	Int32 m_TitleButtonCtlID = 0;

	//创建图片按钮
	m_TitleButtonContrl =new TButton ;	

	obBtnRec.SetRect(BUTTON_X, BUTTON_Y, BUTTON_W, BUTTON_H);
	if(m_TitleButtonContrl->Create(this))
	{
		m_TitleButtonContrl->SetBounds(&obBtnRec);	
		m_TitleButtonCtlID = m_TitleButtonContrl->GetId();

		m_TitleButtonContrl->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Reply),FALSE);//发布
		m_TitleButtonContrl->Show(TRUE);		
	}

	return m_TitleButtonCtlID;
}


//创建标题标签 for Title
Int32 TCommentDetailForm::SetFormTilte(TApplication * pApp)
{
	TCtrl *m_TitleContrl;
	Int32 m_TitleCtlID = 0;
	TRectangle obBtnRec(0,0,0,0);	

	m_TitleContrl = new TLabel;		
	obBtnRec.SetRect(120,10,220,30);
	if(m_TitleContrl->Create(this))
	{		
		m_TitleContrl->SetBounds(&obBtnRec);	
		m_TitleCtlID = m_TitleContrl->GetId();	

		m_TitleContrl->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_ReceivedUserCommentList),FALSE);
		//自适应文字大小
		((TLabel*)m_TitleContrl)->SetAutoSize(TRUE);
		m_TitleContrl->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_WHITE);
		m_TitleContrl->SetEnabled(FALSE);
		m_TitleContrl->Show(TRUE);		
	}

	return m_TitleCtlID;
}
void TCommentDetailForm::GoToReplyInterface(TApplication * pApp, AppCommentDetailType appCommentDetailType)
{
	PostNotifyMsgDataType in_msgData;
	TUChar pszTUCharFuidString[32];
	Char pszFuidString[32];
	MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

	in_msgData.nCtrlId = 0;
	in_msgData.nHwndId = this->GetWindowHwndId();
	in_msgData.nEditType = ReplyUserCommentEdit;

	TUString::StrIToA(pszTUCharFuidString , m_pResponse->comments[0].fuid);
	TUString::StrUnicodeToStrUtf8( pszFuidString, (const TUChar*)pszTUCharFuidString);

	STRCPY_Ex(in_msgData.PostMsgData.commentdata.nId, (char*)pszFuidString);
	STRCPY_Ex(in_msgData.PostMsgData.commentdata.nOuid, m_pResponse->thread_cid);

	switch(appCommentDetailType)
	{
	case ReceivedUserCommentList:
		{
			in_msgData.nEditType = ReplyUserCommentEdit;
			break;
		}
	case SentUserCommentList:
		{
			in_msgData.nEditType = ReplyUserCommentEdit;
			break;
		}
	case ReceivedCommentList:
		{
			in_msgData.nEditType = ReplyCommentEdit;
			break;
		}
	case SentCommentList:
		{
			in_msgData.nEditType = ReplyCommentEdit;
			break;
		}
	case FriendCommentList:
		{
			in_msgData.nEditType = ReplyCommentEdit;
			break;
		}
	case ReceivedAnObjectCommentList:
		{
			in_msgData.nEditType = ReplyCommentEdit;
			break;
		}		
	default:
		break;
	}

	TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData); 

}
Int32 TCommentDetailForm::GoToDeleteComment(TApplication * pApp, AppCommentDetailType appCommentDetailType)
{
	Int32 result = eFailed;

	TUChar pszTUCharTempString[32];
	Char pszFuidString[32];
	Char pszCtimeString[32];	

	TUString::StrIToA(pszTUCharTempString , m_pResponse->comments[0].fuid);
	TUString::StrUnicodeToStrUtf8( pszFuidString, (const TUChar*)pszTUCharTempString);

	TUString::StrIToA(pszTUCharTempString , m_pResponse->comments[0].ctime);
	TUString::StrUnicodeToStrUtf8( pszCtimeString, (const TUChar*)pszTUCharTempString);

	Set_Url_Params(KX_DeleteComment, "ouid", (char*)pszFuidString); 
	Set_Url_Params(KX_DeleteComment, "thread_cid", (char*)m_pResponse->thread_cid); 				
	Set_Url_Params(KX_DeleteComment, "ctime", (char*)pszCtimeString);

	if(pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_DeleteAsk),TResource::LoadConstString(APP_KA_ID_STRING_Delete),WMB_OKCANCEL) == 0)
	{
		KaiXinAPICommon_Download(KX_DeleteComment, this->GetWindowHwndId());//APP_KA_ID_STRING_Delete
	}

	return result;
}

