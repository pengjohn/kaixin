/*!
* \file	 KaiXinAPI_Comment_Detail.cpp
* \author	 huxx@GoZone
* \date	 2010/11/7
* \brief  解析与UI: 评论详情
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

//单一短消息/评论/留言对话, 所有回复列表,只有一个回复和删除 

#include "KaiXinAPICommon.h"

#define KX_COMMENT_DETAIL_ITEM_SPACE		(5)
#define KX_COMMENT_DETAIL_LINE_SPACE		(4)

#define KX_COMMENT_DETAIL_ITEM_WIDTH	(SCR_W - 20)

#define KX_COMMENT_DETAIL_LOGO_X			(10)
#define KX_COMMENT_DETAIL_LOGO_Y			(10)

#define KX_COMMENT_DETAIL_LOGO_W			(PHOTO_MASK_W)
#define KX_COMMENT_DETAIL_LOGO_H			(PHOTO_MASK_H)

#define KX_COMMENT_DETAIL_FIX_X				(KX_COMMENT_DETAIL_LOGO_X + KX_COMMENT_DETAIL_LOGO_W + KX_COMMENT_DETAIL_ITEM_SPACE)
#define KX_COMMENT_DETAIL_FIX_Y				(KX_COMMENT_DETAIL_LOGO_Y + 20)
#define KX_COMMENT_DETAIL_FIX_W				(10)
#define KX_COMMENT_DETAIL_FIX_H				(15)

#define KX_COMMENT_DETAIL_ITEM_X			(KX_COMMENT_DETAIL_FIX_X + KX_COMMENT_DETAIL_FIX_W - 1)
#define KX_COMMENT_DETAIL_ITEM_Y			(KX_COMMENT_DETAIL_LOGO_Y - 5)
#define KX_COMMENT_DETAIL_ITEM_W			(KX_COMMENT_DETAIL_ITEM_WIDTH - KX_COMMENT_DETAIL_ITEM_X + KX_COMMENT_DETAIL_LOGO_X )
#define KX_COMMENT_DETAIL_ITEM_H			(60)

#define KX_COMMENT_DETAIL_NAME_X			(10)
#define KX_COMMENT_DETAIL_NAME_Y			(10)
#define KX_COMMENT_DETAIL_NAME_W		(SCR_W/6)
#define KX_COMMENT_DETAIL_NAME_H			(FONT_NAME)

#define KX_COMMENT_DETAIL_WHISPER_X			(KX_COMMENT_DETAIL_NAME_X + KX_COMMENT_DETAIL_NAME_W + KX_COMMENT_DETAIL_ITEM_SPACE)
#define KX_COMMENT_DETAIL_WHISPER_Y			(KX_COMMENT_DETAIL_NAME_Y)
#define KX_COMMENT_DETAIL_WHISPER_W			(SCR_W/6)
#define KX_COMMENT_DETAIL_WHISPER_H			(KX_COMMENT_DETAIL_NAME_H)

#define KX_COMMENT_DETAIL_TIME_X			(KX_COMMENT_DETAIL_WHISPER_X + KX_COMMENT_DETAIL_WHISPER_W + KX_COMMENT_DETAIL_ITEM_SPACE)
#define KX_COMMENT_DETAIL_TIME_Y			(KX_COMMENT_DETAIL_WHISPER_Y)
#define KX_COMMENT_DETAIL_TIME_W			(SCR_W/5)
#define KX_COMMENT_DETAIL_TIME_H			(KX_COMMENT_DETAIL_NAME_H)

#define KX_COMMENT_DETAIL_CONTENT_X			(KX_COMMENT_DETAIL_NAME_X)
#define KX_COMMENT_DETAIL_CONTENT_Y			(KX_COMMENT_DETAIL_NAME_Y + KX_COMMENT_DETAIL_NAME_H + KX_COMMENT_DETAIL_LINE_SPACE)
#define KX_COMMENT_DETAIL_CONTENT_W			((SCR_W*2)/3)
#define KX_COMMENT_DETAIL_CONTENT_H			(60)

#define KX_COMMENT_DETAIL_REPLY_X			(KX_COMMENT_DETAIL_ITEM_X)
#define KX_COMMENT_DETAIL_REPLY_Y			(KX_COMMENT_DETAIL_ITEM_Y)
#define KX_COMMENT_DETAIL_REPLY_W			(BUTTON_MIDDLE_W)
#define KX_COMMENT_DETAIL_REPLY_H			(BUTTON_MIDDLE_H)

#define KX_COMMENT_DETAIL_DELETE_X			(KX_COMMENT_DETAIL_REPLY_X+KX_COMMENT_DETAIL_REPLY_W+30)
#define KX_COMMENT_DETAIL_DELETE_Y			(KX_COMMENT_DETAIL_ITEM_Y)
#define KX_COMMENT_DETAIL_DELETE_W			(BUTTON_MIDDLE_W)
#define KX_COMMENT_DETAIL_DELETE_H			(BUTTON_MIDDLE_H)

void* KaiXinAPI_SendAMessage_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseSendAMessage*  Response = new tResponseSendAMessage;
	memset(Response, 0 , sizeof(tResponseSendAMessage));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "mid");
		if(pTemp0)
		{
			if(pTemp0->valuedouble> 0)
				DoubleToChar(pTemp0->valuedouble, Response->mid);
			else
				STRCPY_Ex(Response->mid, pTemp0->valuestring);
		}		
	}
	cJSON_Delete(json);
	return Response;
}

void* KaiXinAPI_DeleteMessage_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseDeleteMessage*  Response = new tResponseDeleteMessage;
	memset(Response, 0 , sizeof(tResponseDeleteMessage));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
	}
	cJSON_Delete(json);
	return Response;
}

void* KaiXinAPI_DeleteComment_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseDeleteComment*  Response = new tResponseDeleteComment;
	memset(Response, 0 , sizeof(tResponseDeleteComment));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
	}
	cJSON_Delete(json);
	return Response;
}

void* KaiXinAPI_ReplyComment_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseReplyComment*  Response = new tResponseReplyComment;
	memset(Response, 0 , sizeof(tResponseReplyComment));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "cid");
		if(pTemp0)
		{
			Response->cid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
	}
	cJSON_Delete(json);
	return Response;
}


// 构造函数
TComment_DetailForm::TComment_DetailForm(TApplication* pApp):TWindow(pApp)
{
	AppType = KX_MESSAGE_TYPE_COMMENT_RECEIVED;
	TAppCommentDetailForm_Init(pApp);
	Create(APP_KA_ID_CommonList_DetailForm);
}

TComment_DetailForm::TComment_DetailForm(TApplication* pApp,KX_MESSAGE_DETAIL_TYPE nType):TWindow(pApp)
{
	AppType = nType;
	TAppCommentDetailForm_Init(pApp);
	Create(APP_KA_ID_CommonList_DetailForm);
}

// 析构函数
TComment_DetailForm::~TComment_DetailForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<KX_COMMENT_NUM_MAX; i++)
	{
		if( pBmp[i] != NULL)
		{
			pBmp[i]->Destroy();
			pBmp[i] = NULL; 								
		}
	}

	if(bNeedRefresh == TRUE)
	{
		//:TODO:Update the List Form
		KaiXinAPICommon_Download(nListHandle, 0);
	}
}

// 窗口事件处理
Boolean TComment_DetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);
			dc.EraseRectangle(&rc, 0);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);
			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}

	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));
			bHandled = TRUE;
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			bHandled = TRUE;
			
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					TBitmap* pDownLoadBitmap = NULL;					
					if( notifyData.nParam >= KX_COMMENT_NUM_MAX )
					{
						break;
					}
					if( pBmp[notifyData.nParam] != NULL )
					{
						pBmp[notifyData.nParam]->Destroy();
						pBmp[notifyData.nParam] = NULL; 								
					}
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

					if(pDownLoadBitmap)
					{
						TMaskButton* pHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(pLogoID[notifyData.nParam]));
						if(pHeadMBtn)
						{
							TRectangle rc;
							pBmp[notifyData.nParam] = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
							pBmp[notifyData.nParam]->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));	

							pHeadMBtn->GetBounds(&rc);
							pHeadMBtn->SetImage(pBmp[notifyData.nParam],(rc.Width()-pBmp[notifyData.nParam]->GetWidth())/2, (rc.Height()-pBmp[notifyData.nParam]->GetHeight())/2);
								
							pHeadMBtn->Draw();
						}
						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 							
					}
				}
				break;
			case KX_SendAMessage:
			case KX_ReplyComment:
				{
					int iRet = eSucceed;
					void* Response = NULL;

					iRet = KaiXinAPI_JsonParse(nReplyHandle, (void **)&Response);
					if(iRet == eSucceed)
					{
						_FormInfo_Update();
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;
			case KX_DeleteMessage:
			case KX_DeleteComment:
				{
					int iRet = eSucceed;
					void* Response = NULL;

					iRet = KaiXinAPI_JsonParse(nDeleteHandle, (void **)&Response);
					if(iRet == eSucceed)
					{
						this->CloseWindow();
						bNeedRefresh = TRUE;
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;

			case KX_MessageDetail:
			case KX_CommentDetail:
			case KX_SentCommentDetail:
			case KX_UserCommentDetail:
			case KX_SentUserCommentDetail:
				{
					Int32 pHandle = this->GetWindowHwndId();
					TAppCommentDetailForm_Init(pApp);
					Create(APP_KA_ID_CommonList_DetailForm);
					this->SetWindowMovieMode(1, 0);
					pApp->CloseWindowByHwndId(pHandle);
				}
				break;

			default:
				break;
			}
			bHandled = TRUE;
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

				int nRet = eSucceed;

				switch(AppType)
				{
				case KX_MESSAGE_TYPE_COMMENT_RECEIVED:
				case KX_MESSAGE_TYPE_COMMENT_SENT:
				case KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED:
				case KX_MESSAGE_TYPE_USER_COMMENT_SENT:
					{
						tResponseCommentDetail* Response = NULL;
						nRet = KaiXinAPI_JsonParse(nDetailHandle, (void **)&Response);
						if(nRet == eSucceed)
						{
							TUChar TFuid[16] = {0};
							char pszFuid[16] = {0};
							if(Response->nSize > 0)
							{
								TUString::StrI64ToA(TFuid,Response->comments[0].fuid);
								TUString::StrUnicodeToStrUtf8((Char *)pszFuid,TFuid);
							}
							Set_Url_Params(KX_ReplyComment, "fuid", pszFuid);
							Set_Url_Params(KX_ReplyComment, "thread_cid", Response->thread_cid);
							Set_Url_Params(KX_ReplyComment, "replycont", notifyData.PostMsgData.commentdata.pszCommentContent);
							KaiXinAPICommon_Download(KX_ReplyComment, this->GetWindowHwndId());
						}

						if( Response )
						{
							delete Response;	
						}
					}
					break;

				case KX_MESSAGE_TYPE_COMMENT_REPASTE:
					break;

				case KX_MESSAGE_TYPE_SMS:
					{
						tResponseMessageDetail* Response = NULL;
						nRet = KaiXinAPI_JsonParse(KX_MessageDetail, (void **)&Response);
						if(nRet == eSucceed)
						{
							Set_Url_Params(KX_SendAMessage, "touid", "");
							Set_Url_Params(KX_SendAMessage, "mid", Response->mid);
							Set_Url_Params(KX_SendAMessage, "msgcont", notifyData.PostMsgData.messagedata.pszMsgContent);
							KaiXinAPICommon_Download(KX_SendAMessage, this->GetWindowHwndId());
						}

						if( Response )
						{
							delete Response;	
						}
					}
					break;

				default:
					break;
				}

			}	
			bHandled = TRUE;

		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;		
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

Boolean TComment_DetailForm::TAppCommentDetailForm_Init(TApplication* pApp)
{
	for(int i=0; i<KX_COMMENT_NUM_MAX; i++)
	{
		pLogo[i] = NULL;
		pLogoID[i] = 0;
		pBmp[i] = NULL;
		Fuids[i] = 0;
		Flags[i] = 0;
	}

	memset(pszFuids, 0, sizeof(char)*KX_COMMENT_NUM_MAX*32);

	nCount = 0;
	pReplyID = 0;
	pDeleteID = 0;
	bNeedRefresh = FALSE;

	switch(AppType)
	{
	case KX_MESSAGE_TYPE_COMMENT_RECEIVED:
		{
			nListHandle = KX_ReceivedCommentsList;
			nDetailHandle = KX_CommentDetail;
			nReplyHandle = KX_ReplyComment;
			nDeleteHandle = KX_DeleteComment;
		}
		break;
	case KX_MESSAGE_TYPE_COMMENT_SENT:
		{
			nListHandle = KX_SentCommentsList;
			nDetailHandle = KX_SentCommentDetail;
			nReplyHandle = KX_ReplyComment;
			nDeleteHandle = KX_DeleteComment;
		}
		break;
	case KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED:
		{
			nListHandle = KX_ReceivedUserCommentsList;
			nDetailHandle = KX_UserCommentDetail;
			nReplyHandle = KX_ReplyComment;
			nDeleteHandle = KX_DeleteComment;
		}
		break;
	case KX_MESSAGE_TYPE_USER_COMMENT_SENT:
		{
			nListHandle = KX_SentUserCommentsList;
			nDetailHandle = KX_SentUserCommentDetail;
			nReplyHandle = KX_ReplyComment;
			nDeleteHandle = KX_DeleteComment;
		}
		break;
	case KX_MESSAGE_TYPE_COMMENT_REPASTE:
		{
			nListHandle = KX_RepasteCommentsList;
			nDetailHandle = KX_CommentDetail;
			nReplyHandle = KX_ReplyComment;
			nDeleteHandle = KX_DeleteComment;
		}
		break;
	case KX_MESSAGE_TYPE_SMS:
		{
			nListHandle = KX_MessagesList;
			nDetailHandle = KX_MessageDetail;
			nReplyHandle = KX_SendAMessage;
			nDeleteHandle = KX_DeleteMessage;
		}
		break;
	default:
		{
			nListHandle = KX_AccessTypeStart;
			nDetailHandle = KX_AccessTypeStart;
			nReplyHandle = KX_AccessTypeStart;
			nDeleteHandle = KX_AccessTypeStart;
		}
		break;

	}

	return TRUE;
}

// 窗口初始化
Boolean TComment_DetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;

	m_BackBtn = SetAppBackButton(this);
	this->SetFocus(m_BackBtn);
	
	switch(AppType)
	{
	case KX_MESSAGE_TYPE_COMMENT_REPASTE:
		SetAppTilte(this,APP_KA_ID_STRING_Repaste);
		break;
	case KX_MESSAGE_TYPE_COMMENT_RECEIVED:
		SetAppTilte(this,APP_KA_ID_STRING_FriendComment);
		break;
	case KX_MESSAGE_TYPE_COMMENT_SENT:
		SetAppTilte(this,APP_KA_ID_STRING_SentCommentList);
		break;
	case KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED:
		SetAppTilte(this,APP_KA_ID_STRING_ReceivedUserCommentList);
		break;
	case KX_MESSAGE_TYPE_USER_COMMENT_SENT:
		SetAppTilte(this,APP_KA_ID_STRING_SentUserCommentList);
		break;
	case KX_MESSAGE_TYPE_SMS:
		SetAppTilte(this,APP_KA_ID_STRING_Message);
		break;
	default:
		break;
	}

	iRet = ShowItems(pApp,AppType);

	return TRUE;
}

Int32 TComment_DetailForm::_FormInfo_Update()
{
	Int32 nRet = eSucceed;
	switch(AppType)
	{
	case KX_MESSAGE_TYPE_COMMENT_RECEIVED:
	case KX_MESSAGE_TYPE_COMMENT_SENT:
	case KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED:
	case KX_MESSAGE_TYPE_USER_COMMENT_SENT:
		{
			tResponseCommentDetail* Response = NULL;
			nRet = KaiXinAPI_JsonParse(nDetailHandle, (void **)&Response);
			if(nRet == eSucceed)
			{
				Set_Url_Params(nDetailHandle, "thread_cid", Response->thread_cid);
				KaiXinAPICommon_Download(nDetailHandle, this->GetWindowHwndId());
			}

			if( Response )
			{
				delete Response;	
			}
		}
		break;

	case KX_MESSAGE_TYPE_COMMENT_REPASTE:
		break;

	case KX_MESSAGE_TYPE_SMS:
		{
			tResponseMessageDetail* Response = NULL;
			nRet = KaiXinAPI_JsonParse(KX_MessageDetail, (void **)&Response);
			if(nRet == eSucceed)
			{
				Set_Url_Params(KX_MessageDetail, "mid", Response->mid);
				KaiXinAPICommon_Download(KX_MessageDetail, this->GetWindowHwndId());
			}

			if( Response )
			{
				delete Response;	
			}
		}
		break;

	default:
		break;
	}
	return nRet;
}

Int32 TComment_DetailForm::ShowItems(TApplication * pApp, KX_MESSAGE_DETAIL_TYPE nType)
{
	Int32 nRet = eSucceed;
	int Index = 0, i = 0;


	for(i=0;i<KX_COMMENT_NUM_MAX;i++)
	{
		Fuids[i] = 0;
		Flags[i] = 0;
	}

	switch(nType)
	{
	case KX_MESSAGE_TYPE_COMMENT_RECEIVED:
	case KX_MESSAGE_TYPE_COMMENT_SENT:
	case KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED:
	case KX_MESSAGE_TYPE_USER_COMMENT_SENT:
		{
			tResponseCommentDetail* Response = NULL;

			nRet = KaiXinAPI_JsonParse(nDetailHandle, (void **)&Response);
			if(nRet == eSucceed)
			{
				Int32 Item_Offset_Y = 0;
				Int32 Flag = -1;
				TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_CommonList_DetailForm_CommonDetail_Panel));
				for(Index=0;Index<Response->nSize; Index++)//Response->n
				{
					Coord Logo_X = KX_COMMENT_DETAIL_LOGO_X;
					Coord Fix_X = KX_COMMENT_DETAIL_FIX_X;
					Coord Item_X = KX_COMMENT_DETAIL_ITEM_X;

					pLogo[Index] =new TMaskButton();
					TCoolBarList* pCoolBar = new TCoolBarList();
					TImage* pFix = new TImage();

					for(i=0;i<KX_COMMENT_NUM_MAX;i++)
					{
						if( Fuids[i] == Response->comments[Index].fuid || Fuids[i] == 0 )
						{
							if(Fuids[i] != 0)
							{
								Flag = Flags[i];
							}
							break;
						}
					}

					if(i < KX_COMMENT_NUM_MAX )
					{
						if(Fuids[i] == 0)
						{
							Fuids[i] = Response->comments[Index].fuid;
							Flags[i] = Flag * (-1);
							Flag = Flags[i];
						}
						else
						{
							Flag = Flags[i];
						}
					}

					//Add Head
					if( Flag == -1 )
					{
						//Adjust the coord;
						Logo_X = KX_COMMENT_DETAIL_ITEM_WIDTH - KX_COMMENT_DETAIL_LOGO_W + KX_COMMENT_DETAIL_LOGO_X;
						Fix_X = KX_COMMENT_DETAIL_LOGO_X + KX_COMMENT_DETAIL_ITEM_W - 1;
						Item_X = KX_COMMENT_DETAIL_LOGO_X;
					}

					if(pLogo[Index]->Create(pPanel))
					{
						pLogoID[Index]=pLogo[Index]->GetId();
						TRectangle Rc_Logo(Logo_X, KX_COMMENT_DETAIL_LOGO_Y + Item_Offset_Y, KX_COMMENT_DETAIL_LOGO_W, KX_COMMENT_DETAIL_LOGO_H);
						pLogo[Index]->SetBounds(&Rc_Logo);
						pLogo[Index]->SetEnabled(FALSE);

						const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
						const TBitmap * pBmpMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_head1);						
						pLogo[Index]->SetImage(pBmp,(Rc_Logo.Width()-pBmp->GetWidth())/2, (Rc_Logo.Height()-pBmp->GetHeight())/2);
						pLogo[Index]->SetBackImage(pBmpMask, 0, 0);
						KaiXinAPICommon_DownloadPhoto(Response->comments[Index].flogo, this->GetWindowHwndId(), Index );
					}

					if(pFix->Create(pPanel))
					{
						TRectangle Rc_Fix(Fix_X, KX_COMMENT_DETAIL_FIX_Y + Item_Offset_Y, KX_COMMENT_DETAIL_FIX_W, KX_COMMENT_DETAIL_FIX_H);
						pFix->SetBounds(&Rc_Fix);
						if( Flag == -1 )
						{
							pFix->SetBitmap(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Comment_Right));
						}
						else
						{
							pFix->SetBitmap(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Comment_Left));
						}
					}

					//Add CoolBarList
					if(pCoolBar->Create(pPanel))
					{
						TBarRowList* 	lpRowList = NULL;
						TBarRow* 		lpRow = NULL;
						TBarListItem* 	lpItem = NULL;
						TBitmap*		lpBitmap = NULL;
						TRectangle 		obBtnRec(Item_X,KX_COMMENT_DETAIL_ITEM_Y + Item_Offset_Y,KX_COMMENT_DETAIL_ITEM_W,KX_COMMENT_DETAIL_ITEM_H);
						TRectangle 		Rc_CoolBarList;
						pCoolBar->SetBounds(&obBtnRec);
						pCoolBar->GetBounds(&Rc_CoolBarList);
						lpRowList = pCoolBar->Rows();
						if (lpRowList)
						{
							lpRowList->BeginUpdate();
							lpRow = lpRowList->AppendRow();							
							lpRowList->EndUpdate(); 
							if(lpRow)
							{
								lpRow->SetEnabled(FALSE);
								lpItem = lpRow->AppendItem();
								if (lpItem)
								{
									TFont objFontType;
									TUChar pszName[32] = {0};
									TUChar pszContent[180] = {0};
									TUChar pszTitle[32+256] = {0};
									TUChar pszTemp[256] = {0};	
									TUChar* pszDateTime = NULL;

									Int32 ItemHeight = 0;
									TRectangle Rc_Temp;

									TRectangle rect;
									lpItem->GetBounds(rect);
									lpItem->SetCaption(NULL);                       
									lpItem->SetIndicatorType(itNone);

									ItemHeight = rect.Y() - Rc_CoolBarList.Y();

									TUString::StrUtf8ToStrUnicode(pszName , (const Char *)Response->comments[Index].fname);
									Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
									TRectangle Rc_Name(KX_COMMENT_DETAIL_NAME_X, KX_COMMENT_DETAIL_NAME_Y, KX_COMMENT_DETAIL_NAME_W, KX_COMMENT_DETAIL_NAME_H);
									pName->SetBounds(&Rc_Name);
									objFontType = pName->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pName->SetFont(objFontType); 
									pName->SetCaption(pszName,FALSE);

									if( strcmp(Response->mtype,"1")== 0 )
									{
										Int32 nWhisperId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
										TLabel* pWhisper = static_cast<TLabel*>(GetControlPtr(nWhisperId));
										TRectangle Rc_Whisper(KX_COMMENT_DETAIL_WHISPER_X, KX_COMMENT_DETAIL_WHISPER_Y, KX_COMMENT_DETAIL_WHISPER_W, KX_COMMENT_DETAIL_WHISPER_H);
										pWhisper->SetBounds(&Rc_Whisper);
										objFontType = pWhisper->GetFont();
										objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
										pWhisper->SetFont(objFontType);
										pWhisper->SetColor(CTL_COLOR_TYPE_FORE, RED); 
										pWhisper->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Comment_Whisper),FALSE);
									}

									cUnixTime_ConvertUnixTimeToFormatString(Response->comments[Index].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
									Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
									TRectangle Rc_Time(KX_COMMENT_DETAIL_TIME_X, KX_COMMENT_DETAIL_TIME_Y, KX_COMMENT_DETAIL_TIME_W, KX_COMMENT_DETAIL_TIME_H);
									pTime->SetBounds(&Rc_Time);
									objFontType = pTime->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pTime->SetFont(objFontType); 
									pTime->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
									pTime->SetCaption(pszDateTime,FALSE);
									if(pszDateTime) 
									{
										delete[] pszDateTime;
										pszDateTime = NULL;
									}

									TUString::StrUtf8ToStrUnicode(pszContent , (const Char *)Response->comments[Index].abscont);
									Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
									TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
									TRectangle Rc_Content(KX_COMMENT_DETAIL_CONTENT_X, KX_COMMENT_DETAIL_CONTENT_Y, KX_COMMENT_DETAIL_CONTENT_W, KX_COMMENT_DETAIL_CONTENT_H);
									pContent->SetBounds(&Rc_Content);
									objFontType = pContent->GetFont();
									objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
									pContent->SetFont(objFontType); 
									pContent->SetCaption(pszContent,FALSE);
									pContent->SetWordWrapAttr(TRUE);
									pContent->SetTransparent(TRUE);
									pContent->SetEnabled(FALSE);
									pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
									pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
									pContent->GetBounds(&Rc_Temp);

									ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_DETAIL_LINE_SPACE;

									lpItem->SetHeight(ItemHeight);							
								}

							}
						}
						pCoolBar->GetBounds(&Rc_CoolBarList);
						Item_Offset_Y = Rc_CoolBarList.Y() + Rc_CoolBarList.Height() + 10;
					}
				}

				//回复按钮
				pReplyID = CtrlAddItemToPanel_Button(this, pPanel, KX_COMMENT_DETAIL_REPLY_X, KX_COMMENT_DETAIL_REPLY_Y + Item_Offset_Y, KX_COMMENT_DETAIL_REPLY_W, KX_COMMENT_DETAIL_REPLY_H, (TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Reply));

				//删除按钮
				if( (nType == KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED) ||
				   (nType ==	KX_MESSAGE_TYPE_COMMENT_RECEIVED) )
				{
					pDeleteID = CtrlAddItemToPanel_Button(this, pPanel, KX_COMMENT_DETAIL_DELETE_X, KX_COMMENT_DETAIL_DELETE_Y + Item_Offset_Y, KX_COMMENT_DETAIL_DELETE_W, KX_COMMENT_DETAIL_DELETE_H, (TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Delete));
				}
			}
			if( Response )
			{
				delete Response;	
			}
		}
		break;

	case KX_MESSAGE_TYPE_COMMENT_REPASTE:
		break;

	case KX_MESSAGE_TYPE_SMS:
		{
			tResponseMessageDetail* Response = NULL;
			nRet = KaiXinAPI_JsonParse(KX_MessageDetail, (void **)&Response);
			if(nRet == eSucceed)
			{
				Int32 Item_Offset_Y = 0;
				Int32 Flag = -1;
				TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_CommonList_DetailForm_CommonDetail_Panel));
				for(Index=0;Index<Response->n; Index++)//Response->n
				{
					Coord Logo_X = KX_COMMENT_DETAIL_LOGO_X;
					Coord Fix_X = KX_COMMENT_DETAIL_FIX_X;
					Coord Item_X = KX_COMMENT_DETAIL_ITEM_X;

					pLogo[Index] =new TMaskButton();
					TCoolBarList* pCoolBar = new TCoolBarList();
					TImage* pFix = new TImage();

					for(i=0;i<KX_COMMENT_NUM_MAX;i++)
					{
						if( strcmp(pszFuids[i],Response->msgs[Index].fuid) == 0 || strcmp(pszFuids[i],"") == 0 )
						{
							if(strcmp(pszFuids[i],"") != 0)
							{
								Flag = Flags[i];
							}
							break;
						}
					}

					if(i < KX_COMMENT_NUM_MAX )
					{
						if(strcmp(pszFuids[i],"") == 0)
						{
							STRCPY_Ex(pszFuids[i],Response->msgs[Index].fuid);
							Flags[i] = Flag * (-1);
							Flag = Flags[i];
						}
						else
						{
							Flag = Flags[i];
						}
					}

					//Add Head
					if( Flag == -1 )
					{
						//Adjust the coord;
						Logo_X = KX_COMMENT_DETAIL_ITEM_WIDTH - KX_COMMENT_DETAIL_LOGO_W + KX_COMMENT_DETAIL_LOGO_X;
						Fix_X = KX_COMMENT_DETAIL_LOGO_X + KX_COMMENT_DETAIL_ITEM_W - 1;
						Item_X = KX_COMMENT_DETAIL_LOGO_X;
					}

					if(pLogo[Index]->Create(pPanel))
					{
						pLogoID[Index]=pLogo[Index]->GetId();
						TRectangle Rc_Logo(Logo_X, KX_COMMENT_DETAIL_LOGO_Y + Item_Offset_Y, KX_COMMENT_DETAIL_LOGO_W, KX_COMMENT_DETAIL_LOGO_H);
						pLogo[Index]->SetBounds(&Rc_Logo);
						pLogo[Index]->SetEnabled(FALSE);
						const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
						const TBitmap * pBmpMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_head1);						
						
						pLogo[Index]->SetImage(pBmp,(Rc_Logo.Width()-pBmp->GetWidth())/2, (Rc_Logo.Height()-pBmp->GetHeight())/2);
						pLogo[Index]->SetBackImage(pBmpMask,0,0);
						KaiXinAPICommon_DownloadPhoto(Response->msgs[Index].flogo50, this->GetWindowHwndId(), Index );
					}

					if(pFix->Create(pPanel))
					{
						TRectangle Rc_Fix(Fix_X, KX_COMMENT_DETAIL_FIX_Y + Item_Offset_Y, KX_COMMENT_DETAIL_FIX_W, KX_COMMENT_DETAIL_FIX_H);
						pFix->SetBounds(&Rc_Fix);
						if( Flag == -1 )
						{
							pFix->SetBitmap(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Comment_Right));
						}
						else
						{
							pFix->SetBitmap(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Comment_Left));
						}
					}

					//Add CoolBarList
					if(pCoolBar->Create(pPanel))
					{
						TBarRowList* 	lpRowList = NULL;
						TBarRow* 		lpRow = NULL;
						TBarListItem* 	lpItem = NULL;
						TBitmap*		lpBitmap = NULL;
						TRectangle 		obBtnRec(Item_X,KX_COMMENT_DETAIL_ITEM_Y + Item_Offset_Y,KX_COMMENT_DETAIL_ITEM_W,KX_COMMENT_DETAIL_ITEM_H);
						TRectangle 		Rc_CoolBarList;
						pCoolBar->SetBounds(&obBtnRec);
						pCoolBar->GetBounds(&Rc_CoolBarList);
						lpRowList = pCoolBar->Rows();
						if (lpRowList)
						{
							lpRowList->BeginUpdate();
							lpRow = lpRowList->AppendRow();							
							lpRowList->EndUpdate(); 
							if(lpRow)
							{
								lpRow->SetEnabled(FALSE);
								lpItem = lpRow->AppendItem();
								if (lpItem)
								{
									TFont objFontType;
									TUChar pszName[32] = {0};
									TUChar pszContent[280*3+1] = {0};
									TUChar pszTitle[32+256] = {0};
									TUChar pszTemp[256] = {0};	
									TUChar* pszDateTime = NULL;

									Int32 ItemHeight = 0;
									TRectangle Rc_Temp;

									TRectangle rect;
									lpItem->GetBounds(rect);
									lpItem->SetCaption(NULL);                       
									lpItem->SetIndicatorType(itNone);

									ItemHeight = rect.Y() - Rc_CoolBarList.Y();

									TUString::StrUtf8ToStrUnicode(pszName , (const Char *)Response->msgs[Index].fname);
									Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
									TRectangle Rc_Name(KX_COMMENT_DETAIL_NAME_X, KX_COMMENT_DETAIL_NAME_Y, KX_COMMENT_DETAIL_NAME_W, KX_COMMENT_DETAIL_NAME_H);
									pName->SetBounds(&Rc_Name);
									objFontType = pName->GetFont();
									objFontType.Create(FONT_NAME, FONT_NAME);
									pName->SetFont(objFontType); 
									pName->SetCaption(pszName,FALSE);

									cUnixTime_ConvertUnixTimeToFormatString(Response->msgs[Index].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
									Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
									TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
									TRectangle Rc_Time(KX_COMMENT_DETAIL_TIME_X, KX_COMMENT_DETAIL_TIME_Y, KX_COMMENT_DETAIL_TIME_W, KX_COMMENT_DETAIL_TIME_H);
									pTime->SetBounds(&Rc_Time);
									objFontType = pTime->GetFont();
									objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
									pTime->SetFont(objFontType); 
									pTime->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
									pTime->SetCaption(pszDateTime,FALSE);
									if(pszDateTime) 
									{
										delete[] pszDateTime;
										pszDateTime = NULL;
									}

									TUString::StrUtf8ToStrUnicode(pszContent , (const Char *)Response->msgs[Index].abscont);
									Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
									TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
									TRectangle Rc_Content(KX_COMMENT_DETAIL_CONTENT_X, KX_COMMENT_DETAIL_CONTENT_Y, KX_COMMENT_DETAIL_CONTENT_W, KX_COMMENT_DETAIL_CONTENT_H);
									pContent->SetBounds(&Rc_Content);
									objFontType = pContent->GetFont();
									objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
									pContent->SetFont(objFontType); 
									pContent->SetCaption(pszContent,FALSE);
									pContent->SetWordWrapAttr(TRUE);
									pContent->SetTransparent(TRUE);
									pContent->SetEnabled(FALSE);
									pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
									pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
									pContent->GetBounds(&Rc_Temp);

									ItemHeight = Rc_Temp.Y() + Rc_Temp.Height() + KX_COMMENT_DETAIL_LINE_SPACE;

									lpItem->SetHeight(ItemHeight);							
								}

							}
						}
						pCoolBar->GetBounds(&Rc_CoolBarList);
						Item_Offset_Y = Rc_CoolBarList.Y() + Rc_CoolBarList.Height() + 10;
					}
				}

				//回复按钮
				pReplyID = CtrlAddItemToPanel_Button(this, pPanel, KX_COMMENT_DETAIL_REPLY_X, KX_COMMENT_DETAIL_REPLY_Y + Item_Offset_Y, KX_COMMENT_DETAIL_REPLY_W, KX_COMMENT_DETAIL_REPLY_H, (TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Reply));
				#if 0
				if(pReply->Create(pPanel))
				{
					TBarRowList* 	lpRowList = NULL;
					TBarRow* 		lpRow = NULL;
					TBarListItem* 	lpItem = NULL;
					TRectangle 		obBtnRec(KX_COMMENT_DETAIL_REPLY_X,KX_COMMENT_DETAIL_REPLY_Y + Item_Offset_Y,KX_COMMENT_DETAIL_REPLY_W,KX_COMMENT_DETAIL_REPLY_H);
					TRectangle 		Rc_CoolBarList;
					pReply->SetBounds(&obBtnRec);
					pReply->GetBounds(&Rc_CoolBarList);
					lpRowList = pReply->Rows();
					if (lpRowList)
					{
						lpRowList->BeginUpdate();
						lpRow = lpRowList->AppendRow();							
						lpRowList->EndUpdate(); 
						if(lpRow)
						{
							lpRow->SetEnabled(TRUE);
							lpItem = lpRow->AppendItem();
							if (lpItem)
							{
								TFont objFontType;
								lpItem->SetCaption(NULL);                       
								lpItem->SetIndicatorType(itNone);
								lpItem->SetEnabled(TRUE);

								Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));

								objFontType = pContent->GetFont();
								objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
								pContent->SetFont(objFontType); 

								Int32 nWidth = GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Reply),objFontType);
								TRectangle Rc_Content((KX_COMMENT_DETAIL_REPLY_W - nWidth)/2, (KX_COMMENT_DETAIL_REPLY_H - FONT_CONTENT_DETAIL)/2, KX_COMMENT_DETAIL_REPLY_W, KX_COMMENT_DETAIL_REPLY_H);
								pContent->SetBounds(&Rc_Content);
								
								pContent->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Reply),FALSE);
								pContent->SetWordWrapAttr(TRUE);
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(FALSE);
								pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pContent->SetMaxVisibleLines(1, TRUE);

								lpItem->SetHeight(KX_COMMENT_DETAIL_REPLY_H);

							}
						}
					}
					pReplyID = pReply->GetId();
				}
				#endif
				//删除按钮
				pDeleteID = CtrlAddItemToPanel_Button(this, pPanel, KX_COMMENT_DETAIL_DELETE_X, KX_COMMENT_DETAIL_DELETE_Y + Item_Offset_Y, KX_COMMENT_DETAIL_DELETE_W, KX_COMMENT_DETAIL_DELETE_H, (TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Delete));
				#if 0
				if(pDelete->Create(pPanel))
				{
					TBarRowList* 	lpRowList = NULL;
					TBarRow* 		lpRow = NULL;
					TBarListItem* 	lpItem = NULL;
					TRectangle 		obBtnRec(KX_COMMENT_DETAIL_DELETE_X,KX_COMMENT_DETAIL_DELETE_Y + Item_Offset_Y,KX_COMMENT_DETAIL_DELETE_W,KX_COMMENT_DETAIL_DELETE_H);
					TRectangle 		Rc_CoolBarList;
					pDelete->SetBounds(&obBtnRec);
					pDelete->GetBounds(&Rc_CoolBarList);
					lpRowList = pDelete->Rows();
					if (lpRowList)
					{
						lpRowList->BeginUpdate();
						lpRow = lpRowList->AppendRow();							
						lpRowList->EndUpdate(); 
						if(lpRow)
						{
							lpRow->SetEnabled(TRUE);
							lpItem = lpRow->AppendItem();
							if (lpItem)
							{
								TFont objFontType;
								lpItem->SetCaption(NULL);                       
								lpItem->SetIndicatorType(itNone);
								lpItem->SetEnabled(TRUE);

								Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));

								objFontType = pContent->GetFont();
								objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
								pContent->SetFont(objFontType); 

								Int32 nWidth = GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Delete),objFontType);
								TRectangle Rc_Content((KX_COMMENT_DETAIL_REPLY_W - nWidth)/2, (KX_COMMENT_DETAIL_REPLY_H - FONT_CONTENT_DETAIL)/2, KX_COMMENT_DETAIL_REPLY_W, KX_COMMENT_DETAIL_REPLY_H);
								pContent->SetBounds(&Rc_Content);
								
								pContent->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Delete),FALSE);
								pContent->SetWordWrapAttr(TRUE);
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(FALSE);
								pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pContent->SetMaxVisibleLines(1, TRUE);

								lpItem->SetHeight(KX_COMMENT_DETAIL_REPLY_H);

							}
						}
					}
					pDeleteID = pDelete->GetId();
				}
				#endif
			}
			if( Response )
			{
				delete Response;	
			}
		}
		break;

	default:
		break;
	}

	return nRet;
}

// 关闭窗口时，保存设置信息
Boolean TComment_DetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TComment_DetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}
	if( pEvent->sParam1 == pReplyID )
	{		
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		switch(AppType)
		{
		case KX_MESSAGE_TYPE_COMMENT_RECEIVED:
		case KX_MESSAGE_TYPE_COMMENT_SENT:
		case KX_MESSAGE_TYPE_COMMENT_REPASTE:
			in_msgData.nEditType = ReplyCommentEdit;
			break;
		case KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED:
		case KX_MESSAGE_TYPE_USER_COMMENT_SENT:
			in_msgData.nEditType = ReplyUserCommentEdit;
			break;
		case KX_MESSAGE_TYPE_SMS:
			//STRCPY_Ex(in_msgData.PostMsgData.messagedata.pszToUid, gFname);			
			in_msgData.nEditType = ReplyMessageEdit;	
			break;
		default:
			in_msgData.nEditType = ReplyCommentEdit;
			break;
		}
		in_msgData.nParam = AppType;
		TAppEditForm *pNewtag = new TAppEditForm( pApp, in_msgData);
		bHandled = TRUE;
	}

	if( pEvent->sParam1 == pDeleteID )
	{
		int nRet = eSucceed;

		switch(AppType)
		{
		case KX_MESSAGE_TYPE_COMMENT_RECEIVED:
		case KX_MESSAGE_TYPE_COMMENT_SENT:
		case KX_MESSAGE_TYPE_USER_COMMENT_RECEIVED:
		case KX_MESSAGE_TYPE_USER_COMMENT_SENT:
			{
				tResponseCommentDetail* Response = NULL;
				nRet = KaiXinAPI_JsonParse(nDetailHandle, (void **)&Response);
				if(nRet == eSucceed)
				{
					TUChar TNum[16] = {0};
					char pszOuid[16] = {0};
					char pszCtime[16] = {0};
					if(Response->nSize>0)
					{
						TUString::StrIToA(TNum,Response->comments[0].fuid);
						TUString::StrUnicodeToStrUtf8((Char *)pszOuid,TNum);

						TUString::StrIToA(TNum,Response->comments[0].ctime);
						TUString::StrUnicodeToStrUtf8((Char *)pszCtime,TNum);
					}
					Set_Url_Params(nDeleteHandle, "thread_cid", Response->thread_cid);
					Set_Url_Params(nDeleteHandle, "ouid", pszOuid);
					Set_Url_Params(nDeleteHandle, "ctime", pszCtime);
					KaiXinAPICommon_Download(nDeleteHandle, this->GetWindowHwndId());
				}

				if( Response )
				{
					delete Response;	
				}
			}
			break;

		case KX_MESSAGE_TYPE_COMMENT_REPASTE:
			break;

		case KX_MESSAGE_TYPE_SMS:
			{
				tResponseMessageDetail* Response = NULL;
				nRet = KaiXinAPI_JsonParse(nDetailHandle, (void **)&Response);
				if(nRet == eSucceed)
				{
					Set_Url_Params(nDeleteHandle, "mid", Response->mid);
					KaiXinAPICommon_Download(nDeleteHandle, this->GetWindowHwndId());
				}

				if( Response )
				{
					delete Response;	
				}
			}
			break;

		default:
			break;
		}

		bHandled = TRUE;
	}

	return bHandled;
}
