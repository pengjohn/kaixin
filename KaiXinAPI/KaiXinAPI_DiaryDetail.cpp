/*!
* \file	 KaiXinApp_DiaryDetail.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 日志详情
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

void* KaiXinAPI_DiaryDetail_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseDiaryDetail*  Response = new tResponseDiaryDetail;
	memset(Response, 0 , sizeof(tResponseDiaryDetail));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "fname");
		if(pTemp0)
		{
			STRCPY_Ex(Response->fname, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "ctime");
		if(pTemp0)
		{
			Response->ctime = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "title");
		if(pTemp0)
		{
			STRCPY_Ex(Response->title, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "content");
		if(pTemp0)
		{
			STRCPY_Ex(Response->content, pTemp0->valuestring);
		}

		pTemp0 = cJSON_GetObjectItem(json, "reflag");
		if(pTemp0)
		{
			Response->reflag= pTemp0->valueint;
		}

		pTemp0 = cJSON_GetObjectItem(json, "cnum");
		if(pTemp0)
		{
			Response->cnum= pTemp0->valueint;
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TDiaryDetailForm::TDiaryDetailForm(TApplication* pApp):TWindow(pApp)
{
	m_pDiaryDetailResponse = NULL;

	m_nEditBtnID = 0;
	m_nDeleteBtnID = 0;

	m_nZanBtnID = APP_KA_ID_DiaryDetailForm_DiaryPraiseMaskButton;//赞
	m_nCommentBtnID = APP_KA_ID_DiaryDetailForm_DiaryCommentMaskButton;
	m_nRepasteBtnID = APP_KA_ID_DiaryDetailForm_DiaryRepasteMaskButton;//转帖
	m_nShareBtnID = 0;//分享

	Create(APP_KA_ID_DiaryDetailForm);
}

// 析构函数
TDiaryDetailForm::~TDiaryDetailForm(void)
{
	if(m_pDiaryDetailResponse)
	{
		delete m_pDiaryDetailResponse;
	}
}

// 窗口事件处理
Boolean TDiaryDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, SCR_H-STATUSBAR_H-BOTTOM_TAB_H, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 	

			pEraseEvent->result = 1;

			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == DiaryEdit)
			{
				TUChar pszTUCharDid[32];
				Char pszDid[64];

				TUString::StrIToA(pszTUCharDid,notifyData.PostMsgData.diarydata.nDid);

				TUString::StrUnicodeToStrUtf8(pszDid, pszTUCharDid);

				Set_Url_Params(KX_PostDiary, "did", (char*)pszDid);		
				Set_Url_Params(KX_PostDiary, "title", (char*)notifyData.PostMsgData.diarydata.pszEditTitle);
				Set_Url_Params(KX_PostDiary, "content", (char*)notifyData.PostMsgData.diarydata.pszEditContent);


				KaiXinAPICommon_Download(KX_PostDiary, this->GetWindowHwndId()); 		
			}
			else if(notifyData.nEditType == NewCommentEdit)
			{
				TUChar pszTUCharHiddenString[32];
				Char pszHiddenString[32];
				TUString::StrIToA(pszTUCharHiddenString , notifyData.PostMsgData.commentdata.nHidden);
				TUString::StrUnicodeToStrUtf8( pszHiddenString, (const TUChar*)pszTUCharHiddenString);

				Set_Url_Params(KX_PostComment, "content", (char*)notifyData.PostMsgData.commentdata.pszCommentContent);
				Set_Url_Params(KX_PostComment, "id", (char*)notifyData.PostMsgData.commentdata.nId);	
				Set_Url_Params(KX_PostComment, "ouid", (char*)notifyData.PostMsgData.commentdata.nOuid);

				Set_Url_Params(KX_PostComment, "type", (char*)notifyData.PostMsgData.commentdata.nType);				
				Set_Url_Params(KX_PostComment, "hidden", (char*)pszHiddenString);

				KaiXinAPICommon_Download(KX_PostComment, this->GetWindowHwndId());				
			}
			bHandled = TRUE;
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PostDiary:
				{
					pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Save),WMB_OK);
					break;
				}
			case KX_PostComment:
				{
					pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);
					break;
				}
			case KX_PostUp:
				{				
					if(KaiXinAPI_JsonParse_bSuccess(KX_PostUp))
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Zan),WMB_OK); 
					}					
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_ZanYet),TResource::LoadConstString(APP_KA_ID_STRING_Zan),WMB_OK);	
					}
					break;
				}	
			case KX_PostRepaste:
				{
					pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_OK);
					break;
				}		
			}

			break;	
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TDiaryDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	iRet = KaiXinAPI_JsonParse(KX_DiaryDetail, (void **)&m_pDiaryDetailResponse);
	m_BackBtn = SetAppBackButton(this);	

	TMaskButton* pPraiseMaskButton = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_DiaryDetailForm_DiaryPraiseMaskButton));
	TMaskButton* pCommentMaskButton = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_DiaryDetailForm_DiaryCommentMaskButton));
	TMaskButton* pRepasteMaskButton = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_DiaryDetailForm_DiaryRepasteMaskButton));

	const TBitmap * pImgMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button98);
	const TBitmap * pImgSelMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button98_over);

	const TBitmap * pPraiseImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_praise_btn);
	const TBitmap * pPraiseImgSel = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_praise_btn_hl);

	const TBitmap * pCommentImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_comment_btn);
	const TBitmap * pCommentImgSel = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_comment_btn_hl);

	const TBitmap * pRepasteImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repaste_btn);
	const TBitmap * pRepasteImgSel = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repaste_btn_hl);

#if 0
	if(pPraiseMaskButton)
	{
		pPraiseMaskButton->SetTransparent(TRUE);
		pPraiseMaskButton->SetMaskImage(pImgMask,pImgSelMask,pImgMask);
		pPraiseMaskButton->SetImage(pPraiseImgNormal,25,8); 
		pPraiseMaskButton->SetSelImage(pPraiseImgSel,25,8);	
		pPraiseMaskButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Zan),50,8);
		pPraiseMaskButton->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	if(pCommentMaskButton)
	{
		pCommentMaskButton->SetTransparent(TRUE);
		pCommentMaskButton->SetMaskImage(pImgMask,pImgSelMask,pImgMask);
		pCommentMaskButton->SetImage(pCommentImgNormal,20,8); 
		pCommentMaskButton->SetSelImage(pCommentImgSel,20,8);	
		pCommentMaskButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendComment),45,8);
		pCommentMaskButton->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	if(pRepasteMaskButton)
	{
		pRepasteMaskButton->SetTransparent(TRUE);
		pRepasteMaskButton->SetMaskImage(pImgMask,pImgSelMask,pImgMask);
		pRepasteMaskButton->SetImage(pRepasteImgNormal,20,8); 
		pRepasteMaskButton->SetSelImage(pRepasteImgSel,20,8);	
		pRepasteMaskButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Repaste),45,8);
		pRepasteMaskButton->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
#endif
	if(iRet)
	{
		bIsSelfDiary = FALSE;
		_SetFormTilte(pApp);	
		_SetDiaryDetailCoolBarList(pApp);		
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TDiaryDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TDiaryDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	char* szId = NULL;
	char* szFuid = NULL;


	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	szId = (char*)malloc(32);
	memset(szId, 0, sizeof(32));
	szFuid = (char*)malloc(32);
	memset(szFuid, 0, sizeof(32));

	Get_Url_Params(KX_DiaryDetail, "did", &szId);
	Get_Url_Params(KX_DiaryDetail, "fuid", &szFuid);

	if(pEvent->sParam1 == this->m_nEditBtnID)
	{	
		Int32 Id = 0;
		TUChar TUCharId[32];
		PostNotifyMsgDataType in_msgData;

		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));		

		TUString::StrUtf8ToStrUnicode(TUCharId,(const Char *)szId);
		Id = TUString::StrAToI(TUCharId);			

		in_msgData.PostMsgData.diarydata.nDid = Id;

		STRCPY_Ex(in_msgData.PostMsgData.diarydata.pszEditTitle,m_pDiaryDetailResponse->title);
		STRCPY_Ex(in_msgData.PostMsgData.diarydata.pszEditContent,m_pDiaryDetailResponse->content);

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = DiaryEdit;

		TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);	
	}
	else if(pEvent->sParam1 == this->m_nDeleteBtnID)
	{
		//没有删除api
	}
	else if(pEvent->sParam1 == this->m_nCommentBtnID)
	{
#if 0
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = NewCommentEdit;

		STRCPY_Ex(in_msgData.PostMsgData.commentdata.nId, (char*)szId);
		STRCPY_Ex(in_msgData.PostMsgData.commentdata.nOuid,(char*)szFuid);	
		STRCPY_Ex(in_msgData.PostMsgData.commentdata.nType,(char*)"2");//2：日记

		TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
#endif
		Set_Url_Params(KX_ReceivedAnObjectComments, "fuid", (char*)szFuid); 
		Set_Url_Params(KX_ReceivedAnObjectComments, "id", (char*)szId); 
		Set_Url_Params(KX_ReceivedAnObjectComments, "type", (char*)"2"); 
		KaiXinAPICommon_Download(KX_ReceivedDiaryComments, this->GetWindowHwndId()); 
	}
	else if(pEvent->sParam1 == this->m_nZanBtnID)
	{				
		Set_Url_Params(KX_PostUp, "id", szId); 		
		Set_Url_Params(KX_PostUp, "touid", szFuid);
		Set_Url_Params(KX_PostUp, "appid", "2");//怎么获得appid呢、、2：日记

		KaiXinAPICommon_Download(KX_PostUp, this->GetWindowHwndId());
	}	
	else if(pEvent->sParam1 == this->m_nRepasteBtnID)
	{	
		Set_Url_Params(KX_PostRepaste, "fuid", szFuid); 	
		Set_Url_Params(KX_PostRepaste, "urpid", szId); 	
		Set_Url_Params(KX_PostRepaste, "reptype", "diary");

		KaiXinAPICommon_Download(KX_PostRepaste, this->GetWindowHwndId());	
	}	
	else if(pEvent->sParam1 == this->m_nShareBtnID)
	{
		//没有分享api
	}

	free(szId);
	free(szFuid);	
	return bHandled;
}

Int32 TDiaryDetailForm::_SetDiaryDetailCoolBarList(TApplication * pApp)
{
	int iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;

	int nItem1Height = 0;//记录第一行高度

	TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_DiaryDetailForm_DiaryDetailPanel));
	pPanel->SetOrigin(0, 0);

	if(m_pDiaryDetailResponse)
	{
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_DiaryDetailForm_DiaryDetailCoolBarList));
		if (pCoolBarList)
		{
			TBarListItem* lpItem = NULL;
			pCoolBarList->SetBounds(RC_LIST_NORMAL);	
			pCoolBarList->GetBounds(&Rc_CoolBarList);

			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();

				//add Item
				if(lpRow)
				{
					//:TODO:Add Subject info
					lpItem = lpRow->AppendItem();
					if(lpItem)
					{
						TFont objFontType;
						TUChar pszTitle[128] = {0};
						TUChar pszFriend[128+3] = {0};
						TUChar pszName[32] = {0};
						TUChar pszrpNum[16] = {0};
						TUChar MsgInfo[16+1] = {0};
						TUChar pszvNum[16+1] = {0};
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;

						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);                       
						lpItem->SetIndicatorType(itNone);
						lpItem->SetEnabled(FALSE);

						TUString::StrUtf8ToStrUnicode(pszTitle, (const Char *)m_pDiaryDetailResponse->title);
						Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pTitle = static_cast<TRichView*>(GetControlPtr(nTitleId));
						TRectangle Rc_Title(10, rect.Y() - Rc_CoolBarList.Y() + 10, SCR_W - 40, 20);
						pTitle->SetBounds(&Rc_Title);
						pTitle->SetWordWrapAttr(TRUE);
						objFontType = pTitle->GetFont();
						objFontType.Create(FONT_TITLE, FONT_TITLE,FONT_STYLE_BOLD);
						pTitle->SetFont(objFontType); 
						pTitle->SetCaption(pszTitle,FALSE);
						pTitle->SetWordWrapAttr(TRUE);
						pTitle->SetTransparent(TRUE);
						pTitle->SetEnabled(FALSE);
						pTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pTitle->SetMaxVisibleLines(pTitle->GetLinesCount(), TRUE);
						pTitle->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + 30;							

						Int32 nDateTimelabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pDateTimelabel = static_cast<TLabel*>(GetControlPtr(nDateTimelabelId));
						TRectangle Rc_DateTimelabel(10, ItemHeight, SCR_W-40, 20);
						pDateTimelabel->SetBounds(&Rc_DateTimelabel);
						objFontType = pDateTimelabel->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pDateTimelabel->SetFont(objFontType); 
						pDateTimelabel->SetColor(CTL_COLOR_TYPE_FORE,GRAY);
						pDateTimelabel->GetBounds(&Rc_Temp);

						TUChar* pszDateTime = NULL;
						cUnixTime_ConvertUnixTimeToFormatString( m_pDiaryDetailResponse->ctime, KX_TIME_FORMAT_YY_MM_DD_HH_MM, &pszDateTime );
						pDateTimelabel->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
						pDateTimelabel->SetCaption(pszDateTime,FALSE);

						if(pszDateTime) 
						{
							delete[] pszDateTime; 
							pszDateTime = NULL;
						}

						if(bIsSelfDiary)//编辑删除按钮
						{
							m_nEditBtnID = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
							TButton* pEditBtn = static_cast<TButton*>(GetControlPtr(m_nEditBtnID));
							TRectangle Rc_EditBtn(180, ItemHeight - 10, 40, 20);
							pEditBtn->SetBounds(&Rc_EditBtn);
							objFontType = pEditBtn->GetFont();
							objFontType.Create(FONT_SMALL_BUTTON_CAPTION, FONT_SMALL_BUTTON_CAPTION);
							pEditBtn->SetFont(objFontType); 
							pEditBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Edit),TRUE);
							pEditBtn->Hide(TRUE);//暂时隐藏掉

							m_nDeleteBtnID = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
							TButton* pDeleteBtn = static_cast<TButton*>(GetControlPtr(m_nDeleteBtnID));
							TRectangle Rc_DeleteBtn(230, ItemHeight - 10, 40, 20);
							pDeleteBtn->SetBounds(&Rc_DeleteBtn);
							objFontType = pDeleteBtn->GetFont();
							objFontType.Create(FONT_SMALL_BUTTON_CAPTION, FONT_SMALL_BUTTON_CAPTION);
							pDeleteBtn->SetFont(objFontType); 
							pDeleteBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Delete),TRUE);						
							pDeleteBtn->Hide(TRUE);//暂时隐藏掉
						}



						ItemHeight = ItemHeight + Rc_Temp.Height()+5;

						lpItem->SetHeight(ItemHeight);
						nItem1Height = ItemHeight;
					}

					//:TODO:Show Content

					lpItem = lpRow->AppendItem();
					if (lpItem)  
					{
						TFont objFontType;
						TUChar pszContent[10000] = {0};
						TUChar pszContentFormat[10000] = {0};
						Int32 ItemHeight = 0;
						TUChar pRChar = 0x0020;
						TUChar* pSrc = NULL;
						TUChar* pDes = NULL;

						TRectangle rect;
						TRectangle Rc_Temp;
						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);                       
						lpItem->SetIndicatorType(itNone);
						lpItem->SetEnabled(FALSE);

						TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)m_pDiaryDetailResponse->content);
						pSrc = pszContent;
						pDes = pszContentFormat;
						while( *pSrc != '\0' )
						{
							if(*pSrc != pRChar || (*pSrc == pRChar && *(pSrc+1) != pRChar))
							{
								*pDes = *pSrc;
								pDes++;
								pSrc++;
								continue;
							}
							else
							{
								*pDes = '\n';
								pDes++;
								while( *pSrc == pRChar )
								{
									pSrc++;
								}							
							}
						}
						*pDes = '\0';

						Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
						TRectangle Rc_Content(10, rect.Y() - Rc_CoolBarList.Y() + 10, SCR_W-40, 200);
						pContent->SetBounds(&Rc_Content);
						pContent->SetWordWrapAttr(TRUE);
						objFontType = pContent->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pContent->SetFont(objFontType); 
						pContent->SetCaption(pszContentFormat,FALSE);
						//pContent->SetCaption(pszContent,FALSE);						
						pContent->SetWordWrapAttr(TRUE);
						pContent->SetTransparent(TRUE);
						pContent->SetEnabled(FALSE);
						pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
						pContent->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + 10;
						if(ItemHeight<372-nItem1Height-10)//372是TPanel高度
						{
							lpItem->SetHeight(372-nItem1Height-10);
						}
						else
						{						
							lpItem->SetHeight(ItemHeight);
						}
					}
				}

				lpRowList->EndUpdate(); 
			}
		}
	}
	return 0;
}

//创建标题标签 for Title
Int32 TDiaryDetailForm::_SetFormTilte(TApplication * pApp)
{
	TUChar pszNameString[32] = {0};
	char* szUid = NULL;
	char* szFuid = NULL;		

	szUid = (char*)malloc(64);
	szFuid = (char*)malloc(64);
	memset(szUid, 0, sizeof(64));
	memset(szFuid, 0, sizeof(64));

	Get_Url_Params(KX_DiaryDetail, "uid", &szUid);			
	Get_Url_Params(KX_DiaryDetail, "fuid", &szFuid);


	if(strcmp(szUid, szFuid)==0)
	{
		TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_Me));
		TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_SDiary));
		bIsSelfDiary = TRUE;
	}
	else
	{
		if(m_pDiaryDetailResponse)
		{
			TUString::StrUtf8ToStrUnicode(pszNameString , (const Char *)m_pDiaryDetailResponse->fname);
			TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_SDiary));
			bIsSelfDiary = FALSE;
		}
	}

	free(szUid);
	free(szFuid);

	return SetAppTilte(this, 0, pszNameString);
}

