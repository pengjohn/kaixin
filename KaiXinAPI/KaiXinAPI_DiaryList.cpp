/*!
* \file	 KaiXinApp_DiaryList.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 用户日志
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

void* KaiXinAPI_DiaryList_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseDiaryList*  Response = new tResponseDiaryList;
	memset(Response, 0 , sizeof(tResponseDiaryList));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->uid, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "n");
		if(pTemp0)
		{
			Response->n = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			Response->total = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "diarylist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_diarylist = nSize1;
			if( nSize1 != 0 )
			{
				Response->diarylist = NULL;
				Response->diarylist = (DiaryList_diarylist*) malloc(sizeof( DiaryList_diarylist ) * nSize1 );
				memset(Response->diarylist, 0 , sizeof(DiaryList_diarylist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "did");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->diarylist[i].did, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->diarylist[i].did, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "title");
				if(pTemp1)
				{
					STRCPY_Ex(Response->diarylist[i].title, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "content");
				if(pTemp1)
				{
					STRCPY_Ex(Response->diarylist[i].content, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					//Response->diarylist[i].ctime = pTemp1->valueint;
					STRCPY_Ex(Response->diarylist[i].ctime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "strctime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->diarylist[i].strctime, pTemp1->valuestring);
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TDiaryListForm::TDiaryListForm(TApplication* pApp):TWindow(pApp)
{
	//Create(APP_KA_ID_KaiXinHomePage);
}

// 析构函数
TDiaryListForm::~TDiaryListForm(void)
{

}

// 窗口事件处理
Boolean TDiaryListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);


			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TDiaryListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TDiaryListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TDiaryListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	switch(pEvent->sParam1)
	{
	case 0:
		{
			break;
		}
	default:
		break;
	}

	return bHandled;
}