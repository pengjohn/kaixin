/*!
* \file	 KaiXinApp_Edit.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 评论的编辑界面，主要处理表情符与图片
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/


#include "KaiXinAPI_Edit.h"

#include  "TDownload.h"
#include "KaiXinAPICommon.h"
#include  "App_KaiXinUnicodeScript_str.h"
#include  "ControlBaseTypes.h"

#define TITLE_H	(FONT_TITLE+12)
#define FOR_H	(FONT_TITLE+12)
#define EMOTION_BUTTON_H	(40)
#define INPUT_H		(SCR_H - STATUSBAR_H - TITLEBAR_H - KEYBOARD_H - EMOTION_BUTTON_H)		//扣除标题栏,输入框,表情按钮后的区域高度

#define EMOTION_COLUMN		(8)
#define EMOTION_W			(SCR_W/EMOTION_COLUMN)

#if(LCD_SIZE == LCD_HVGA )
#define TITLE_FONT_SPACE	(8)
#elif(LCD_SIZE == LCD_WVGA )
#define TITLE_FONT_SPACE	(12)
#endif

//表情结构体
tExpression	KxExpression[] =
{
	//第一页
	{APP_KA_ID_BITMAP_e1_i,":D"},
	{APP_KA_ID_BITMAP_e2_i,":)"},
	{APP_KA_ID_BITMAP_e3_i,":*"},
	{APP_KA_ID_BITMAP_e4_i,"^o^"},
	{APP_KA_ID_BITMAP_e5_i,"*o*"},
	{APP_KA_ID_BITMAP_e6_i,":|"},
	{APP_KA_ID_BITMAP_e7_i,":-|"},
	{APP_KA_ID_BITMAP_e8_i,"-_-"},

	{APP_KA_ID_BITMAP_e9_i,"B-)"},
	{APP_KA_ID_BITMAP_e10_i,"@_@"},
	{APP_KA_ID_BITMAP_e11_i,";)"},
	{APP_KA_ID_BITMAP_e12_i,":P"},
	{APP_KA_ID_BITMAP_e13_i,":-*"},
	{APP_KA_ID_BITMAP_e14_i,":-O"},
	{APP_KA_ID_BITMAP_e15_i,"8-)"},
	{APP_KA_ID_BITMAP_e16_i,"(^_^)~UU~(^_^)"},

	{APP_KA_ID_BITMAP_e17_i,":S"},
	{APP_KA_ID_BITMAP_e18_i,"?o?"},
	{APP_KA_ID_BITMAP_e19_i,"-_-Zz"},
	{APP_KA_ID_BITMAP_e20_i,"88"},
	{APP_KA_ID_BITMAP_e21_i,"T_T"},
	{APP_KA_ID_BITMAP_e22_i,"8o|"},
	{APP_KA_ID_BITMAP_e23_i,"xc=="},
	{APP_KA_ID_BITMAP_e24_i,">_<#"},

	{APP_KA_ID_BITMAP_e25_i,":-x"},
	{APP_KA_ID_BITMAP_e26_i,"@x@"},
	{APP_KA_ID_BITMAP_e27_i,":@"},
	{APP_KA_ID_BITMAP_e28_i,"b(^_^)d"},
	{APP_KA_ID_BITMAP_e29_i,"p(-_-)q"},
	{APP_KA_ID_BITMAP_e30_i,"(^_^)"},
	{APP_KA_ID_BITMAP_e31_i,">_<"},
	{APP_KA_ID_BITMAP_e32_i,">O-"},	

	//第二页
	{APP_KA_ID_BITMAP_e33_i,"(*^o^*)"},
	{APP_KA_ID_BITMAP_e34_i,"orz"},
	{APP_KA_ID_BITMAP_e35_i,"-<-<@"},
	{APP_KA_ID_BITMAP_e36_i,"^v^"},
	{APP_KA_ID_BITMAP_e37_i,"*^_^*"},
	{APP_KA_ID_BITMAP_e38_i,"=^_^="},
	{APP_KA_ID_BITMAP_e39_i,"\\^_^/"},
	{APP_KA_ID_BITMAP_e40_i,"~@^_^@~"},

	{APP_KA_ID_BITMAP_e41_i,"Y(^_^)Y"},
	{APP_KA_ID_BITMAP_e42_i,"(^_^)><(^_^)"},
	{APP_KA_ID_BITMAP_e43_i,"/(*w*)\\"},
	{APP_KA_ID_BITMAP_e44_i,"\\^V^/"},
	{APP_KA_ID_BITMAP_e45_i,":-@"},
	{APP_KA_ID_BITMAP_e46_i,"(T_T)"},
	{APP_KA_ID_BITMAP_e47_i,":oo"},
	{APP_KA_ID_BITMAP_e48_i,":-@"},

	{APP_KA_ID_BITMAP_e49_i,":q"},
	{APP_KA_ID_BITMAP_e50_i,"->_->"},
	{APP_KA_ID_BITMAP_e51_i,">'<||||"},
	{APP_KA_ID_BITMAP_e52_i,"=>_<="},
	{APP_KA_ID_BITMAP_e53_i,":("},
	{APP_KA_ID_BITMAP_e54_i,"-_-b"},
	{APP_KA_ID_BITMAP_e55_i,"*-)"},
	{APP_KA_ID_BITMAP_e56_i,"$_$"},

	{APP_KA_ID_BITMAP_e57_i,"^_^"},
	{APP_KA_ID_BITMAP_e58_i,"@-_-@"},
	{APP_KA_ID_BITMAP_e59_i,"o(^_^)o"},
	{APP_KA_ID_BITMAP_e60_i,"(^w^)"},
	{APP_KA_ID_BITMAP_e61_i,"\\shit/"},
	{APP_KA_ID_BITMAP_e62_i,"~^o^~"},
	{APP_KA_ID_BITMAP_e63_i,"<(^_^)>"},
	{APP_KA_ID_BITMAP_e64_i,"o(*^_^*)o"},

	//第三页
	{APP_KA_ID_BITMAP_e65_i,"(*+_+*)!!"},
	{APP_KA_ID_BITMAP_e66_i,"*(^o^)*"},
	{APP_KA_ID_BITMAP_e67_i,"T_T"},
	{APP_KA_ID_BITMAP_e68_i,"(=^ ^=)"},
	{APP_KA_ID_BITMAP_e69_i,"U^o^U"},
	{APP_KA_ID_BITMAP_e70_i,"\\ghost/"},
	{APP_KA_ID_BITMAP_e71_i,"8:|"},
	{APP_KA_ID_BITMAP_e72_i,"~^o^~=>'"},

	{APP_KA_ID_BITMAP_e73_i,"\\*^o^*/"},
	{APP_KA_ID_BITMAP_e74_i,"O+"},
	{APP_KA_ID_BITMAP_e75_i,"O->"},
	{APP_KA_ID_BITMAP_e76_i,"~~>_<+"},
	{APP_KA_ID_BITMAP_e77_i,"\\BS/"},
	{APP_KA_ID_BITMAP_e78_i,"m(_ _)m"},
	{APP_KA_ID_BITMAP_e79_i,":B"},
	{APP_KA_ID_BITMAP_e80_i,"8^_^"},

	{APP_KA_ID_BITMAP_e81_i,"^_<~"},
	{APP_KA_ID_BITMAP_e82_i,"~_~"},
	{APP_KA_ID_BITMAP_e83_i,"\\VV/"},
	{APP_KA_ID_BITMAP_e84_i,"\\oV"},
	{APP_KA_ID_BITMAP_e85_i,"\\OK/"},
	{APP_KA_ID_BITMAP_e86_i,"\\ZD/"},
	{APP_KA_ID_BITMAP_e87_i,"\\knife/"},
	{APP_KA_ID_BITMAP_e88_i,"\\GZ/"},

	{APP_KA_ID_BITMAP_e89_i,"\\MS/"},
	{APP_KA_ID_BITMAP_e90_i,"\\KL/"},
	{APP_KA_ID_BITMAP_e91_i,"(=..=)"},
	{APP_KA_ID_BITMAP_e92_i,"\\QG/"},
	{APP_KA_ID_BITMAP_e93_i,"\\JX/"},	
};

//状态的表情结构体
tExpression	KxStateExpression[] =
{
	//第一页
	{APP_KA_ID_BITMAP_happy_i,":)"},
	{APP_KA_ID_BITMAP_cry_i,"//cry"},
	{APP_KA_ID_BITMAP_sorrow_i,":("},
	{APP_KA_ID_BITMAP_angry_i,"//angry"},
	{APP_KA_ID_BITMAP_amazed_i,"//amazed"},
	{APP_KA_ID_BITMAP_missyou_i,"//missyou"},
	{APP_KA_ID_BITMAP_tanglement_i,"//tanglement"},
	{APP_KA_ID_BITMAP_heart_i,"//heart"},

	{APP_KA_ID_BITMAP_loving_i,"//loving"},
	{APP_KA_ID_BITMAP_greenMood_i,"//green"},
	{APP_KA_ID_BITMAP_cake_i,"//cake"},
	{APP_KA_ID_BITMAP_sun_i,"//sun"},
	{APP_KA_ID_BITMAP_rainbow_i,"//rainbow"},
	{APP_KA_ID_BITMAP_praise_i,"//praise"},
	{APP_KA_ID_BITMAP_crown_i,"//crown"},
	{APP_KA_ID_BITMAP_snow_i,"//snow"},

	{APP_KA_ID_BITMAP_help_i,"//help"},
	{APP_KA_ID_BITMAP_music_i,"//music"},
	{APP_KA_ID_BITMAP_car_i,"//car"},
	{APP_KA_ID_BITMAP_cheers_i,"//cheers"},
	{APP_KA_ID_BITMAP_paint_i,"//paint"},
	{APP_KA_ID_BITMAP_travel_i,"//travel"},
	{APP_KA_ID_BITMAP_pighead_i,"//pighead"},
	{APP_KA_ID_BITMAP_daze_i,"//daze"},

	{APP_KA_ID_BITMAP_happiness_i,"//happiness"},
	{APP_KA_ID_BITMAP_football_i,"//football"},
	{APP_KA_ID_BITMAP_woundplast_i,"//woundplast"},
	{APP_KA_ID_BITMAP_starflag_i,"//star"},
	{APP_KA_ID_BITMAP_shutup_i,"//shutup"},
	{APP_KA_ID_BITMAP_moon_i,"//moon"},
	{APP_KA_ID_BITMAP_yy_i,"//yy"},
	{APP_KA_ID_BITMAP_diamond_i,"//diamond"},	

	//第二页
	{APP_KA_ID_BITMAP_camera_i,"//camera"},
	{APP_KA_ID_BITMAP_cup_i,"//cup"},
	{APP_KA_ID_BITMAP_thunder_i,"//thunder"},
	{APP_KA_ID_BITMAP_kiss_i,"//kiss"},
	{APP_KA_ID_BITMAP_leer_i,"//leer"},
	{APP_KA_ID_BITMAP_rain_i,"//rain"},
	{APP_KA_ID_BITMAP_watermelon_i,"//watermelon"},
	{APP_KA_ID_BITMAP_ices_i,"//ices"},

	{APP_KA_ID_BITMAP_sleeping_i,"//sleeping"},
	{APP_KA_ID_BITMAP_mushroom_i,"//mushroom"},
	{APP_KA_ID_BITMAP_octopus_i,"//octopus"},	
};

TAppEditForm::TAppEditForm(TApplication * pApp):TWindow(pApp)
{
	m_AppTitleString = NULL;
	m_AppEditTitleString = NULL;

	m_AppPublishBtnCaptionString =	TResource::LoadConstString(APP_KA_ID_STRING_Publish);

	m_nTitleEditMaxChars = EDIT_MAXLEN_TITLE;//标题编辑框最多字符数
	m_nContentEditMaxChars = EDIT_MAXLEN_CONTENT;//正文编辑框最多字符数

	//Save special control ID
	m_nPublishBtnID = 0;//发表按钮
	m_nExpressionBtnID = 0;//表情按钮
	m_nPhotoBtnID = 0;//照片按钮

	m_nLocationBtnID = 0;//位置按钮
	m_nLocationLblID = 0;//位置文字标签

	m_nTitleEditID = 0;//标题或收件人编辑控件
	m_nContentEditID = 0;//内容编辑控件

	m_nExpressionTPanelID = 0;//表情TPanel编辑控件

	_OnSetCtrlsStatus(DiaryEdit);
	_OnSetCtrlsStatus(DiaryEdit);
	_LoadStringResouse(DiaryEdit);
	Create(APP_KA_ID_EditForm);
}

TAppEditForm::TAppEditForm( TApplication *pApp,PostNotifyMsgDataType in_msgData):TWindow(pApp)
{
	bModified = FALSE;

	m_AppTitleString = NULL;
	m_AppEditTitleString = NULL;


	m_AppPublishBtnCaptionString =	TResource::LoadConstString(APP_KA_ID_STRING_Publish);

	m_nTitleEditMaxChars = EDIT_MAXLEN_TITLE;//标题编辑框最多字符数
	m_nContentEditMaxChars = EDIT_MAXLEN_CONTENT;//正文编辑框最多字符数

	//m_nCtlIDCount = 0;

	//Save special control ID
	m_nPublishBtnID = 0;//发表按钮
	m_nExpressionBtnID = 0;//表情按钮
	m_nPhotoBtnID = 0;//照片按钮

	m_nLocationBtnID = 0;//位置按钮
	m_nLocationLblID = 0;//位置文字标签

	m_nTitleEditID = 0;//标题或收件人编辑控件	
	m_nContentEditID = 0;//内容编辑控件

	m_nExpressionTPanelID = 0;//表情TPanel编辑控件


	m_msgData = in_msgData;

	//获得主进程GTID
	SS_GetCurrentGTID(&gtidMain);

	_OnSetCtrlsStatus(in_msgData.nEditType);
	_LoadStringResouse(in_msgData.nEditType);
	_LoadDataResouse(in_msgData.nEditType);
	_OnSetEditMaxChars(in_msgData.nEditType);
	Create(APP_KA_ID_EditForm);

}



Boolean TAppEditForm::EventHandler( TApplication * pApp, EventType *pEvent )
{
	Boolean bHandled = FALSE;
	switch( pEvent->eType )
	{
	case EVENT_WinInit:
		{
			// Do initialization here
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;
	case EVENT_FieldChanged:
		{
			bModified = TRUE;
		}		
	case EVENT_CtrlSelect:
		{
			// 处理控件点击事件或响应事件
			bHandled = _OnCtlSelectEvent( pApp, pEvent );
		}
		break;
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
		}
		break;			
	case EVENT_CtrlKillFocus:
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;			
	case EVENT_WinClose:
		{
			// Do uninitialization here
		}
		break;
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;		
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
			break;
		}

		//下载完成消息
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));


			bHandled = TRUE;
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	}
	return bHandled;

}

Boolean TAppEditForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//Open Input Method
	ImeOpenIme( IME_MODE_STATIC,  IME_CLASS_CHINESE);
	m_BackBtn = SetAppBackButton(this);
	_OnCreateEditInterface(pApp);
	return TRUE;
}
Boolean TAppEditForm::_OnCtlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;

	if((pEvent->sParam1) == m_BackBtn)//退出之前确认内容是否为空RES_SYSTEM_WINDOW_TITLE_BUTTON_ID
	{
		TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
		TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
		if(bModified == TRUE)//(tTitleEdit&&(TUString::StrCompare(tTitleEdit->GetCaption(),TUSTR_Kx_NULL)!=0)||tContentEdit&&(TUString::StrCompare(tContentEdit->GetCaption(),TUSTR_Kx_NULL)!=0))		
		{
			if(pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_AreYouSureToQuit),TResource::LoadConstString(APP_KA_ID_STRING_Back),WMB_OKCANCEL) == 0)
			{
				this->CloseWindow();
				bHandled = TRUE;
			}
			else
			{
				bHandled = TRUE;//不退出
			}
		}
		else
		{
			//不提示直接退出
			this->CloseWindow();
			bHandled = TRUE;			
		}
	}
	else if((pEvent->sParam1) == this->m_nPublishBtnID)
	{
		TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
		TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));
		if(tTitleEdit&&(TUString::StrCompare( TUString::StrTrim((TUChar*)tTitleEdit->GetCaption()),TUSTR_Kx_NULL)==0))
		{
			if(m_msgData.nEditType == NewMessageEdit)
			{
				pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_ReceiverShouldNotBeEmpty),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);
			}
			else
			{
				pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_TitleShouldNotBeEmpty),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);
			}
		}
		else if(tContentEdit&&(TUString::StrCompare( TUString::StrTrim((TUChar*)tContentEdit->GetCaption()),TUSTR_Kx_NULL)==0))
		{
			pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_ContentShouldNotBeEmpty),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);
		}
		else
		{
			this->_OnSetMsgData(this->m_msgData.nEditType);
			this->_OnNotifyToMain();
			this->CloseWindow(); 
		}
		bHandled = TRUE;
	}
	else if((pEvent->sParam1) == this->m_nExpressionBtnID)
	{
	}
	else
	{	
		if(m_msgData.nEditType == StatusUpdateEdit)
		{
			for(int i = 0; i < ARR_SIZE(KxStateExpression); i++)
			{
				if(m_nExpCtrlID[i] == pEvent->sParam1)
				{
					TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

					if(tContentEdit)
					{
						TUChar pExpString[32]={0};					

						TUString::StrUtf8ToStrUnicode(pExpString,(Char*)KxStateExpression[i].sExpString);
						tContentEdit->Insert(pExpString, TUString::StrLen(pExpString));
						bModified = TRUE;
					}

					bHandled = TRUE;
					this->SetFocus(m_nContentEditID);//设置content为focus
					break;
				}
			}
		}
		else
		{		
			for(int i = 0; i < ARR_SIZE(KxExpression); i++)
			{
				if(m_nExpCtrlID[i] == pEvent->sParam1)
				{
					TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

					if(tContentEdit)
					{
						TUChar pExpString[32]={0};					
						TUChar pExpFormatString[64]={0};

						TUString::StrUtf8ToStrUnicode(pExpString,(Char*)KxExpression[i].sExpString);
						TUString::StrPrintF(pExpFormatString, TResource::LoadConstString(APP_KA_ID_STRING_ExpressionFormat),pExpString);
						tContentEdit->Insert(pExpFormatString, TUString::StrLen(pExpFormatString));
						bModified = TRUE;
					}

					bHandled = TRUE;
					this->SetFocus(m_nContentEditID);//设置content为focus
					break;
				}
			}	
		}

	}	
	return bHandled;
}

Boolean TAppEditForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 
	if(CtrlID == this->m_nTitleEditID)
	{	
		TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
		if(tExpressionBtn && tExpressionBtn->IsEnabled())
		{
			tExpressionBtn->SetEnabled(FALSE);
		}		

		TPanel* tExpressionTPanel =static_cast< TPanel* >(GetControlPtr(this->m_nExpressionTPanelID));
		if(tExpressionTPanel && tExpressionTPanel->IsVisible())
		{		
			TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
			if(tExpressionBtn)
			{
				tExpressionBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Expression), FALSE);
			}
			tExpressionTPanel->Hide(TRUE);
			ImeOpenIme( IME_MODE_STATIC,	IME_CLASS_CHINESE);
		}

		bHandled = TRUE;
	}	
	else if(CtrlID == m_nContentEditID)
	{
#if 0	
		TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
		if(tExpressionBtn && tExpressionBtn->IsEnabled()==FALSE)
		{
			tExpressionBtn->SetEnabled(TRUE);
		}

		TPanel* tExpressionTPanel =static_cast< TPanel* >(GetControlPtr(this->m_nExpressionTPanelID));
		if(tExpressionTPanel && tExpressionTPanel->IsVisible())
		{		
			TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
			if(tExpressionBtn)
			{
				tExpressionBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Expression), FALSE);
			}
			tExpressionTPanel->Hide(TRUE);
			ImeOpenIme( IME_MODE_STATIC,	IME_CLASS_CHINESE);
		}
#endif
		bHandled = TRUE;
	}	
	else if((pEvent->sParam1) == this->m_nExpressionBtnID)
	{
		TPanel* tExpressionTPanel =static_cast< TPanel* >(GetControlPtr(this->m_nExpressionTPanelID));
		if(tExpressionTPanel)
		{
			if(tExpressionTPanel->IsVisible())
			{
				TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
				if(tExpressionBtn)
				{
					tExpressionBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Expression), FALSE);
				}
				tExpressionTPanel->Hide(TRUE);
				ImeOpenIme( IME_MODE_STATIC,  IME_CLASS_CHINESE);
				this->SetFocus(m_nContentEditID);//设置content为focus
			}
			else
			{
				TButton* tExpressionBtn =static_cast< TButton* >(GetControlPtr(this->m_nExpressionBtnID));
				if(tExpressionBtn)
				{
					tExpressionBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_KeyPad), FALSE);
				}
				ImeCloseIme();
				tExpressionTPanel->Show(TRUE);
				this->SetFocus(m_nContentEditID);//设置content为focus
			}
			bHandled = TRUE;
		}	

		/*
		TPanel* tExpressionTPanel =static_cast< TPanel* >(GetControlPtr(this->m_nExpressionTPanelID));
		if(tExpressionTPanel)
		{
			if(tExpressionTPanel->IsVisible()==FALSE)
			{
				tExpressionTPanel->Show(TRUE);
			}

			bHandled = TRUE;
		}
		*/
	}
	else
	{	

	}

	return bHandled;	

}

Boolean TAppEditForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 
	
#if 0
	if((CtrlID == this->m_nContentEditID)||(CtrlID == this->m_nTitleEditID))
	{
		//close input method
		ImeCloseIme();
		bHandled = TRUE;
	}
	else if((pEvent->sParam1) == this->m_nExpressionBtnID)
	{
		TPanel* tExpressionTPanel =static_cast< TPanel* >(GetControlPtr(this->m_nExpressionTPanelID));
		if(tExpressionTPanel)
		{
			if(tExpressionTPanel->IsVisible())
			{
				tExpressionTPanel->Hide(TRUE);
			}

			bHandled = TRUE;
		}
	}
#endif

#if 0
		if(m_msgData.nEditType == StatusUpdateEdit)
		{
			for(int i = 0; i < ARR_SIZE(KxStateExpression); i++)
			{
				if(m_nExpCtrlID[i] == pEvent->sParam1)
				{
					bHandled = TRUE;
					this->SetFocus(m_nContentEditID);//设置content为focus
					break;
				}
			}
		}
		else
		{		
			for(int i = 0; i < ARR_SIZE(KxExpression); i++)
			{
				if(m_nExpCtrlID[i] == pEvent->sParam1)
				{
					bHandled = TRUE;
					this->SetFocus(m_nContentEditID);//设置content为focus
					break;
				}
			}	
		}
#endif		
	return bHandled;
}

Int32 TAppEditForm::_OnCreateEditInterface(TApplication * pApp)
{
	Int32 bnRetCod = 0;
	TPanel* pTPanelEditContent = NULL;
	TRectangle obBtnRec(0,0,0,0);	//初始(left, top, w, h)
	TFont tFont;

	//_LoadTextResouse();//字符串数组初始化

	//创建发表按钮
	TButton* pPublishBtn =new TButton ;	

	obBtnRec.SetRect(BUTTON_X, BUTTON_Y, BUTTON_W, BUTTON_H);
	const TBitmap * pNormalBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button53);
	const TBitmap * pOverBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button53_over); 
	if(pPublishBtn->Create(this))
	{
		pPublishBtn->SetBounds(&obBtnRec);	
		m_nPublishBtnID= pPublishBtn->GetId();//Save Publish Button ID.
		pPublishBtn->SetCaption(m_AppPublishBtnCaptionString,TRUE);
		tFont = pPublishBtn->GetFont();
		tFont.Create(FONT_LARGE_BUTTON_CAPTION, FONT_LARGE_BUTTON_CAPTION);
		pPublishBtn->SetFont(tFont);
		pPublishBtn->SetStyles(BTN_STYLES_GRAPGICS);
		pPublishBtn->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_WHITE);
		pPublishBtn->SetColor(CTL_COLOR_TYPE_BACK,RGB_COLOR_WHITE);
		pPublishBtn->SetColor(CTL_COLOR_TYPE_FOCUS_FORE,RGB_COLOR_WHITE);
		pPublishBtn->SetColor(CTL_COLOR_TYPE_FOCUS_BACK,RGB_COLOR_WHITE);
		pPublishBtn->SetImage(pNormalBmp,0);
		pPublishBtn->SetImage(pOverBmp,1);	
		pPublishBtn->Show(TRUE);		
	}
	else
	{
		bnRetCod++;
	}


	//创建标题标签 for Title
	SetAppTilte(this,0,(TUChar*)m_AppTitleString);
#if 0
	TLabel* pTitle =new TLabel;		
	obBtnRec.SetRect(130,9,320,30);
	if(pTitle->Create(this))
	{		
		pTitle->SetBounds(&obBtnRec);	

		pTitle->SetCaption(this->m_AppTitleString,FALSE);
		pTitle->SetEnabled(TRUE);

		//自适应文字大小
		pTitle->SetAutoSize(TRUE);

		tFont = pTitle->GetFont();
		tFont.Create(18, 18);
		pTitle->SetFont(tFont);

		//设置颜色
		//pTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 0));
		pTitle->Show(TRUE);		
	}
	else
	{
		bnRetCod++;
	}
#endif

	//创建TPanel: content Edit TPanel
	obBtnRec.SetRect(0,TITLEBAR_H, SCR_W, INPUT_H);//占了整个界面
	pTPanelEditContent =new TPanel;
	if(pTPanelEditContent->Create(this))
	{	
		Int32 SpaceH = 5;
		Int32 SpaceW = 5;
		Int32 Height = SpaceH;//用来记录控件高度，以便计算下个控件应设置在哪个高度上
		TRectangle TRC;

		pTPanelEditContent->SetBounds(&obBtnRec);
		pTPanelEditContent->SetFrameWidth(0);
		pTPanelEditContent->Show(TRUE);


		if(this->IsTitleEdit)
		{			
			//创建TEdit  : for 标题 或者 收件人
			TEdit* pTitleEdit =new TEdit;	
			obBtnRec.SetRect(SpaceW, Height, SCR_W-SpaceW*2, FONT_TITLE + TITLE_FONT_SPACE);

			if(pTitleEdit->Create(pTPanelEditContent))
			{		
				pTitleEdit->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
				pTitleEdit->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, RGB_COLOR_WHITE);
				pTitleEdit->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_WHITE);

				pTitleEdit->SetBounds(&obBtnRec);	 
				this->m_nTitleEditID = pTitleEdit->GetId(); //save TitleEdit ID

				tFont = pTitleEdit->GetFont();
				tFont.Create(FONT_TITLE, FONT_TITLE);
				pTitleEdit->SetFont(tFont);
				pTitleEdit->SetFrameWidth(1);

				pTitleEdit->SetCaption(m_AppTitleEditCaption,FALSE);
				pTitleEdit->SetTitleFont(tFont);
				// 设置edit可编辑
				Boolean  bRead = pTitleEdit->SetModify(TRUE);			
				pTitleEdit->SetWordWrap(TRUE);
				if( (m_msgData.nEditType == NewMessageEdit) || (m_msgData.nEditType == ReplyMessageEdit) )
					pTitleEdit->SetEnabled(FALSE);
				else
					pTitleEdit->SetEnabled(TRUE);
				pTitleEdit->SetUnderline(TRUE);
				pTitleEdit->SetScrollMode(CTL_SCL_MODE_VERTICAL);

				pTitleEdit->SetMaxChars(m_nTitleEditMaxChars);//最大数
				pTitleEdit->SetTitle(this->m_AppEditTitleString,FALSE);
				pTitleEdit->SetImeClass(0);	
				pTitleEdit->Show(TRUE);

				pTitleEdit->GetBounds(&TRC);				
				Height = Height + TRC.Height()+ SpaceH;

				if(m_msgData.nEditType != NewMessageEdit)
				{				
					this->SetFocus(m_nTitleEditID);//设置title为focus
				}
			}
			else
			{
				bnRetCod++;
			}

			//创建标题标签 for content title
			TLabel* pContentTitleLable =new TLabel;		
			obBtnRec.SetRect(SpaceW, Height, 10, FONT_CONTENT + 14);

			if(pContentTitleLable->Create(pTPanelEditContent))
			{		
				pContentTitleLable->SetBounds(&obBtnRec);		
				pContentTitleLable->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Content),FALSE);
				pContentTitleLable->SetFrameWidth(1);

				//自适应文字大小
				pContentTitleLable->SetAutoSize(TRUE);

				tFont = pContentTitleLable->GetFont();
				tFont.Create(FONT_CONTENT, FONT_CONTENT);
				pContentTitleLable->SetFont(tFont);			
				pContentTitleLable->Show(TRUE);
				pContentTitleLable->GetBounds(&TRC);				
				Height = Height + TRC.Height();//+ SpaceH
			}
			else
			{
				bnRetCod++;
			}

		}


		//创建TEdit  :content
		obBtnRec.SetRect(SpaceW,Height,SCR_W-2*SpaceW, INPUT_H - Height);
		TEdit* pContentEdit =new TEdit;
		if(pContentEdit->Create(pTPanelEditContent))
		{		
			pContentEdit->SetBounds(&obBtnRec);		
			this->m_nContentEditID = pContentEdit->GetId(); 
			
			tFont = pContentEdit->GetFont();
			tFont.Create(FONT_CONTENT, FONT_CONTENT);
			pContentEdit->SetFont(tFont);
			pContentEdit->SetFrameWidth(1);

			pContentEdit->SetCaption(m_AppContentEditCaption,FALSE);
			// 设置edit可编辑
			Boolean  bRead = pContentEdit->SetModify(TRUE);	
			//自适应文字大小
//				pContentEdit->SetAutoSize(FALSE);
			pContentEdit->SetMultiline(TRUE);//设置多行
			pContentEdit->SetWordWrap(TRUE);
			pContentEdit->SetEnabled(TRUE);
			pContentEdit->SetMaxChars(m_nContentEditMaxChars);//最大数
			pContentEdit->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
			pContentEdit->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, RGB_COLOR_WHITE);
			pContentEdit->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_WHITE);	
			
		/*	Coord RowWidth =10;
			TRectangle*   pRc;

			pRc = &obBtnRec;			
			Int32 VisibleLines = 4;		
			if(pRc)
			{
				VisibleLines = (Int32)(pRc->Height())/(Int32)(RowWidth)/2;
				pContentEdit->SetRowSpace(RowWidth,TRUE);
			}
			
			pContentEdit->SetMaxVisibleLines(VisibleLines);//最多能看见几行
			*/
			Coord ContentHeight = obBtnRec.Height();
			Coord ContentLineHeight = pContentEdit->GetLineHeight();
			pContentEdit->SetMaxVisibleLines(ContentHeight/ContentLineHeight );
			pContentEdit->SetUnderline(TRUE);
				
			//怎么设定边框呢
			pContentEdit->SetTitle(NULL,FALSE);
			pContentEdit->SetImeClass(0);		
			pContentEdit->Show(TRUE);

			if(!((m_msgData.nEditType == NewDiaryEdit) || (m_msgData.nEditType == DiaryEdit) ))
			{				
				this->SetFocus(m_nContentEditID);//设置content为focus
			}
		}
		else
		{
			bnRetCod++;
		}		

#if 0		
		
		TPanel* pTPanel = new TPanel;

		if(this->IsTitleEdit)
		{
			obBtnRec.SetRect(SpaceW,Height, SCR_W-2*SpaceW,  SCR_H - STATUSBAR_H - KEYBOARD_H);
		}
		else if(m_msgData.nEditType == NewTagEdit)
		{
			obBtnRec.SetRect(SpaceW,Height, SCR_W-2*SpaceW, SCR_H - STATUSBAR_H);
		}
		else
		{
			obBtnRec.SetRect(SpaceW,Height, SCR_W-2*SpaceW,SCR_H - STATUSBAR_H-216-70-5);//整个TPanel都是TEdit
		}

		if(pTPanel->Create(pTPanelEditContent))
		{
			pTPanel->SetBounds(&obBtnRec);
			pTPanel->SetFrameWidth(0);
			pTPanel->Show(TRUE);
			pTPanel->GetBounds(&TRC);			
			Height = Height + TRC.Height()+ SpaceH; 

			obBtnRec.SetRect(SpaceW,0,TRC.Width()- 2*SpaceW,TRC.Height());

			TEdit* pContentEdit =new TEdit;
			if(pContentEdit->Create(pTPanel))
			{		
				pContentEdit->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
				pContentEdit->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, RGB_COLOR_WHITE);
				pContentEdit->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_WHITE);

				pContentEdit->SetBounds(&obBtnRec);		
				this->m_nContentEditID = pContentEdit->GetId(); 

				tFont = pContentEdit->GetFont();
				tFont.Create(FONT_CONTENT, FONT_CONTENT);
				pContentEdit->SetFont(tFont);
				pContentEdit->SetFrameWidth(3);

				pContentEdit->SetCaption(m_AppContentEditCaption,FALSE);
				// 设置edit可编辑
				Boolean  bRead = pContentEdit->SetModify(TRUE);	
				//自适应文字大小
				pContentEdit->SetAutoSize(FALSE);
				pContentEdit->SetMultiline(TRUE);//设置多行
				pContentEdit->SetWordWrap(TRUE);
				pContentEdit->SetEnabled(TRUE);
				pContentEdit->SetMaxChars(m_nContentEditMaxChars);//最大数

				Coord RowWidth =14;
				TRectangle*   pRc;

				pRc = &obBtnRec;
				Int32 VisibleLines = 4;
				if(pRc)
				{
					VisibleLines = (Int32)(pRc->Height())/(Int32)(RowWidth)/2;
					pContentEdit->SetRowSpace(RowWidth,TRUE);
				}

				pContentEdit->SetMaxVisibleLines(VisibleLines);//最多能看见几行
				pContentEdit->SetUnderline(TRUE);

				//怎么设定边框呢
				pContentEdit->SetTitle(NULL,FALSE);
				pContentEdit->SetImeClass(0);		
				pContentEdit->Show(TRUE);

				if(!((m_msgData.nEditType == NewDiaryEdit) || (m_msgData.nEditType == DiaryEdit) ))
				{				
					this->SetFocus(m_nContentEditID);//设置content为focus
				}
			}
		}
		else
		{
			bnRetCod++;
		}		
#endif
		if(this->IsExpressionBtn)
		{
			//创建表情按钮
			TButton* pExpressionBtn=new TButton ;
			obBtnRec.SetRect(10,SCR_H-STATUSBAR_H - KEYBOARD_H - EMOTION_BUTTON_H, 90, EMOTION_BUTTON_H); 				
			if(pExpressionBtn->Create(this))
			{
				pExpressionBtn->SetBounds(&obBtnRec);	
				this->m_nExpressionBtnID = pExpressionBtn->GetId();//Save Expression Button ID.
				pExpressionBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Expression),TRUE);
				tFont = pExpressionBtn->GetFont();
				tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
				pExpressionBtn->SetFont(tFont);
				pExpressionBtn->SetEnabled(TRUE);
				pExpressionBtn->Show(TRUE);
				//非状态编辑,暂时设成不可视		
				if(m_msgData.nEditType != StatusUpdateEdit)
					pExpressionBtn->Hide(TRUE);

			}
			else
			{
				bnRetCod++;
			}

		}
		else
		{
			bnRetCod++;
		}

		if(this->IsPhotoBtn)
		{
			//创建照片按钮
			TButton* pPhotoBtn=new TButton ;
			if(this->IsExpressionBtn)
			{
				obBtnRec.SetRect(SpaceW + 60 + SpaceW, Height, BUTTON_W, BUTTON_H);
			}
			else
			{
				obBtnRec.SetRect(SpaceW, Height, BUTTON_W, BUTTON_H);
			}				

			if(pPhotoBtn->Create(pTPanelEditContent))
			{
				pPhotoBtn->SetBounds(&obBtnRec);	
				m_nPhotoBtnID = pPhotoBtn->GetId();//Save Photo Button ID.
				pPhotoBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Photo),TRUE);
				tFont = pPhotoBtn->GetFont();
				tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
				pPhotoBtn->SetFont(tFont);
				pPhotoBtn->Hide(TRUE);//暂时设成不可视		
			}
			else
			{
				bnRetCod++;
			}			
		}

		if(this->IsLocationBtn)
		{
			//创建位置按钮
			TButton* pLocationBtn =new TButton ;
			obBtnRec.SetRect(250,Height, BUTTON_W, BUTTON_H); 			

			if(pLocationBtn->Create(pTPanelEditContent))
			{
				pLocationBtn->SetBounds(&obBtnRec);	
				m_nLocationBtnID = pLocationBtn->GetId();//Save location Button ID.
				pLocationBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Location),TRUE);
				tFont = pLocationBtn->GetFont();
				tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
				pLocationBtn->SetFont(tFont);
				pLocationBtn->Hide(TRUE);//暂时设成不可视				
			}
			else
			{
				bnRetCod++;
			}

			//需要再创建一个Image，还有一个位置标签并且设成Hide(TRUE), 当位置标签被点击时，才显示，


		}

		//这里还需要补充悄悄话部分
		if(this->IsWhisperCtl)
		{
#if 0
			//创建悄悄话标签 
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(250-30,200-20,53,35);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				m_obContrl[m_nCtlIDCount]->SetCaption(this->m_AppTitleString,FALSE);//TUSTR_Kx_UserComment_QQH
				m_obContrl[m_nCtlIDCount]->SetEnabled(TRUE);

				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(18, 18);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				//m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 0));
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;
#endif

			//创建悄悄话Checkbox
			TCheckBox* pWhisperCtl =new TCheckBox;		
			obBtnRec.SetRect(SCR_W*2/3, SCR_H-STATUSBAR_H - KEYBOARD_H - EMOTION_BUTTON_H, 90, EMOTION_BUTTON_H); 				

			if(pWhisperCtl->Create(this))
			{		
				pWhisperCtl->SetBounds(&obBtnRec);	
				m_nWhisperCtlID = pWhisperCtl->GetId();//Save Whisper control ID

				tFont = pWhisperCtl->GetFont();
				tFont.Create(FONT_SMALL_BUTTON_CAPTION, FONT_SMALL_BUTTON_CAPTION);
				pWhisperCtl->SetFont(tFont);

				pWhisperCtl->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Whisper),FALSE);
				pWhisperCtl->SetValue(FALSE);
				pWhisperCtl->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
		}
	}
	else
	{
		bnRetCod++;
	}

	//这里还要补充一个TPanel，用于显示当前有多少个表情的
	//pTPanelEditExpression = NULL;
	obBtnRec.SetRect(0, SCR_H - STATUSBAR_H - KEYBOARD_H, SCR_W, KEYBOARD_H);
	TPanel* pTPanelEditExpression =new TPanel;
	if(pTPanelEditExpression->Create(this))
	{
		pTPanelEditExpression->SetBounds(&obBtnRec);
		pTPanelEditExpression->SetTransparent(FALSE);
		pTPanelEditExpression->SetColor(CTL_COLOR_TYPE_BACK, WHITE);
		m_nExpressionTPanelID = pTPanelEditExpression->GetId();//保存表情TPanel ID
		pTPanelEditExpression->SetFrameWidth(0);
		pTPanelEditExpression->Hide(TRUE);//初始应该为不可见

		//增加表情icons image
		if(m_msgData.nEditType == StatusUpdateEdit)
		{
			for(int i = 0; i < ARR_SIZE(KxStateExpression); i++)
			{			
				TMaskButton* pExpImageBtn =new TMaskButton; 	
				obBtnRec.SetRect(EMOTION_W*(i%EMOTION_COLUMN),EMOTION_W*(i/EMOTION_COLUMN),EMOTION_W,EMOTION_W);//暂定每行8个 每个表情Image（40*40）
				if(pExpImageBtn->Create(pTPanelEditExpression))
				{
					this->m_nExpCtrlID[i]= pExpImageBtn->GetId();//save TImage ID
					const TBitmap * pBackBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_smallpictureborder);
					const TBitmap * pBmp = TResource::LoadConstBitmap(KxStateExpression[i].nExpIcon);
					pExpImageBtn->SetBounds(&obBtnRec);
					Int32 width1 = pBmp->GetWidth();
					Int32 height1 = pBmp->GetHeight();
					pExpImageBtn->SetSelImage(pBmp, (40-pBmp->GetWidth())/2, (40-pBmp->GetHeight())/2);
					pExpImageBtn->SetMaskImage(pBmp,pBackBmp,pBmp);
					pExpImageBtn->SetColor(GRAY,GRAY,BLUE,BLUE,PURPLE,PURPLE);
					//pExpImageBtn->SetBounds(&obBtnRec);   
				}
			}
		}
		else
		{
			for(int i = 0; i < ARR_SIZE(KxExpression); i++)
			{			
				TMaskButton* pExpImageBtn =new TMaskButton; 	
				obBtnRec.SetRect(EMOTION_W*(i%EMOTION_COLUMN),EMOTION_W*(i/EMOTION_COLUMN),EMOTION_W,EMOTION_W);//暂定每行8个 每个表情Image（40*40）
				if(pExpImageBtn->Create(pTPanelEditExpression))
				{
					this->m_nExpCtrlID[i]= pExpImageBtn->GetId();//save TImage ID
					const TBitmap * pBackBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_smallpictureborder);
					const TBitmap * pBmp = TResource::LoadConstBitmap(KxExpression[i].nExpIcon);
					pExpImageBtn->SetBounds(&obBtnRec);
					pExpImageBtn->SetImage(pBmp,(40-pBmp->GetWidth())/2, (40-pBmp->GetHeight())/2);
					pExpImageBtn->SetBackImage(pBackBmp,0,0);
					pExpImageBtn->SetColor(GRAY,GRAY,BLUE,BLUE,PURPLE,PURPLE);
					pExpImageBtn->SetBounds(&obBtnRec);   
				}
			}
		}	
	}
	else
	{
		bnRetCod++;
	}

	return bnRetCod;
}

Int32 TAppEditForm::_OnSetCtrlsStatus(AppEditType appEditType)
{
	switch(appEditType)
	{
	case DiaryEdit:
	case NewDiaryEdit:			
		{
			IsExpressionBtn = TRUE;
			IsPhotoBtn = TRUE;
			IsLocationBtn = TRUE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = TRUE;
		}
		break;

	case RecordEdit:
	case NewRecordEdit:			
		{
			IsExpressionBtn = FALSE;
			IsPhotoBtn = TRUE;
			IsLocationBtn = TRUE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = FALSE;				
		}
		break;

	case StatusUpdateEdit:
		{
			IsExpressionBtn = TRUE;
			IsPhotoBtn = FALSE;
			IsLocationBtn = FALSE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = FALSE;					
		}
		break;

	case NewMessageEdit:
		{
			IsExpressionBtn = TRUE;
			IsPhotoBtn = FALSE;
			IsLocationBtn = FALSE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = TRUE;				
		}
		break;		
	case ReplyMessageEdit:
		{
			IsExpressionBtn = TRUE;
			IsPhotoBtn = FALSE;
			IsLocationBtn = FALSE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = FALSE;				
		}
		break;

	case NewCommentEdit:
	case NewUserCommentEdit:
		{
			IsExpressionBtn = TRUE;
			IsPhotoBtn = FALSE;
			IsLocationBtn = FALSE;
			IsWhisperCtl = TRUE;
			IsTitleEdit = FALSE;					
		}
		break;			
	case ReplyUserCommentEdit:
	case ReplyCommentEdit:
		{
			IsExpressionBtn = TRUE;
			IsPhotoBtn = FALSE;
			IsLocationBtn = FALSE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = FALSE;					
		}
		break;

	case NewTagEdit:
		{
			IsExpressionBtn = FALSE;
			IsPhotoBtn = FALSE;
			IsLocationBtn = FALSE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = FALSE;					
		}			
		break;	

	default:
		{
			IsExpressionBtn = TRUE;
			IsPhotoBtn = TRUE;
			IsLocationBtn = TRUE;
			IsWhisperCtl = FALSE;
			IsTitleEdit = FALSE;					
		}			
		break;
	}	

	return 0;

}
void  TAppEditForm::_LoadStringResouse(AppEditType appEditType)
{
	switch(appEditType)
	{
	case DiaryEdit:	
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_WriteDiary);
		m_AppEditTitleString = TResource::LoadConstString(APP_KA_ID_STRING_Title);
		m_AppPublishBtnCaptionString = 	TResource::LoadConstString(APP_KA_ID_STRING_Save);		
		break;
	case RecordEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_WriteRecords);
		m_AppPublishBtnCaptionString = 	TResource::LoadConstString(APP_KA_ID_STRING_Save);		
		break;
	case NewDiaryEdit:	
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_WriteDiary);
		m_AppEditTitleString = TResource::LoadConstString(APP_KA_ID_STRING_Title);		
		break;
	case NewRecordEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_WriteRecords);		
		break;		
	case StatusUpdateEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_UpdateStatus);
		break;
	case NewMessageEdit:	
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_WriteNewMessage);
		m_AppEditTitleString = TResource::LoadConstString(APP_KA_ID_STRING_Receiver);
		break;
	case ReplyMessageEdit:		
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_ReplyMessage);
		m_AppEditTitleString = TResource::LoadConstString(APP_KA_ID_STRING_Receiver);
		break;
	case NewUserCommentEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_NewUserComment);
		break;
	case ReplyUserCommentEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_ReplyUserComment);
		break;
	case NewCommentEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_WriteFriendComment);
		break;
	case ReplyCommentEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_FriendCommentReply);
		break;	
	case NewTagEdit:
		m_AppTitleString = TResource::LoadConstString(APP_KA_ID_STRING_NewTag);
		break;	
	default:
		m_AppTitleString = NULL;
		break;
	}	
}

void  TAppEditForm::_LoadDataResouse(AppEditType appEditType)
{
	memset(m_AppTitleEditCaption, 0, sizeof(m_AppTitleEditCaption));
	memset(m_AppContentEditCaption, 0, sizeof(m_AppContentEditCaption));

	switch(appEditType)
	{
	case NewDiaryEdit:	
	case DiaryEdit:
		TUString::StrUtf8ToStrUnicode(m_AppTitleEditCaption, (const Char*)m_msgData.PostMsgData.diarydata.pszEditTitle);
		TUString::StrUtf8ToStrUnicode(m_AppContentEditCaption, (const Char*)m_msgData.PostMsgData.diarydata.pszEditContent);
		break;
	case NewRecordEdit:
	case RecordEdit:			
		TUString::StrUtf8ToStrUnicode(m_AppContentEditCaption, (const Char*)m_msgData.PostMsgData.recorddata.pszRecordContent);
		break;
	case StatusUpdateEdit:
		TUString::StrUtf8ToStrUnicode(m_AppContentEditCaption, (const Char*)m_msgData.PostMsgData.statusupdatedata.pszStateContent);		
		break;
	case NewMessageEdit:
	case ReplyMessageEdit:			
		TUString::StrUtf8ToStrUnicode(m_AppTitleEditCaption, (const Char*)m_msgData.PostMsgData.messagedata.pszToUid);	
		TUString::StrUtf8ToStrUnicode(m_AppContentEditCaption, (const Char*)m_msgData.PostMsgData.messagedata.pszMsgContent);	
		break;
	case NewUserCommentEdit:
	case ReplyUserCommentEdit:
	case NewCommentEdit:
	case ReplyCommentEdit:
		TUString::StrUtf8ToStrUnicode(m_AppContentEditCaption, (const Char*)m_msgData.PostMsgData.commentdata.pszCommentContent);	
		break;	
	case NewTagEdit:
		TUString::StrUtf8ToStrUnicode(m_AppContentEditCaption, (const Char*)m_msgData.PostMsgData.newTagdata.pszTag);
		break;	
	default:

		break;
	}	
}

Int32  TAppEditForm::_OnSetEditMaxChars(AppEditType appEditType)
{
	switch(appEditType)
	{
	case NewDiaryEdit:	
	case DiaryEdit: 		
		m_nTitleEditMaxChars = sizeof(m_msgData.PostMsgData.diarydata.pszEditTitle)/9;
		m_nContentEditMaxChars = sizeof(m_msgData.PostMsgData.diarydata.pszEditContent)/9;
		break;
	case NewRecordEdit:
	case RecordEdit:
		m_nContentEditMaxChars = sizeof(m_msgData.PostMsgData.recorddata.pszRecordContent)/9;			
		break;
	case StatusUpdateEdit:
		m_nContentEditMaxChars = sizeof(m_msgData.PostMsgData.statusupdatedata.pszStateContent)/9;			
		break;
	case NewMessageEdit:
	case ReplyMessageEdit:			
		m_nTitleEditMaxChars = sizeof(m_msgData.PostMsgData.messagedata.pszToUid)/9;
		m_nContentEditMaxChars = sizeof(m_msgData.PostMsgData.messagedata.pszMsgContent)/9;			
		break;
	case NewUserCommentEdit:
	case ReplyUserCommentEdit:
	case NewCommentEdit:
	case ReplyCommentEdit:
		m_nContentEditMaxChars = sizeof(m_msgData.PostMsgData.commentdata.pszCommentContent)/9;	
		break;	
	case NewTagEdit:
		m_nContentEditMaxChars = sizeof(m_msgData.PostMsgData.newTagdata.pszTag)/9;				
		break;	
	default:

		break;
	}
	return 0;
}


Int32 TAppEditForm::_OnNotifyToMain()
{
	return App_PostMessageEx(&gtidMain, MSG_POST_THREAD_NOTIFY, &m_msgData, sizeof(PostNotifyMsgDataType) ,m_msgData.nHwndId, m_msgData.nCtrlId);
}

Int32 TAppEditForm::_OnSetMsgData(AppEditType appEditType)
{
	switch(appEditType)
	{
	case NewDiaryEdit:	
	case DiaryEdit:				
		{
			TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			if(tTitleEdit&&tContentEdit)
			{
				const TUChar *pCaption = NULL;
				Char pszTitle[EDIT_MAXLEN_TITLE*9 + 1] = {0};
				char* pszCaptionEcode = NULL;

				pCaption = tTitleEdit->GetCaption();//获取标题内容
				TUString::StrUnicodeToStrUtf8(pszTitle, pCaption);

				pszCaptionEcode = urlEncode((char*)pszTitle); 				
				STRCPY_Ex(m_msgData.PostMsgData.diarydata.pszEditTitle, pszCaptionEcode);			
				free(pszCaptionEcode);

				//TUString::StrCopy(m_msgData.PostMsgData.diarydata.pszEditTitle, pCaption);

				Char pszCaption[EDIT_MAXLEN_CONTENT*9 + 1] = {0};
				char* pszCaptionEcode2 = NULL;

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				pszCaptionEcode2 = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.diarydata.pszEditContent, pszCaptionEcode2);			
				free(pszCaptionEcode2);

				//TUString::StrCopy(m_msgData.PostMsgData.diarydata.pszEditContent, pCaption);
			}

		}
		break;

	case NewRecordEdit:
	case RecordEdit:		
		{
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			if(tContentEdit)
			{
				const TUChar *pCaption;
				Char pszCaption[EDIT_MAXLEN_CONTENT*9 + 1] = {0};

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				char* pszCaptionEcode = NULL;
				pszCaptionEcode = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.recorddata.pszRecordContent, pszCaptionEcode);			
				free(pszCaptionEcode);
				//TUString::StrCopy(m_msgData.PostMsgData.recorddata.pszRecordContent, pCaption);
			}				
		}
		break;

	case StatusUpdateEdit:
		{
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			if(tContentEdit)
			{
				const TUChar *pCaption;
				Char pszCaption[EDIT_MAXLEN_CONTENT*9 + 1] = {0};

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				char* pszCaptionEcode = NULL;
				pszCaptionEcode = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.statusupdatedata.pszStateContent, pszCaptionEcode);			
				free(pszCaptionEcode);
				//TUString::StrCopy(m_msgData.PostMsgData.statusupdatedata.pszStateContent, pCaption);
			}					
		}
		break;

	case NewMessageEdit:
	case ReplyMessageEdit:		
		{
			TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			//if(tTitleEdit&&tContentEdit)
			if(tTitleEdit)
			{
				const TUChar *pCaption = NULL;
				Char pszTitle[EDIT_MAXLEN_TITLE*9 + 1] = {0};

				pCaption = tTitleEdit->GetCaption();//获取标题内容
				TUString::StrUnicodeToStrUtf8(pszTitle, pCaption);

				char* pszCaptionEcode = NULL;
				pszCaptionEcode = urlEncode((char*)pszTitle); 				
				STRCPY_Ex(m_msgData.PostMsgData.messagedata.pszToUid, pszCaptionEcode);			
				free(pszCaptionEcode);
				//TUString::StrCopy(m_msgData.PostMsgData.messagedata.pszToUid, pCaption);
			}
			
			if(tContentEdit)
			{
				const TUChar *pCaption = NULL;

				Char pszCaption[EDIT_MAXLEN_CONTENT*9 + 1] = {0};
				char* pszCaptionEcode2 = NULL;

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				pszCaptionEcode2 = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.messagedata.pszMsgContent, pszCaptionEcode2);			
				free(pszCaptionEcode2);
				//TUString::StrCopy(m_msgData.PostMsgData.messagedata.pszMsgContent, pCaption);
			}				
		}
		break;

	case NewCommentEdit:
	case NewUserCommentEdit:
		{
			TCheckBox* tWhisperCheckBox =static_cast< TCheckBox* >(GetControlPtr(this->m_nWhisperCtlID));
			if(tWhisperCheckBox->GetValue())
			{
				m_msgData.PostMsgData.commentdata.nHidden = 1;//1：悄悄话 0：公开
			}

			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			if(tContentEdit)
			{
				const TUChar *pCaption;
				Char pszCaption[EDIT_MAXLEN_CONTENT*9 + 1] = {0};

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				char* pszCaptionEcode = NULL;
				pszCaptionEcode = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.commentdata.pszCommentContent, pszCaptionEcode);			
				free(pszCaptionEcode);
				//TUString::StrCopy(m_msgData.PostMsgData.commentdata.pszCommentContent, pCaption);
			}				
		}
		break;			
	case ReplyUserCommentEdit:
	case ReplyCommentEdit:
		{
			//IsWhisperCtl = FALSE;		
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			if(tContentEdit)
			{
				const TUChar *pCaption;
				Char pszCaption[EDIT_MAXLEN_CONTENT*9 +1] = {0};

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				char* pszCaptionEcode = NULL;
				pszCaptionEcode = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.commentdata.pszCommentContent, pszCaptionEcode);			
				free(pszCaptionEcode);
				//TUString::StrCopy(m_msgData.PostMsgData.commentdata.pszCommentContent, pCaption);
			}				
		}
		break;

	case NewTagEdit:
		{
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			if(tContentEdit)
			{
				const TUChar *pCaption;
				Char pszCaption[EDIT_MAXLEN_CONTENT*9 + 1] = {0};

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				char* pszCaptionEcode = NULL;
				pszCaptionEcode = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.newTagdata.pszTag, pszCaptionEcode);			
				free(pszCaptionEcode);
				//TUString::StrCopy(m_msgData.PostMsgData.newTagdata.pszTag, pCaption);
			}					
		}			
		break;	

	default:
		{
			//默认日记
			TEdit* tTitleEdit =static_cast< TEdit* >(GetControlPtr(this->m_nTitleEditID));
			TEdit* tContentEdit =static_cast< TEdit* >(GetControlPtr(this->m_nContentEditID));

			if(tTitleEdit&&tContentEdit)
			{
				const TUChar *pCaption;
				Char pszTitle[EDIT_MAXLEN_TITLE*9 + 1] = {0};

				pCaption = tTitleEdit->GetCaption();//获取标题内容
				TUString::StrUnicodeToStrUtf8(pszTitle, pCaption);

				char* pszCaptionEcode = NULL;
				pszCaptionEcode = urlEncode((char*)pszTitle); 				
				STRCPY_Ex(m_msgData.PostMsgData.diarydata.pszEditTitle, pszCaptionEcode);			
				free(pszCaptionEcode);

				//TUString::StrCopy(m_msgData.PostMsgData.diarydata.pszEditTitle, pCaption);

				Char pszCaption[EDIT_MAXLEN_CONTENT*9 + 1] = {0};
				char* pszCaptionEcode2 = NULL;

				pCaption = tContentEdit->GetCaption();//获取正文内容
				TUString::StrUnicodeToStrUtf8(pszCaption, pCaption);

				pszCaptionEcode2 = urlEncode((char*)pszCaption); 				
				STRCPY_Ex(m_msgData.PostMsgData.diarydata.pszEditContent, pszCaptionEcode2);			
				free(pszCaptionEcode2);

				//TUString::StrCopy(m_msgData.PostMsgData.diarydata.pszEditContent, pCaption);
			}					
		}			
		break;
	}	

	return 0;

}	

