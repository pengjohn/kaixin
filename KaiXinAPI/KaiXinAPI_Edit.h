// Application application header file.

// Original file name: App_KaiXinAPI.h
// Generated by TOPS Builder:Project wizard,Date:2010-8-24


#ifndef  __KaiXinAPI_Edit_H__
#define  __KaiXinAPI_Edit_H__
#include "TG3.h"
#include "KaiXinAPI_StatusFaceList.h"

#define Unlimited 1024 //For UEString(Unlimited)	
#define EDIT_MAXLEN_TITLE    	(128)
#define EDIT_MAXLEN_CONTENT    (256)	//1024
#define EDIT_MAXLEN_STATUS    (160)	//1024
#define EDIT_MAXLEN_RECORD    (256)		//280
//Char数组的大小需要x9, 因为需要做UrlEncode

//表情图片字串信息,保存用于表情编辑
typedef struct
{
	Int32 nExpIcon;//表情图片ID
	char sExpString[32];//表情对应的字串	
}tExpression;


typedef enum
{
	NewDiaryEdit,	//新增日志
	NewRecordEdit,	//新增记录

	DiaryEdit,		//编辑日志
	RecordEdit,		//编辑记录
	StatusUpdateEdit,//状态编辑

	NewMessageEdit,	//新消息
	ReplyMessageEdit,	//回复消息

	NewUserCommentEdit,	//留言
	ReplyUserCommentEdit,	//留言回复

	NewCommentEdit,		//评论
	ReplyCommentEdit,		//评论回复

	NewTagEdit,				//投票标签

	AppEditTypeEnd,	
}AppEditType;

struct DiaryNotifyMsgDataType
{
	Int32		nDid;			//记录日记ID,新日记则为空
	char      	pszEditTitle[EDIT_MAXLEN_TITLE*9 + 1]; //保存编辑标题 UEString(128)    
	char	    pszEditContent[EDIT_MAXLEN_CONTENT*9 + 1]; //保存编辑内容 UEString(Unlimited)	
	char      	pszLocation[128];		//地点
	char        pszLat[16];				//纬度
	char		pszLon[16];				//经度
};

struct RecordNotifyMsgDataType
{
	Int32		nPrivacy;		//0：任何人可见 1：仅好友可见 2：隐藏
	char      pszRecordContent[EDIT_MAXLEN_RECORD*9 + 1]; //保存编辑内容 UEString(280)	
	char      pszLocation[128];		//地点
	char      pszLat[16];				//纬度
	char	  pszLon[16];				//经度
};

struct StatusUpdateNotifyMsgDataType //如果是更新状态 则直接取PostNotifyMsgDataType 内容即可
{
	char      pszStateContent[EDIT_MAXLEN_STATUS*9 + 1]; //保存编辑状态内容 UEString(1024)	
};

struct MessageNotifyMsgDataType
{
	Int32		nMid;			//消息主贴ID,新消息则为空
	char      pszToUid[EDIT_MAXLEN_TITLE*9 + 1]; //保存编辑标题 UEString(Unlimited)    
	char      pszMsgContent[EDIT_MAXLEN_CONTENT*9 + 1]; //保存编辑内容 UEString(Unlimited)	
};

struct CommentNotifyMsgDataType
{	
	char		nType[32];			//评论的对象所属类型，留言类型为0
	char		nId[32];			//留言的对象编号为用户ID
	char		nOuid[32];			//评论：为被评论对象的用户ID；留言：ouid 等与id
	Int32		nHidden;			// 1：悄悄话 0：公开

	char      pszCommentContent[EDIT_MAXLEN_CONTENT*9 + 1]; //保存编辑内容 UEString(Unlimited)	
};


struct NewLabelNotifyMsgDataType
{	
	char	nUrpid[16+1];			//转贴ID,从转贴详细接口的surpid 字段获取
	Int32		nSuid;			//转贴用户ID,从转贴详细接口的suid 字段获取s
	Int32		nTagid;			//标签ID,从转贴详细接口的taglist[id]字段获取
	Int32		nRepflag;			//是否转贴 1：发表标签成功后转贴 0：不转贴

	char      pszTag[32*9 + 1]; //新标签内容 发表新标签时需要传入此参数UEString(128)		
};

struct PostNotifyMsgDataType
{
	AppEditType       nEditType;	//编辑类型,对应AppEditType
	Int32		nHwndId;		//主程序的窗口ID
	Int32		nCtrlId;			// 主程序的控件ID //没有用到
	Int32		nParam;			//参数//预留
	void* 		pThisHandle;	//保存应用new IDownLoad的类指针,用于返给给应用delete

	//TUChar      pszContent[4096]; //保存编辑内容 UEString(Unlimited)	//内容大小将具体的编辑框里面设定
	union
	{
		DiaryNotifyMsgDataType			diarydata;
		RecordNotifyMsgDataType 		recorddata;
		StatusUpdateNotifyMsgDataType	statusupdatedata;
		MessageNotifyMsgDataType 		messagedata;
		CommentNotifyMsgDataType 		commentdata;
		NewLabelNotifyMsgDataType		newTagdata;
	}PostMsgData;
};

class TAppEditForm : public TWindow
{
public:
	TAppEditForm( TApplication *pApp );
	TAppEditForm( TApplication *pApp, PostNotifyMsgDataType in_msgData);	
	virtual Boolean EventHandler( TApplication * pApp, EventType * pEvent );
private:
	// define private method here
	Boolean _OnWinInitEvent(TApplication * pApp, EventType * pEvent);
	Boolean _OnCtlSelectEvent(TApplication * pApp, EventType * pEvent);
	Boolean _OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent);
	Boolean _OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent);	
	Int32 _OnSetCtrlsStatus(AppEditType appEditType);
	void  _LoadStringResouse(AppEditType appEditType);
	void  _LoadDataResouse(AppEditType appEditType);	
	Int32 _OnSetEditMaxChars(AppEditType appEditType);	
	Int32 _OnCreateEditInterface(TApplication * pApp);
	Int32 _OnSetMsgData(AppEditType appEditType);	
	Int32 _OnNotifyToMain();

private:
	// define private data member here
	tResponseStatusFaceList* m_pResponse;

	Boolean bModified;

	const TUChar* m_AppTitleString;
	const TUChar* m_AppEditTitleString;
	const TUChar* m_AppPublishBtnCaptionString;

	TUChar m_AppTitleEditCaption[EDIT_MAXLEN_TITLE+1];
	TUChar m_AppContentEditCaption[EDIT_MAXLEN_CONTENT+1];

	Int32 m_nTitleEditMaxChars;//标题编辑框最多字符数
	Int32 m_nContentEditMaxChars;//正文编辑框最多字符数

	//Save special control ID
	Int32 m_nPublishBtnID;//发表按钮
	Int32 m_nExpressionBtnID;//表情按钮
	Int32 m_nPhotoBtnID;//照片按钮
	Int32 m_nWhisperCtlID;//照片按钮


	Int32 m_nLocationBtnID;//位置按钮
	Int32 m_nLocationLblID;//位置文字标签

	Int32 m_nTitleEditID;
	Int32 m_nContentEditID;//内容编辑控件
	Int32 m_nExpressionTPanelID;//表情TPanel编辑控件
	//TPanel* pTPanelEditExpression;//表情TPanel 指针

	Int32 m_nExpCtrlID[32*3];//暂定3页，每页32个


	Boolean IsExpressionBtn;
	Boolean IsPhotoBtn;
	Boolean IsLocationBtn;
	Boolean IsWhisperCtl;
	Boolean IsTitleEdit;//记录有没有收件人，或者标题

	//Boolean IsExpressionTPanelID;


	//need to create win type : AppNewsType
	//AppEditType m_AppEditType;
	PostNotifyMsgDataType m_msgData;

	/** 主程序GTID */
	SS_GTID 		gtidMain;

	Int32	m_BackBtn;
};


#endif
