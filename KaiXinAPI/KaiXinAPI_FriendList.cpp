/*!
* \file	 KaiXinApp_Friendlist.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 好友列表
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

//state icon
#define FRIENDLSIT_ICON_X		(SCR_W-60)
#define FRIENDLSIT_ICON_Y		10
#define FRIENDLSIT_ICON_W		21
#define FRIENDLSIT_ICON_H		21

//birth friend name
#define FRIENDLSIT_BIRTH_NAME_X		70
#define FRIENDLSIT_BIRTH_NAME_Y		8
#define FRIENDLSIT_BIRTH_NAME_W		100
#define FRIENDLSIT_BIRTH_NAME_H		20

//birth date
#define FRIENDLSIT_BIRTH_DATE_X		70
#define FRIENDLSIT_BIRTH_DATE_Y		38
#define FRIENDLSIT_BIRTH_DATE_W		100
#define FRIENDLSIT_BIRTH_DATE_H		20

//birth button
#define FRIENDLSIT_BIRTH_BUTTON_X		(SCR_W*2/3)
#define FRIENDLSIT_BIRTH_BUTTON_Y		12
#define FRIENDLSIT_BIRTH_BUTTON_W		(SCR_W/3 - 20)
#define FRIENDLSIT_BIRTH_BUTTON_H		35

//gift sent info
#define FRIENDLSIT_BIRTH_SENT_INFO_X		(FRIENDLSIT_BIRTH_BUTTON_X)
#define FRIENDLSIT_BIRTH_SENT_INFO_Y		5
#define FRIENDLSIT_BIRTH_SENT_INFO_W		(FRIENDLSIT_BIRTH_BUTTON_W)
#define FRIENDLSIT_BIRTH_SENT_INFO_H		50

#define FONT_SIZE_BIRTH_DATE			12
#define FONT_SIZE_BIRTH_SENT_INFO		12

#define COOLBAR_ITEM_HEIGHT			60

#define SELECTION_BUTTON_X		(0)
#define SELECTION_BUTTON_Y		(TITLEBAR_H)
#define SELECTION_BUTTON_W	(SCR_W/5)
#define SELECTION_BUTTON_H		(TOP_TAB_H)

#if(LCD_SIZE == LCD_HVGA )
#define SELECTION_CAPTION_Y		(12)
#elif(LCD_SIZE == LCD_WVGA )
#define SELECTION_CAPTION_Y		(18)
#endif

enum
{
	STATE_NULL,
	STATE_OFFLINE,
	STATE_ONLINE,
	STATE_PHONEONLINE,
	STATE_BIRTHDAY_NOT_SEND,
	STATE_BIRTHDAY_SENT,
};



Boolean MatchFPY(char* sFpy, char* sInput);

void* KaiXinAPI_FriendList_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseFriendList*  Response = new tResponseFriendList;
	memset(Response, 0 , sizeof(tResponseFriendList));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			Response->total = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "onlinetotal");
		if(pTemp0)
		{
			Response->onlinetotal = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "vtotal");
		if(pTemp0)
		{
			Response->vtotal = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "stotal");
		if(pTemp0)
		{
			Response->stotal = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "friends");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->friends_nSize = nSize1;
			if( nSize1 != 0 )
			{
				Response->friends = NULL;
				Response->friends = (FriendList_friends*) malloc(sizeof( FriendList_friends ) * nSize1 );
				memset(Response->friends, 0 , sizeof(FriendList_friends) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->friends[i].fuid, "%d", pTemp1->valueint );
					else
						STRCPY_Ex(Response->friends[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "gender");
				if(pTemp1)
				{
					Response->friends[i].gender = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "state");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].state, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "online");
				if(pTemp1)
				{
					Response->friends[i].online = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "py");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->friends[i].py_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->friends[i].py = NULL;
						Response->friends[i].py = (FriendList_py*) malloc(sizeof( FriendList_py ) * nSize2 );
						memset(Response->friends[i].py, 0 , sizeof(FriendList_py) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].py[j].py, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "fpy");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->friends[i].fpy_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->friends[i].fpy = NULL;
						Response->friends[i].fpy = (FriendList_fpy*) malloc(sizeof( FriendList_fpy ) * nSize2 );
						memset(Response->friends[i].fpy, 0 , sizeof(FriendList_fpy) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].fpy[j].fpy, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].flogo, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "visitors");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->visitors_nSize = nSize1;
			if( nSize1 != 0 )
			{
				Response->visitors = NULL;
				Response->visitors = (FriendList_visitors*) malloc(sizeof( FriendList_visitors ) * nSize1 );
				memset(Response->visitors, 0 , sizeof(FriendList_visitors) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->visitors[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->visitors[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->visitors[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "gender");
				if(pTemp1)
				{
					Response->visitors[i].gender = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "online");
				if(pTemp1)
				{
					Response->visitors[i].online = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "py");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->visitors[i].py_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->visitors[i].py = NULL;
						Response->visitors[i].py = (FriendList_py*) malloc(sizeof( FriendList_py ) * nSize2 );
						memset(Response->visitors[i].py, 0 , sizeof(FriendList_py) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->visitors[i].py[j].py, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "fpy");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->visitors[i].fpy_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->visitors[i].fpy = NULL;
						Response->visitors[i].fpy = (FriendList_fpy*) malloc(sizeof( FriendList_fpy ) * nSize2 );
						memset(Response->visitors[i].fpy, 0 , sizeof(FriendList_fpy) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->visitors[i].fpy[j].fpy, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "vtime");
				if(pTemp1)
				{
					Response->visitors[i].vtime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "strvtime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->visitors[i].strvtime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->visitors[i].flogo, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "onlines");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->onlines_nSize = nSize1;
			if( nSize1 != 0 )
			{
				Response->onlines = NULL;
				Response->onlines = (FriendList_onlines*) malloc(sizeof( FriendList_onlines ) * nSize1 );
				memset(Response->onlines, 0 , sizeof(FriendList_onlines) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->onlines[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->onlines[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->onlines[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "gender");
				if(pTemp1)
				{
					Response->onlines[i].gender = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "online");
				if(pTemp1)
				{
					Response->onlines[i].online = pTemp1->valueint;
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "state");
				if(pTemp1)
				{
					STRCPY_Ex(Response->onlines[i].state, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "py");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->onlines[i].py_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->onlines[i].py = NULL;
						Response->onlines[i].py = (FriendList_py*) malloc(sizeof( FriendList_py ) * nSize2 );
						memset(Response->onlines[i].py, 0 , sizeof(FriendList_py) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->onlines[i].py[j].py, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "fpy");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->onlines[i].fpy_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->onlines[i].fpy = NULL;
						Response->onlines[i].fpy = (FriendList_fpy*) malloc(sizeof( FriendList_fpy ) * nSize2 );
						memset(Response->onlines[i].fpy, 0 , sizeof(FriendList_fpy) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->onlines[i].fpy[j].fpy, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->onlines[i].flogo, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "starfriends");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->starfriends_nSize = nSize1;
			if( nSize1 != 0 )
			{
				Response->starfriends = NULL;
				Response->starfriends = (FriendList_starfriends*) malloc(sizeof( FriendList_starfriends ) * nSize1 );
				memset(Response->starfriends, 0 , sizeof(FriendList_starfriends) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->starfriends[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->starfriends[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->starfriends[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "gender");
				if(pTemp1)
				{
					Response->starfriends[i].gender = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "state");
				if(pTemp1)
				{
					STRCPY_Ex(Response->starfriends[i].state, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "py");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->starfriends[i].py_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->starfriends[i].py = NULL;
						Response->starfriends[i].py = (FriendList_py*) malloc(sizeof( FriendList_py ) * nSize2 );
						memset(Response->starfriends[i].py, 0 , sizeof(FriendList_py) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->starfriends[i].py[j].py, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "fpy");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->starfriends[i].fpy_nSize = nSize2;
					if( nSize2 != 0 )
					{
						Response->starfriends[i].fpy = NULL;
						Response->starfriends[i].fpy = (FriendList_fpy*) malloc(sizeof( FriendList_fpy ) * nSize2 );
						memset(Response->starfriends[i].fpy, 0 , sizeof(FriendList_fpy) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *pTemp2 = NULL;
						pTemp2 = cJSON_GetArrayItem(pTemp1,j);
						if(pTemp2)
						{
							STRCPY_Ex(Response->starfriends[i].fpy[j].fpy, pTemp2->valuestring);
						}

					}
				}				
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->starfriends[i].flogo, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "birthlist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->birthlist_nSize = nSize1;
			if( nSize1 != 0 )
			{
				Response->birthlist = NULL;
				Response->birthlist = (FriendList_birthlist*) malloc(sizeof( FriendList_birthlist ) * nSize1 );
				memset(Response->birthlist, 0 , sizeof(FriendList_birthlist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->birthlist[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->birthlist[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->birthlist[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->birthlist[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "birthday");
				if(pTemp1)
				{
					STRCPY_Ex(Response->birthlist[i].birthday, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "birthdisplay");
				if(pTemp1)
				{
					STRCPY_Ex(Response->birthlist[i].birthdisplay, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "send");
				if(pTemp1)
				{
					Response->birthlist[i].send = pTemp1->valueint;
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "applist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->applist_nSize = nSize1;
			if( nSize1 != 0 )
			{
				Response->applist = NULL;
				Response->applist = (FriendList_applist*) malloc(sizeof( FriendList_applist ) * nSize1 );
				memset(Response->applist, 0 , sizeof(FriendList_applist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "aid");
				if(pTemp1)
				{
					Response->applist[i].aid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "num");
				if(pTemp1)
				{
					Response->applist[i].num = pTemp1->valueint;
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}


// 构造函数
TFriendListForm::TFriendListForm(TApplication* pApp, int inFriendListType):TWindow(pApp)
{
	nActionIndex = 0;

	memset(gItemData, 0, sizeof(gItemData));

	//memset(fuidList, 0, sizeof(fuidList));
	//memset(ActionButtonID, 0, sizeof(ActionButtonID));
	memset(sFpyInput, 0, sizeof(sFpyInput));
	iListType = inFriendListType;

	//for(int i=0; i<FRIENDLSIT_MAXITEM; i++)
	//	pBmp[i] = NULL;

	Create(APP_KA_ID_FriendsListForm);
}

// 析构函数
TFriendListForm::~TFriendListForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<FRIENDLIST_MAXITEM; i++)
	{
		if( gItemData[i].pBmp != NULL)
		{
			gItemData[i].pBmp->Destroy();
			gItemData[i].pBmp = NULL;									
		}
	}
}


// 窗口事件处理
Boolean TFriendListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Selections_Bg), 0, TITLEBAR_H, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_statusiniput), 0, TITLEBAR_H+TOP_TAB_H, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-44, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
		}
		break;		
	case EVENT_CtrlKillFocus :
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;		
	case EVENT_FieldChanged:
		{
			_OnFldChangedEvent(pApp, pEvent);
			bHandled = TRUE;
			break;		
		}
		//下载进度消息
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
			break;
		}

		//下载完成消息
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));
			bHandled = TRUE;

			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					TBarRowList* pRowList;
					TBarRow* pBarRow = NULL;
					TBarListItem* pListItem = NULL;

					TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_FriendsListForm_CoolBarList_FriendList));
					if(pCoolBarList)
					{
						pRowList = pCoolBarList->Rows();
						if (pRowList)
						{
							pBarRow = pRowList->FirstRow();
							if (pBarRow)
							{
								Int32 nItemCount = pBarRow->Count();
								if(notifyData.nParam < nItemCount )
								{
									if( gItemData[notifyData.nParam].pBmp != NULL)
									{
										gItemData[notifyData.nParam].pBmp->Destroy();
										gItemData[notifyData.nParam].pBmp = NULL;									
									}
									gItemData[notifyData.nParam].pBmp= LoadImgByPath(notifyData.pszFilePath);

									pListItem = pBarRow->GetItem(notifyData.nParam);
									if(pListItem != NULL)
										pListItem->SetIcon(gItemData[notifyData.nParam].pBmp);
								}
							}
						}
					}
					break;
				}

			case KX_SendBirthdayGift:
				{
					int iRet = eFailed;
					tResponseSendBirthdayGift* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_SendBirthdayGift, (void **)&Response);
					if(Response != NULL)
					{
						if(Response->ret == 1)
						{
							TButton* pActionBtn = static_cast<TButton*>(GetControlPtr(gItemData[nActionIndex].ActionButtonID));
							TRichView* pResult = static_cast<TRichView*>(GetControlPtr(gItemData[nActionIndex].ResultID));
							pActionBtn->Hide(TRUE);
							pResult->Show(TRUE);
							//保存礼物已发送的结果,在json未更新的情况下记录UI状态
							gItemData[nActionIndex].bBirthGiftSent = TRUE;
						}
						delete Response;	
					}			
					break;
				}

			default:
				break;
			}
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_ExitBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;		

	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}


//创建标题Label
int TFriendListForm::SetTilteLabel(TApplication * pApp, TUChar* pszTitleLabel, Int32 nResId)
{
	TCtrl *m_TitleContrl;
	Int32 m_TitleCtlID;
	TRectangle obBtnRec(0,0,0,0);	
	const TUChar* pszTitle = new TUChar[64 + 1];
	//获取要显示的标题文本
	if(pszTitleLabel != NULL)
	{
		TUString::StrNCopy((TUChar *)pszTitle, pszTitleLabel, 64);
	}
	else if(nResId != 0)
	{
		TUString::StrNCopy((TUChar *)pszTitle, TResource::LoadConstString(nResId), 64);
	}
	else
	{
		delete pszTitle;
		return eFailed;
	}

	//计算位置
	Coord X, Y, Width, Height;
	GetTitleLabelRect(pszTitle, &X, &Y, &Width, &Height );

	//创建Label	
	m_TitleContrl = new TLabel;		
	obBtnRec.SetRect(X, Y, Width, Height);
	if(m_TitleContrl->Create(this))
	{		
		m_TitleContrl->SetBounds(&obBtnRec);	
		m_TitleCtlID = m_TitleContrl->GetId();	
		m_TitleContrl->SetCaption(pszTitle, FALSE);
		//自适应文字大小
		((TLabel*)m_TitleContrl)->SetAutoSize(TRUE);
		m_TitleContrl->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_WHITE);
		m_TitleContrl->SetEnabled(FALSE);
		m_TitleContrl->Show(TRUE);		
	}

	delete pszTitle;
	return eSucceed;
}


//创建标题左按钮
int TFriendListForm::SetTilteButton(TApplication * pApp)
{
	TCtrl *m_TitleButtonContrl;
	TRectangle obBtnRec(0,0,0,0);

	//计算位置	
	Coord X, Y, Width, Height;
	GetTitleButtonRect(&X, &Y, &Width, &Height);
	//创建Button
	m_TitleButtonContrl =new TButton ;	
	obBtnRec.SetRect(X, Y, Width, Height);
	if(m_TitleButtonContrl->Create(this))
	{
		m_TitleButtonContrl->SetBounds(&obBtnRec);	
		m_TitleButtonCtlID = m_TitleButtonContrl->GetId();

		m_TitleButtonContrl->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_More),FALSE);
		m_TitleButtonContrl->Show(TRUE);		
	}

	return eSucceed;
}

// 窗口初始化
Boolean TFriendListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	m_RefreshBtn = SetAppRefreshButton(this);
	m_ExitBtn = SetAppExitButton(this);

	_CreateSelectionButtons(pApp);
	_CreateTabButtons(pApp);

	SetAppTilte(this, APP_KA_ID_STRING_Title_FriendList);
	SetFriendListType(pApp, iListType, TRUE);
	_ChangeBtnImage(iListType);	

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TFriendListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

// 文本框输入处理事件
Boolean TFriendListForm::_OnFldChangedEvent(TApplication * pApp, EventType* pEvent)
{
	Boolean bHandle = FALSE;
	switch(pEvent->sParam1)
	{
	case APP_KA_ID_FriendsListForm_Field_Search:
		{
			TEdit* pEdit = static_cast<TEdit*>(GetControlPtr(APP_KA_ID_FriendsListForm_Field_Search));

			const TUChar *content = pEdit->GetCaption();
			TUString::StrUnicodeToStrUtf8((Char*)sFpyInput, content);
			SetFriendListType(pApp, iListType, FALSE);
			bHandle = TRUE;
		}
		break;		
	}
	return bHandle;
}

// 控件点击事件处理
Boolean TFriendListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);

	if(pEvent->sParam1 == this->m_nNewsBtnID)//动态
	{
		//App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_UPDATE_FRIENDS_NEWS, NULL, 0, 0, 0);	
		KaiXinAPICommon_Download(KX_UpdateFriendsNews, this->GetWindowHwndId());
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == this->m_nFriendsBtnID)//好友
	{
		//KaiXinAPICommon_Download(KX_FriendList, this->GetWindowHwndId());
		//bHandled = TRUE;
	}
	else if(pEvent->sParam1 == this->m_nInfosBtnID)//我的地盘
	{	
		KaiXinAPICommon_Download(KX_Profile, this->GetWindowHwndId());
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == this->m_nAppsBtnID)//组件
	{
		App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_APPLIST, NULL, 0, 0, 0);			
		//KaiXinAPICommon_Download(KX_ApplicationList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == this->m_nMoreBtnID)//更多
	{
		App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_MORE, NULL, 0, 0, 0);			
		bHandled = TRUE;		
	}
	else if(pEvent->sParam1 == m_ExitBtn)//退出
	{
		App_PostMessageEx(&gtidMain, MSG_EXIT, NULL, 0, 0, 0);	
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_RefreshBtn)//刷新
	{
		KaiXinAPICommon_Download(KX_FriendList, this->GetWindowHwndId(), 0, iListType);
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nAllBtnID)
	{
		SetFriendListType(pApp, FRIENDLIST_TYPE_FRIEND, TRUE);		
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nOnlineBtnID)
	{
		SetFriendListType(pApp, FRIENDLIST_TYPE_ONLINE, TRUE);
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nVisitorBtnID)
	{
		SetFriendListType(pApp, FRIENDLIST_TYPE_VISITOR, TRUE);
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nStarBtnID)
	{
		SetFriendListType(pApp, FRIENDLIST_TYPE_STAR, TRUE);
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nBirthdayBtnID)
	{
		SetFriendListType(pApp, FRIENDLIST_TYPE_BIRTHDAY, TRUE);
		bHandled = TRUE;
	}
	else
	{
		switch(pEvent->sParam1)
		{
		case APP_KA_ID_FriendsListForm_CoolBarList_FriendList:
			{
				TBarRow* lpRow;
				TBarListItem *lpItem;
				Int32        nIndex;

				lpRow = (TBarRow*)(pEvent->sParam2);
				lpItem = (TBarListItem *)(pEvent->lParam3);
				nIndex = lpItem->GetIndex();

				Set_Url_Params(KX_GetUserInfos, "uids", gItemData[nIndex].fuidList);
				KaiXinAPICommon_Download(KX_GetUserInfos, this->GetWindowHwndId());			
				break;
			}
		default:
			{
				//动态Ctrl
				for(int i=0; i <FRIENDLIST_MAXITEM; i++)
				{
					if(gItemData[i].ActionButtonID == pEvent->sParam1)
					{
						nActionIndex = i;
						Set_Url_Params(KX_SendBirthdayGift, "fuid", gItemData[i].fuidList);
						Set_Url_Params(KX_SendBirthdayGift, "msg", "");
						Set_Url_Params(KX_SendBirthdayGift, "quiet", "0");
						KaiXinAPICommon_Download(KX_SendBirthdayGift, this->GetWindowHwndId());		
						break;
					}
				}
				break;
			}
		}
	}
	return bHandled;
}

Boolean TFriendListForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 
	if(CtrlID == APP_KA_ID_FriendsListForm_Field_Search)
	{	
		//open input method
		ImeOpenIme( IME_MODE_VOLITANT,  IME_CLASS_ENGLISH);
		bHandled = TRUE;
	}	
	else if(CtrlID == m_nAllBtnID)
	{
		_ChangeBtnImage( FRIENDLIST_TYPE_FRIEND);		
		bHandled = TRUE;
	}
	else if(CtrlID == m_nOnlineBtnID)
	{
		_ChangeBtnImage( FRIENDLIST_TYPE_ONLINE);
		bHandled = TRUE;
	}
	else if(CtrlID == m_nVisitorBtnID)
	{
		_ChangeBtnImage( FRIENDLIST_TYPE_VISITOR);
		bHandled = TRUE;
	}
	else if(CtrlID == m_nStarBtnID)
	{
		_ChangeBtnImage( FRIENDLIST_TYPE_STAR);
		bHandled = TRUE;
	}
	else if(CtrlID == m_nBirthdayBtnID)
	{
		_ChangeBtnImage( FRIENDLIST_TYPE_BIRTHDAY);
		bHandled = TRUE;
	}			
	return bHandled;	

}
Boolean TFriendListForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 CtrlID = pEvent->sParam1; 
	if(CtrlID == APP_KA_ID_FriendsListForm_Field_Search)
	{
		//close input method
		ImeCloseIme();
		bHandled = TRUE;
	}
	return bHandled;
}

int TFriendListForm::SetFriendListType(TApplication * pApp, int eFriendListType, Boolean bClearInput)
{
	iListType = eFriendListType;

	int iRet =0;
	tResponseFriendList* Response = NULL;
	iRet = KaiXinAPI_JsonParse(KX_FriendList, (void **)&Response);
	if( Response == NULL)
		return eFailed;

	//Panel坐标复位
	TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_FriendsListForm_Panel_FriendList));
	pPanel->SetOrigin(0, 0);

	//Selection更新
	//_ChangeBtnImage(eFriendListType);


	//是否清空输入
	if(bClearInput)
	{
		const TUChar pszInput[16] = {0};
		TEdit* pEdit = static_cast<TEdit*>(GetControlPtr(APP_KA_ID_FriendsListForm_Field_Search));
		memset(sFpyInput, 0, sizeof(sFpyInput));
		pEdit->SetCaption(pszInput, FALSE);
	}

	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_FriendsListForm_CoolBarList_FriendList));
	if (pCoolBarList)
	{
		TBarRowList* pRowList = NULL;
		TBarRow* pBarRow = NULL;
		TBarListItem* pListItem = NULL;
		//背景设置为白色底色
		pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);

		//Bmp需要先Destroy, bBirthGiftSent需要保留
		for(int i=0;i <ARR_SIZE(gItemData); i++)
		{
			memset(gItemData[i].fuidList, 0, sizeof(gItemData[i].fuidList));
			gItemData[i].ActionButtonID = 0;
			gItemData[i].ResultID = 0;
			if(  gItemData[i].pBmp!= NULL)
			{
				gItemData[i].pBmp->Destroy();
				gItemData[i].pBmp = NULL;									
			}			
		}

		pRowList = pCoolBarList->Rows();
		if (pRowList)
		{
			pRowList->BeginUpdate();
			pRowList->Clear();
			pBarRow = pRowList->AppendRow();
			//pRowList->EndUpdate();

			int iCount = 0;
			int iIndex = 0;	//首字母过滤后实际的Index值
			switch(eFriendListType)
			{
			case FRIENDLIST_TYPE_FRIEND:
				iCount = Response->friends_nSize;
				break;
			case FRIENDLIST_TYPE_ONLINE:
				iCount = Response->onlines_nSize;
				break;
			case FRIENDLIST_TYPE_VISITOR:
				iCount = Response->visitors_nSize;
				break;
			case FRIENDLIST_TYPE_STAR:
				iCount = Response->starfriends_nSize;
				break;
			case FRIENDLIST_TYPE_BIRTHDAY:
				iCount = Response->birthlist_nSize;
				break;
			}

			for (int i = 0; i < iCount; i++)
			{
				TUChar pszString[64] = {0};
				TUChar pszCaption[64] = {0}; 
				int 	eState = STATE_NULL;

				switch(eFriendListType)
				{
				case FRIENDLIST_TYPE_FRIEND:
					if(Response->friends != NULL)
					{
						Boolean bMatch = FALSE;
						for(int j=0; j<Response->friends[i].fpy_nSize; j++)
						{
							if(MatchFPY(Response->friends[i].fpy[j].fpy, sFpyInput) == TRUE)
							{
								bMatch = TRUE;
								break;
							}
						}
						if(bMatch == FALSE)
							continue;

						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->friends[i].fname);
						strcpy(gItemData[iIndex].fuidList, Response->friends[i].fuid);

						switch(Response->friends[i].online)
						{
						case 0:
							eState = STATE_OFFLINE;
							break;
						case 1:
							eState = STATE_ONLINE;
							break;
						case 2:
							eState = STATE_PHONEONLINE;
							break;
						default:
							break;
						}

						//先读取磁盘cache
						gItemData[iIndex].pBmp = LoadImgByUrl(Response->friends[i].flogo);
						//磁盘cache无文件,再下载
						if( gItemData[iIndex].pBmp == NULL)
							KaiXinAPICommon_DownloadPhoto(Response->friends[i].flogo, this->GetWindowHwndId(), iIndex );
					}
					break;
				case FRIENDLIST_TYPE_ONLINE:
					if(Response->onlines!= NULL)
					{
						Boolean bMatch = FALSE;
						for(int j=0; j<Response->onlines[i].fpy_nSize; j++)
						{
							if(MatchFPY(Response->onlines[i].fpy[j].fpy, sFpyInput) == TRUE)
							{
								bMatch = TRUE;
								break;
							}
						}
						if(bMatch == FALSE)
							continue;

						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->onlines[i].fname);
						strcpy(gItemData[iIndex].fuidList, Response->onlines[i].fuid);

						switch(Response->onlines[i].online)
						{
						case 0:
							eState = STATE_OFFLINE;
							break;
						case 1:
							eState = STATE_ONLINE;
							break;
						case 2:
							eState = STATE_PHONEONLINE;
							break;
						default:
							break;
						}						

						//先读取磁盘cache
						gItemData[iIndex].pBmp= LoadImgByUrl(Response->onlines[i].flogo);
						//磁盘cache无文件,再下载
						if( gItemData[iIndex].pBmp  == NULL)
							KaiXinAPICommon_DownloadPhoto(Response->onlines[i].flogo, this->GetWindowHwndId(), iIndex);
					}							
					break;
				case FRIENDLIST_TYPE_VISITOR:
					if(Response->visitors!= NULL)
					{
						Boolean bMatch = FALSE;
						for(int j=0; j<Response->visitors[i].fpy_nSize; j++)
						{
							if(MatchFPY(Response->visitors[i].fpy[j].fpy, sFpyInput) == TRUE)
							{
								bMatch = TRUE;
								break;
							}
						}
						if(bMatch == FALSE)
							continue;

						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->visitors[i].fname);
						strcpy(gItemData[iIndex].fuidList, Response->visitors[i].fuid);
						switch(Response->visitors[i].online)
						{
						case 0:
							eState = STATE_OFFLINE;
							break;
						case 1:
							eState = STATE_ONLINE;
							break;
						case 2:
							eState = STATE_PHONEONLINE;
							break;
						default:
							break;
						}

						//先读取磁盘cache
						gItemData[iIndex].pBmp = LoadImgByUrl(Response->visitors[i].flogo);
						//磁盘cache无文件,再下载
						if( gItemData[iIndex].pBmp == NULL)					
							KaiXinAPICommon_DownloadPhoto(Response->visitors[i].flogo, this->GetWindowHwndId(), iIndex );
					}							
					break;
				case FRIENDLIST_TYPE_STAR:
					if(Response->starfriends!= NULL)
					{
						Boolean bMatch = FALSE;
						for(int j=0; j<Response->starfriends[i].fpy_nSize; j++)
						{
							if(MatchFPY(Response->starfriends[i].fpy[j].fpy, sFpyInput) == TRUE)
							{
								bMatch = TRUE;
								break;
							}
						}
						if(bMatch == FALSE)
							continue;

						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->starfriends[i].fname);
						strcpy(gItemData[iIndex].fuidList, Response->starfriends[i].fuid);							

						//先读取磁盘cache
						gItemData[iIndex].pBmp = LoadImgByUrl(Response->starfriends[i].flogo);
						//磁盘cache无文件,再下载
						if( gItemData[iIndex].pBmp == NULL)									
							KaiXinAPICommon_DownloadPhoto(Response->starfriends[i].flogo, this->GetWindowHwndId(), iIndex );
					}
					break;

				case FRIENDLIST_TYPE_BIRTHDAY:
					if(Response->birthlist!= NULL)
					{
						TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->birthlist[i].fname);
						TUString::StrUtf8ToStrUnicode(pszCaption , (const Char *)Response->birthlist[i].birthdisplay);
						strcpy(gItemData[iIndex].fuidList, Response->birthlist[i].fuid);

						//点击送礼物后, 虽然json没有更新,但是可以通过bBirthGiftSent来做判断
						if( (Response->birthlist[i].send == 1) || (gItemData[iIndex].bBirthGiftSent == TRUE) )
							eState = STATE_BIRTHDAY_SENT;
						else
							eState = STATE_BIRTHDAY_NOT_SEND;

						//先读取磁盘cache
						gItemData[iIndex].pBmp = LoadImgByUrl(Response->birthlist[i].flogo);
						//磁盘cache无文件,再下载
						if( gItemData[iIndex].pBmp == NULL)							
							KaiXinAPICommon_DownloadPhoto(Response->birthlist[i].flogo, this->GetWindowHwndId(), iIndex );
					}
					break;	

				default:
					break;
				}		

				//添加列表项
				pListItem = pBarRow->AppendItem();
				if (pListItem)
				{	
					pListItem->SetHeight(COOLBAR_ITEM_HEIGHT);
					if(TUString::StrLen(pszString) >12)
						pListItem->SetTitleFont(miniFont);
					else
						pListItem->SetTitleFont(smallFont);
					pListItem->SetTitle(pszString);
					if(  gItemData[iIndex].pBmp != NULL)
						pListItem->SetIcon( gItemData[iIndex].pBmp);
					else
						pListItem->SetIcon(TBitmap::LoadResBitmap(APP_KA_ID_BITMAP_Default));

					TRectangle rect;
					pListItem->GetBounds(rect);
					pListItem->SetCaption(NULL);                       
					pListItem->SetIndicatorType(itNone);

					switch(eState)
					{
					case STATE_ONLINE:
						{
							Int32 nImageId = pListItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
							TImage* pImage = static_cast<TImage*>(GetControlPtr(nImageId));
							TRectangle Rc_Icon(FRIENDLSIT_ICON_X, rect.Y()+FRIENDLSIT_ICON_Y, FRIENDLSIT_ICON_W, FRIENDLSIT_ICON_H);
							pImage->SetBounds(&Rc_Icon);
							pImage->SetTransparent(TRUE);
							pImage->SetBitmapByResId(APP_KA_ID_BITMAP_online);
							break;
						}
					case STATE_PHONEONLINE:
						{
							Int32 nImageId = pListItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
							TImage* pImage = static_cast<TImage*>(GetControlPtr(nImageId));
							TRectangle Rc_Icon(FRIENDLSIT_ICON_X, rect.Y()+FRIENDLSIT_ICON_Y, FRIENDLSIT_ICON_W, FRIENDLSIT_ICON_H);
							pImage->SetBounds(&Rc_Icon);
							pImage->SetTransparent(TRUE);							
							pImage->SetBitmapByResId(APP_KA_ID_BITMAP_mobileonline);
							break;
						}
					case STATE_BIRTHDAY_NOT_SEND:
					case STATE_BIRTHDAY_SENT:
						{
							pListItem->SetTitle(TUSTR_Kx_NULL);
							TFont objFontType;
							//姓名
							Int32 nLabelId = pListItem->AddCtrl(CTL_CLASS_LABEL, 0, 0);
							TLabel* pLabel = static_cast<TLabel*>(GetControlPtr(nLabelId));
							TRectangle Rc_Label(FRIENDLSIT_BIRTH_NAME_X, FRIENDLSIT_BIRTH_NAME_Y, FRIENDLSIT_BIRTH_NAME_W, FRIENDLSIT_BIRTH_NAME_H);
							pLabel->SetBounds(&Rc_Label);
							pLabel->SetAutoSize(TRUE);
							pLabel->SetCaption(pszString,FALSE);

							//日期
							Int32 nLabelDateId = pListItem->AddCtrl(CTL_CLASS_LABEL, 0, 0);
							TLabel* pLabelDate = static_cast<TLabel*>(GetControlPtr(nLabelDateId));
							TRectangle Rc_LabelDate(FRIENDLSIT_BIRTH_DATE_X, FRIENDLSIT_BIRTH_DATE_Y, FRIENDLSIT_BIRTH_DATE_W, FRIENDLSIT_BIRTH_DATE_H);
							pLabelDate->SetBounds(&Rc_LabelDate);
							objFontType = pLabelDate->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pLabelDate->SetFont(objFontType); 
							pLabelDate->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
							pLabelDate->SetCaption(pszCaption, FALSE);

							//按钮,已发送则隐藏
							gItemData[iIndex].ActionButtonID = pListItem->AddCtrl(CTL_CLASS_BUTTON, 0, 0);
							TButton* pActionGift = static_cast<TButton*>(GetControlPtr(gItemData[iIndex].ActionButtonID));
							TRectangle Rc_ActionGift(FRIENDLSIT_BIRTH_BUTTON_X, FRIENDLSIT_BIRTH_BUTTON_Y, FRIENDLSIT_BIRTH_BUTTON_W, FRIENDLSIT_BIRTH_BUTTON_H);
							pActionGift->SetBounds(&Rc_ActionGift);
							pActionGift->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Gift),FALSE);
							if(eState == STATE_BIRTHDAY_SENT)
								pActionGift->Hide(TRUE);

							//已送提示,未发送则隐藏
							gItemData[iIndex].ResultID = pListItem->AddCtrl(CTL_CLASS_RICHVIEW, 0, 0);
							TRichView* pGiftSent = static_cast<TRichView*>(GetControlPtr(gItemData[iIndex].ResultID));
							TRectangle Rc_GiftSent(FRIENDLSIT_BIRTH_SENT_INFO_X, FRIENDLSIT_BIRTH_SENT_INFO_Y, FRIENDLSIT_BIRTH_SENT_INFO_W, FRIENDLSIT_BIRTH_SENT_INFO_H);
							pGiftSent->SetBounds(&Rc_GiftSent);
							objFontType = pGiftSent->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pGiftSent->SetFont(objFontType);						
							pGiftSent->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_GiftSentHim),FALSE);
							pGiftSent->SetBorderStyle(bsSingle, TRUE);
							pGiftSent->SetFrameWidth(1);
							pGiftSent->SetEnabled(FALSE);
							pGiftSent->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_INFO_BACKGROUND);
							pGiftSent->SetWordWrapAttr(TRUE);
							pGiftSent->SetScrollBarMode(CTL_SCL_MODE_NONE);
							if(eState == STATE_BIRTHDAY_NOT_SEND)
								pGiftSent->Hide(TRUE);
							break;
						}
					default:
						break;
					}

					iIndex ++;							
				}
			}

			pRowList->EndUpdate();
		}
	}

	delete Response;

	return eSucceed;
}


//创建页面下方Selection Button部分，必须有5个成员变量来保存ButtonID, 
Int32 TFriendListForm::_CreateSelectionButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(100,50,150,30); //初始(left, top, w, h)
	TFont tFont(stdFont);	
	Int32 CaptionX = 0;

	//use to selection buttons ID
	m_nAllBtnID = 0;
	m_nOnlineBtnID = 0;
	m_nVisitorBtnID = 0;
	m_nStarBtnID = 0;
	m_nBirthdayBtnID = 0;

	//创建3个页面对应的按钮
	const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_table_normal_friend_list);//APP_KA_ID_BITMAP_news
	const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_table_selected_friend_list);

	//全部
	//当前list为全部，所以图标都是选中图片			
	obBtnRec.SetRect(SELECTION_BUTTON_X, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);
	
	TMaskButton* pAllBtn =new TMaskButton;
	if(pAllBtn->Create(this))
	{
		m_nAllBtnID = pAllBtn->GetId();//save button ID
		pAllBtn->SetBounds(&obBtnRec); 	
		//pAllBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pAllBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2); 
		pAllBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_FriendList_All), tFont))/2;
		pAllBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendList_All), CaptionX, SELECTION_CAPTION_Y);
		pAllBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	else
	{
		bnRetCod ++;
	}

	//在线
	obBtnRec.SetRect(SELECTION_BUTTON_X+SELECTION_BUTTON_W, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);
	TMaskButton* pOnlineBtn =new TMaskButton;;
	if(pOnlineBtn->Create(this))
	{
		m_nOnlineBtnID = pOnlineBtn->GetId();//save button ID
		pOnlineBtn->SetBounds(&obBtnRec);		
		//pOnlineBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pOnlineBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
		pOnlineBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Online), tFont))/2;
		pOnlineBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Online), CaptionX, SELECTION_CAPTION_Y);
		pOnlineBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	else
	{
		bnRetCod ++;
	}


	//访客
	obBtnRec.SetRect(SELECTION_BUTTON_X+SELECTION_BUTTON_W*2, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);
	TMaskButton* pVisitorBtn =new TMaskButton;;
	if(pVisitorBtn->Create(this))
	{
		m_nVisitorBtnID = pVisitorBtn->GetId();//save button ID
		pVisitorBtn->SetBounds(&obBtnRec);		
		//pVisitorBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pVisitorBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
		pVisitorBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Visitor), tFont))/2;
		pVisitorBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Visitor), CaptionX, SELECTION_CAPTION_Y);
		pVisitorBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	else
	{
		bnRetCod ++;
	}

	//机构
	obBtnRec.SetRect(SELECTION_BUTTON_X+SELECTION_BUTTON_W*3, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);
	TMaskButton* pStarBtn =new TMaskButton;;
	if(pStarBtn->Create(this))
	{
		m_nStarBtnID = pStarBtn->GetId();//save button ID
		pStarBtn->SetBounds(&obBtnRec);		
		//pStarBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pStarBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
		pStarBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Star), tFont))/2;
		pStarBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Star), CaptionX, SELECTION_CAPTION_Y);
		pStarBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	else
	{
		bnRetCod ++;
	}

	//生日
	obBtnRec.SetRect(SELECTION_BUTTON_X+SELECTION_BUTTON_W*4, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);
	TMaskButton* pBirthdayBtn =new TMaskButton;;
	if(pBirthdayBtn->Create(this))
	{
		m_nBirthdayBtnID = pBirthdayBtn->GetId();//save button ID
		pBirthdayBtn->SetBounds(&obBtnRec);		
		//pBirthdayBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pBirthdayBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
		pBirthdayBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Birthday), tFont))/2;
		pBirthdayBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendList_Birthday),CaptionX, SELECTION_CAPTION_Y);
		pBirthdayBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	else
	{
		bnRetCod ++;
	}	
	return bnRetCod;
}

Int32 TFriendListForm::_ChangeBtnImage(int eFriendListType)
{	
	TMaskButton* pAllBtn = static_cast<TMaskButton*>(GetControlPtr(m_nAllBtnID));
	TMaskButton* pOnlineBtn = static_cast<TMaskButton*>(GetControlPtr(m_nOnlineBtnID));
	TMaskButton* pVisitorBtn = static_cast<TMaskButton*>(GetControlPtr(m_nVisitorBtnID));
	TMaskButton* pStarBtn = static_cast<TMaskButton*>(GetControlPtr(m_nStarBtnID));
	TMaskButton* pBirthdayBtn = static_cast<TMaskButton*>(GetControlPtr(m_nBirthdayBtnID));

	const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_table_normal_friend_list);//APP_KA_ID_BITMAP_news
	const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_table_selected_friend_list);

	pAllBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);
	pOnlineBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
	pVisitorBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
	pStarBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
	pBirthdayBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	

	switch(eFriendListType)
	{
	case FRIENDLIST_TYPE_FRIEND:
		{
			pAllBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);
			break;
		}
	case FRIENDLIST_TYPE_ONLINE:
		{				
			pOnlineBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
			break;
		}			
	case FRIENDLIST_TYPE_VISITOR:
		{
			pVisitorBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
			break;
		}
	case FRIENDLIST_TYPE_STAR:
		{
			pStarBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
			break;
		}
	case FRIENDLIST_TYPE_BIRTHDAY:
		{
			pBirthdayBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
			break;
		}
	default:
		{
			break;
		}
	}

	pAllBtn->Draw();
	pOnlineBtn->Draw();
	pVisitorBtn->Draw();
	pStarBtn->Draw();
	pBirthdayBtn->Draw();

	return 0;
}

//创建页面下方Tab Button部分，必须有5个成员变量来保存ButtonID, 
/*
Int32 m_nNewsBtnID;//动态
Int32 m_nFriendsBtnID;//好友
Int32 m_nInfosBtnID;//我的地盘
Int32 m_nAppsBtnID;//组件
Int32 m_nMoreBtnID;//更多

*/
Int32 TFriendListForm::_CreateTabButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(100,50,150,30); //初始(left, top, w, h)
	TFont tFont;

	//control 
	Int32 m_iaCreateCtlID[56] = {0};
	TCtrl *m_obContrl[56] = {NULL};
	Int32 m_nCtlIDCount = 0;

	//use to save buttons ID
	m_nNewsBtnID = 0;//动态
	m_nFriendsBtnID = 0;//好友
	m_nInfosBtnID = 0;//我的地盘
	m_nAppsBtnID = 0;//组件
	m_nMoreBtnID = 0;//更多


	//创建5个页面对应的按钮
	const TBitmap * pImgBG = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_btn_bg);

	//动态	
	const TBitmap * pImgNormal1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_news);
	const TBitmap * pImgDown1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_news_over);	
	obBtnRec.SetRect(0, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pNewsBtn =new TMaskButton;;
	if(pNewsBtn->Create(this))
	{
		pNewsBtn->SetBounds(&obBtnRec);		
		m_nNewsBtnID = pNewsBtn->GetId();//save button ID
		pNewsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pNewsBtn->SetImage(pImgNormal1, (BOTTOM_TAB_W-pImgNormal1->GetWidth())/2, (BOTTOM_TAB_H-pImgNormal1->GetHeight())/2);	
		pNewsBtn->SetSelImage(pImgDown1, (BOTTOM_TAB_W-pImgDown1->GetWidth())/2, (BOTTOM_TAB_H-pImgDown1->GetHeight())/2);	
	}
	else
	{
		bnRetCod ++;
	}

	//好友	
	const TBitmap * pImgNormal2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friend_over);
	const TBitmap * pImgDown2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friend_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pFriendsBtn =new TMaskButton;;
	if(pFriendsBtn->Create(this))
	{
		pFriendsBtn->SetBounds(&obBtnRec);		
		m_nFriendsBtnID = pFriendsBtn->GetId();//save button ID
		pFriendsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pFriendsBtn->SetImage(pImgNormal2,(BOTTOM_TAB_W-pImgNormal2->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal2->GetHeight())/2);	
		pFriendsBtn->SetSelImage(pImgDown2,(BOTTOM_TAB_W-pImgDown2->GetWidth())/2,(BOTTOM_TAB_H-pImgDown2->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}


	//我的地盘

	//当前form为我的地盘，所以图标都是选中图片			
	const TBitmap * pImgNormal3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_info);//APP_KA_ID_BITMAP_info
	const TBitmap * pImgDown3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_info_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W*2, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);
	TMaskButton* pInfosBtn =new TMaskButton;;
	if(pInfosBtn->Create(this))
	{
		pInfosBtn->SetBounds(&obBtnRec);		
		m_nInfosBtnID = pInfosBtn->GetId();//save button ID
		pInfosBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pInfosBtn->SetImage(pImgNormal3,(BOTTOM_TAB_W-pImgNormal3->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal3->GetHeight())/2);	
		pInfosBtn->SetSelImage(pImgDown3,(BOTTOM_TAB_W-pImgDown3->GetWidth())/2,(BOTTOM_TAB_H-pImgDown3->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}

	//组件
	const TBitmap * pImgNormal4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_module);
	const TBitmap * pImgDown4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_module_over);
	obBtnRec.SetRect(BOTTOM_TAB_W*3, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H),BOTTOM_TAB_W, BOTTOM_TAB_H);
	TMaskButton* pAppsBtn =new TMaskButton;;
	if(pAppsBtn->Create(this))
	{
		pAppsBtn->SetBounds(&obBtnRec);		
		m_nAppsBtnID = pAppsBtn->GetId();//save button ID
		pAppsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pAppsBtn->SetImage(pImgNormal4,(BOTTOM_TAB_W-pImgNormal4->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal4->GetHeight())/2);	
		pAppsBtn->SetSelImage(pImgDown4,(BOTTOM_TAB_W-pImgDown4->GetWidth())/2,(BOTTOM_TAB_H-pImgDown4->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}

	//更多
	const TBitmap * pImgNormal5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_more);
	const TBitmap * pImgDown5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_more_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W*4, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pMoreBtn =new TMaskButton;;
	if(pMoreBtn->Create(this))
	{
		pMoreBtn->SetBounds(&obBtnRec);		
		m_nMoreBtnID = pMoreBtn->GetId();//save button ID
		pMoreBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pMoreBtn->SetImage(pImgNormal5,(BOTTOM_TAB_W-pImgNormal5->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal5->GetHeight())/2);	
		pMoreBtn->SetSelImage(pImgDown5,(BOTTOM_TAB_W-pImgDown5->GetWidth())/2,(BOTTOM_TAB_H-pImgDown5->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}			

	return bnRetCod;
}

//匹配首字母, 不区分大小写
Boolean MatchFPY(char* sFpy, char* sInput)
{
	//如果输入为空,则认为是匹配的
	if(sInput == NULL || *sInput ==0)
		return TRUE;

	//若首字母串为空,则认为不匹配
	if(sFpy == NULL || *sFpy == 0)
		return FALSE;

	//若输入长度大于首字母串长度,则认为不匹配
	if(strlen(sInput) > strlen(sFpy))
		return FALSE;

	//匹配输入长度, 先将输入转成小写
	for(unsigned int i=0; i<strlen(sInput); i++)
	{
		if( (sInput[i] >= 'A') && (sInput[i] <= 'Z') )
			sInput[i] = sInput[i] - 'A' + 'a';
	}
	
	if(strncmp(sFpy, sInput, strlen(sInput)) == 0)
		return TRUE;

	return FALSE;
}





