/*!
* \file	 KaiXinApp_GardenDetail.cpp
* \author	 huxianxiang@GoZone
* \date	 2010-9-29
* \brief  解析与UI: 偷菜 
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#if(LCD_SIZE == LCD_HVGA )
#define OFFSET_X	(10)
#elif(LCD_SIZE == LCD_WVGA )
#define OFFSET_X	(20)
#endif


void* KaiXinAPI_GardenDetail_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGardenDetail*  Response = new tResponseGardenDetail;
	memset(Response, 0 , sizeof(tResponseGardenDetail));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "n");
		if(pTemp0)
		{
			Response->nNum = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "cash");
		if(pTemp0)
		{
			STRCPY_Ex(Response->szCash, pTemp0->valuestring);
			Response->cash = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "ranktip");
		if(pTemp0)
		{
			Response->ranktip = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "tcharms");
		if(pTemp0)
		{
			Response->tcharms = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "fuid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->fuid, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->fuid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "flogo");
		if(pTemp0)
		{
			STRCPY_Ex(Response->flogo, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "fname");
		if(pTemp0)
		{
			STRCPY_Ex(Response->fname, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "crops");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_crops = nSize1;
			if( nSize1 != 0 )
			{
				Response->crops = NULL;
				Response->crops = (GardenDetail_crops*) malloc(sizeof( GardenDetail_crops ) * nSize1 );
				memset(Response->crops, 0 , sizeof(GardenDetail_crops) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "cropsid");
				if(pTemp1)
				{
					Response->crops[i].cropsid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "farmnum");
				if(pTemp1)
				{
					Response->crops[i].farmnum = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "name");
				if(pTemp1)
				{
					STRCPY_Ex(Response->crops[i].name, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "growper");
				if(pTemp1)
				{
					STRCPY_Ex(Response->crops[i].growper, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "growdesc");
				if(pTemp1)
				{
					STRCPY_Ex(Response->crops[i].growdesc, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "status");
				if(pTemp1)
				{
					Response->crops[i].status = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "shared");
				if(pTemp1)
				{
					STRCPY_Ex(Response->crops[i].shared, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "sharename");
				if(pTemp1)
				{
					STRCPY_Ex(Response->crops[i].sharename, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "stealed");
				if(pTemp1)
				{
					Response->crops[i].stealed = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "htime");
				if(pTemp1)
				{
					Response->crops[i].htime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "isexpo");
				if(pTemp1)
				{
					Response->crops[i].isexpo = pTemp1->valueint;
				}

			}
		}
	}
	else
	{

	}
	cJSON_Delete(json);
	return Response;
}



void* KaiXinAPI_GardenHarvest_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGardenHarvest*  Response = new tResponseGardenHarvest;
	memset(Response, 0 , sizeof(tResponseGardenHarvest));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "retdesc");
		if(pTemp0)
		{
			STRCPY_Ex(Response->retdesc, pTemp0->valuestring);
		}


	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TGardenDetailForm::TGardenDetailForm(TApplication* pApp,Boolean bNew):TWindow(pApp)
{
	Create(APP_KA_ID_GardenDetailForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);
}

// 析构函数
TGardenDetailForm::~TGardenDetailForm(void)
{
	if( Response )
	{
		delete Response;	
	}
}

// 窗口事件处理
Boolean TGardenDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_GardenHarvest:				
				{
					int iRet = eFailed;
					tResponseGardenHarvest* ResponseHarvest = NULL;
					iRet = KaiXinAPI_JsonParse(KX_GardenHarvest, (void **)&ResponseHarvest);
					if( ResponseHarvest )
					{
						if( strlen(ResponseHarvest->retdesc) > 0)
						{
							char InfoString[ERROR_INFO_LEN*3] = {0};
							TUChar InfoUString[ERROR_INFO_LEN] = {0};
							STRCPY_Ex(InfoString, ResponseHarvest->retdesc);
							TUString::StrUtf8ToStrUnicode (InfoUString, (const Char *)InfoString);
							pApp->MessageBox(InfoUString, TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),WMB_OK);
							KaiXinAPICommon_Download(KX_GardenDetail, this->GetWindowHwndId());
						}
						else
						{
							if(ResponseHarvest->ret == 1)
							{
								pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),WMB_OK);
								KaiXinAPICommon_Download(KX_GardenDetail, this->GetWindowHwndId());
							}
							else
							{
								pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),WMB_OK);						
							}
						}
						delete ResponseHarvest;	
					}
					break;
				}			
			}
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TGardenDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	TUChar sUserName[32] = {0};

	IsSelf = FALSE;
	memset(Fuid, 0, sizeof(Fuid));		
	nDetailItems =0;
	Response = NULL;
	iRet = KaiXinAPI_JsonParse(KX_GardenDetail, (void **)&Response);

	m_BackBtn = SetAppBackButton(this);	
	this->SetFocus(m_BackBtn);
	
	SetAppTilte(this, APP_KA_ID_STRING_Garden);
	char* szFuid = NULL;								
	szFuid = (char*)malloc(32);
	memset(szFuid, 0, sizeof(32));		

	Get_Url_Params(KX_GardenDetail, "fuid", &szFuid);
	STRCPY_Ex(Fuid,szFuid);

	if(strcmp(szFuid, KaiXinUserInfo.uid)==0||strcmp(szFuid, "")==0)
	{							
		IsSelf = TRUE;
		TUString::StrCopy(sUserName,TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else
	{
		IsSelf = FALSE;

		tResponseGardenList* Response = NULL;

		Int32 Fuid = 0;
		TUChar TUCharFuid[32];
		TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)szFuid);
		Fuid = TUString::StrAToI(TUCharFuid);
		iRet = KaiXinAPI_JsonParse(KX_GardenList, (void **)&Response);

		if(iRet == eSucceed)
		{	
			int i =0;
			for(i = 0; i<Response->nSize_friends; i++)
			{
				if((Int32)Response->friends[i].fuid == Fuid)
				{
					TUString::StrUtf8ToStrUnicode(sUserName , (const Char *)Response->friends[i].fname);
					break;
				}
			}

			if(i >= Response->nSize_friends)
			{
				TUString::StrCopy(sUserName,TResource::LoadConstString(APP_KA_ID_STRING_Friend));
			}
		}
		else
		{
			TUString::StrCopy(sUserName,TResource::LoadConstString(APP_KA_ID_STRING_Friend));
		}

		if(Response)
		{
			delete Response;
		}
	}					
	free(szFuid);	

	if(iRet == 1)
	{
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_GardenDetailForm_GardenDetailCoolBarList));
		if (pCoolBarList)
		{
			TBarListItem* lpItem = NULL;

			pCoolBarList->SetBounds(RC_LIST_LARGE);
			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate();
				if(lpRow)
				{
					//Title 
					lpItem = lpRow->AppendItem();
					if(lpItem)	
					{
						TFont objFontType;
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;
						TUChar pszSubTitle[64] = {0};

						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);                       
						lpItem->SetIndicatorType(itNone);

						ItemHeight = ItemHeight + 30;

						TUString::StrPrintF(pszSubTitle, TResource::LoadConstString(APP_KA_ID_STRING_SubTitleGarden),sUserName);
						Int32 nTitlelabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pTitlelabel = static_cast<TLabel*>(GetControlPtr(nTitlelabelId));
						TRectangle Rc_Titlelabel(OFFSET_X, ItemHeight, SCR_W - 20, 20);
						pTitlelabel->SetBounds(&Rc_Titlelabel);
						objFontType = pTitlelabel->GetFont();
						objFontType.Create(FONT_CONTENT, FONT_CONTENT);
						pTitlelabel->SetFont(objFontType); 
						pTitlelabel->SetCaption(pszSubTitle,FALSE);
						pTitlelabel->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + 30;					
						lpItem->SetHeight(ItemHeight);	
					}	

					//现金，技能，魅力
					lpItem = lpRow->AppendItem();
					if(lpItem)
					{
						TFont objFontType;
						TUChar pszCash[128] = {0};
						TUChar pszSkill[16] = {0};
						TUChar pszCharm[16] = {0};
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;

						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);                       
						lpItem->SetIndicatorType(itNone);

						ItemHeight = ItemHeight + rect.Y() + 15;
						//现金
						Int32 nCashlabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCashlabel = static_cast<TLabel*>(GetControlPtr(nCashlabelId));
						TRectangle Rc_Cashlabel(OFFSET_X, ItemHeight, 45, 20);
						pCashlabel->SetBounds(&Rc_Cashlabel);
						objFontType = pCashlabel->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCashlabel->SetFont(objFontType); 
						pCashlabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Cash),FALSE);
						//有时返回char, 有时返回int
						if(strlen(Response->szCash) >0)
							TUString::StrUtf8ToStrUnicode(pszCash, (const Char *)Response->szCash);
						else
							TUString::StrIToA(pszCash, Response->cash);
						Int32 nCashId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCash = static_cast<TLabel*>(GetControlPtr(nCashId));
						TRectangle Rc_Cash(80, ItemHeight, 150, 20);
						pCash->SetBounds(&Rc_Cash);
						objFontType = pCash->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCash->SetFont(objFontType);
						pCash->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_RED);
						pCash->SetCaption(pszCash,FALSE);
						pCash->GetBounds(&Rc_Temp);
						pCash->GetBounds(&Rc_Temp);
						ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

						//技能
						Int32 nSkilllabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pSkilllabel = static_cast<TLabel*>(GetControlPtr(nSkilllabelId));
						TRectangle Rc_Skilllabel(OFFSET_X, ItemHeight, 45, 20);
						pSkilllabel->SetBounds(&Rc_Skilllabel);
						objFontType = pSkilllabel->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pSkilllabel->SetFont(objFontType); 
						pSkilllabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Skill),FALSE);

						TUString::StrIToA(pszSkill, Response->ranktip);
						Int32 nSkillId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pSkill = static_cast<TLabel*>(GetControlPtr(nSkillId));
						TRectangle Rc_Skill(80, ItemHeight, 150, 20);
						pSkill->SetBounds(&Rc_Skill);
						objFontType = pSkill->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pSkill->SetFont(objFontType); 
						pSkill->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_GREEN);
						pSkill->SetCaption(pszSkill,FALSE);
						pSkill->GetBounds(&Rc_Temp);
						ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

						Int32 nCharmlabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCharmlabel = static_cast<TLabel*>(GetControlPtr(nCharmlabelId));
						TRectangle Rc_Charmlabel(OFFSET_X, ItemHeight, 45, 20);
						pCharmlabel->SetBounds(&Rc_Charmlabel);
						objFontType = pCharmlabel->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCharmlabel->SetFont(objFontType); 
						pCharmlabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Charm),FALSE);

						TUString::StrIToA(pszCharm, Response->tcharms);
						Int32 nCharmId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCharm = static_cast<TLabel*>(GetControlPtr(nCharmId));
						TRectangle Rc_Charm(80, ItemHeight, 150, 20);
						pCharm->SetBounds(&Rc_Charm);
						objFontType = pCharm->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCharm->SetFont(objFontType); 
						pCharm->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_LIGHT_PURPLE);
						pCharm->SetCaption(pszCharm,FALSE);
						pCharm->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
						lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );	
					}

					// 详情
					nDetailItems = Response->nNum;
					for( nIndex = 0; nIndex < nDetailItems; nIndex++)
					{
						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							TFont objFontType;
							TUChar pszName[32] = {0};
							TUChar pszSharedName[32] = {0};
							TUChar pszGrowdesc[64] = {0};
							TUChar pszGrowper[32] = {0};
							TUChar MsgInfo[128] = {0};
							TUChar pszvNum[16+1] = {0};
							Int32 ItemHeight = 0;
							Int32 IconOffset = 0;
							TRectangle rect;
							TRectangle Rc_Temp;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);

							ItemHeight = ItemHeight + rect.Y() + 15;

							if( strcmp(Response->crops[nIndex].shared,"1") == 0 )
							{
								Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 20, 5);
								TImage* pIcon = static_cast<TImage*>(GetControlPtr(nIconId));
								TRectangle Rc_Icon(OFFSET_X, ItemHeight, 15, 16);
								pIcon->SetBounds(&Rc_Icon);
								pIcon->SetBitmapByResId(APP_KA_ID_BITMAP_aixindi);
								IconOffset = 25;
							}

							TUString::StrUtf8ToStrUnicode(pszName, (const Char *)Response->crops[nIndex].name);
							TUString::StrCopy(MsgInfo, pszName);
							if( strlen(Response->crops[nIndex].sharename) > 0 )
							{
								TUString::StrCat(MsgInfo, TUSTR_Kx_Left_Parenthesis);
								TUString::StrUtf8ToStrUnicode(pszSharedName, (const Char *)Response->crops[nIndex].sharename);
								TUString::StrCat(MsgInfo, pszSharedName);
								TUString::StrCat(MsgInfo, TUSTR_Kx_Right_Parenthesis);
							}

							TUString::StrCat(MsgInfo,TUSTR_Kx_Colon);
							TUString::StrUtf8ToStrUnicode(pszGrowper, (const Char *)Response->crops[nIndex].growper);
							TUString::StrCat(MsgInfo, pszGrowper);

							Int32 nGrowperId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pGrowper = static_cast<TRichView*>(GetControlPtr(nGrowperId));
							TRectangle Rc_Growper(IconOffset + OFFSET_X, ItemHeight, 280 - IconOffset , 20);
							pGrowper->SetBounds(&Rc_Growper);
							objFontType = pGrowper->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pGrowper->SetFont(objFontType); 
							pGrowper->SetCaption(MsgInfo,FALSE);
							pGrowper->SetWordWrapAttr(TRUE);
							pGrowper->SetTransparent(TRUE);
							pGrowper->SetEnabled(FALSE);
							pGrowper->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pGrowper->SetMaxVisibleLines(pGrowper->GetLinesCount(), TRUE);
							pGrowper->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

							TUString::StrUtf8ToStrUnicode(pszGrowdesc, (const Char *)Response->crops[nIndex].growdesc);
							Int32 nInfoId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pInfo = static_cast<TRichView*>(GetControlPtr(nInfoId));
							TRectangle Rc_info(OFFSET_X, ItemHeight, 280 , 20);
							pInfo->SetBounds(&Rc_info);
							objFontType = pInfo->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pInfo->SetFont(objFontType); 
							pInfo->SetCaption(pszGrowdesc,FALSE);
							pInfo->SetWordWrapAttr(TRUE);
							pInfo->SetTransparent(TRUE);
							pInfo->SetEnabled(FALSE);
							pInfo->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pInfo->SetMaxVisibleLines(pInfo->GetLinesCount(), TRUE);
							pInfo->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

							//收获，或者犁地
							nActionId[nIndex] = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pAction = static_cast<TRichView*>(GetControlPtr(nActionId[nIndex]));
							TRectangle Rc_Action(OFFSET_X, ItemHeight, 280 , 20);
							pAction->SetBounds(&Rc_Action);
							objFontType = pAction->GetFont();
							objFontType.Create(FONT_LARGE_NAME, FONT_LARGE_NAME);
							pAction->SetFont(objFontType); 
							pAction->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_BLUE);
							pAction->SetWordWrapAttr(TRUE);
							pAction->SetTransparent(TRUE);
							pAction->SetEnabled(TRUE);
							pAction->Hide(FALSE);
							pAction->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pAction->SetMaxVisibleLines(1, TRUE);
							pAction->GetBounds(&Rc_Temp);

							if(Response->crops[nIndex].status == 2)//可收获
							{
								if(IsSelf == TRUE)
								{
									pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),FALSE);
								}
								else
								{
									if(Response->crops[nIndex].stealed == 1)//已经偷过
									{
										pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_HaveHarvest),FALSE);
										pAction->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_GRAY);//灰色								
										pAction->SetEnabled(FALSE);//不可用
									}
									else
									{
										pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Harvest),FALSE);
									}
								}
								pAction->Show(FALSE);
								ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
							}
							//API不支持播种
#if 0
							else if(Response->crops[nIndex].status == -1)
							{
								pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Planting),FALSE);
								pAction->Show(FALSE);
								ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
							}	
#endif
							lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );
						}
					}

					if(IsSelf == TRUE)
					{
						//可采摘的花园
						lpItem = lpRow->AppendItem();
						if(lpItem)	
						{
							TFont objFontType;
							Int32 ItemHeight = 0;
							TRectangle rect;
							TRectangle Rc_Temp;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);

							ItemHeight = ItemHeight + rect.Y()+ 15;

							nGardenListViewId= lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pGardenListView = static_cast<TRichView*>(GetControlPtr(nGardenListViewId));
							TRectangle Rc_GardenListView(OFFSET_X, ItemHeight, 280, 20);
							pGardenListView->SetBounds(&Rc_GardenListView);
							objFontType = pGardenListView->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pGardenListView->SetFont(objFontType); 
							pGardenListView->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_BLUE);
							pGardenListView->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_HarvestGarden),FALSE);

							pGardenListView->SetWordWrapAttr(TRUE);
							pGardenListView->SetTransparent(TRUE);
							pGardenListView->SetEnabled(TRUE);
							pGardenListView->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pGardenListView->SetMaxVisibleLines(1, TRUE);	

							pGardenListView->GetBounds(&Rc_Temp);						

							ItemHeight = ItemHeight + Rc_Temp.Height() + 10;					
							lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );	
						}
					}
					else
					{
						//返回我的花园
						lpItem = lpRow->AppendItem();
						if(lpItem)	
						{
							TFont objFontType;
							Int32 ItemHeight = 0;
							TRectangle rect;
							TRectangle Rc_Temp;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);

							ItemHeight = ItemHeight + rect.Y()+ 15;

							nMyGardenViewId= lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pMyGardenView = static_cast<TRichView*>(GetControlPtr(nMyGardenViewId));
							TRectangle Rc_MyGardenView(OFFSET_X, ItemHeight, 280, 20);
							pMyGardenView->SetBounds(&Rc_MyGardenView);
							objFontType = pMyGardenView->GetFont();
							objFontType.Create(FONT_LARGE_NAME, FONT_LARGE_NAME);
							pMyGardenView->SetFont(objFontType); 
							pMyGardenView->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_BLUE);
							pMyGardenView->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_BackToMyGarden),FALSE);

							pMyGardenView->SetWordWrapAttr(TRUE);
							pMyGardenView->SetTransparent(TRUE);
							pMyGardenView->SetEnabled(TRUE);
							pMyGardenView->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pMyGardenView->SetMaxVisibleLines(1, TRUE);	

							pMyGardenView->GetBounds(&Rc_Temp);						

							ItemHeight = ItemHeight + Rc_Temp.Height() + 10;					
							lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );	
						}
					}

				}

				//:TODO:Add subject info

				lpRowList->BeginUpdate();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate(); 

				//add Item
				if(lpRow)
				{
					//nothing to do					
				}
			}
		}
	}
	return TRUE;
}

Int32 TGardenDetailForm::_SetFormTilte(TApplication * pApp)
{
	int iRet = eFailed;
	TUChar pszCaption[64] = {0};
	TUChar pszName[32];
	char* szFuid = NULL;		

	szFuid = (char*)malloc(32);
	memset(szFuid, 0, sizeof(32));

	Get_Url_Params(KX_GardenDetail, "fuid", &szFuid);

	if(strlen(szFuid)==0)
	{
		TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else
	{
		Int32 Fuid = 0, i = 0;
		TUChar TUCharFuid[32];
		tResponseGetUserInfos* Response = NULL;
		TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)szFuid);
		Fuid = TUString::StrAToI(TUCharFuid);
		iRet = KaiXinAPI_JsonParse(KX_GetUserInfos, (void **)&Response);
		if(iRet == eSucceed)
		{
			for(i = 0; i<Response->nSize_friends; i++)
			{
				if((Int32)Response->friends[i].fuid == Fuid)
				{
					TUString::StrUtf8ToStrUnicode(pszName , (const Char *)Response->friends[i].fname);
					TUString::StrCat (pszCaption, pszName);
					break;
				}
			}
			if(i >= Response->nSize_friends)
			{
				TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
			}
			delete Response;
		}
		else
		{
			TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
		}
	}
	TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_SGarden));
	this->SetTitleEx(pszCaption, TRUE);
	free(szFuid);
	return iRet;
}

// 关闭窗口时，保存设置信息
Boolean TGardenDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TGardenDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	Int32 nCtrlID = pEvent->sParam1;

	if(m_BackBtn == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}
	else if(nGardenListViewId == nCtrlID)
	{
		KaiXinAPICommon_Download(KX_GardenList, this->GetWindowHwndId());
		bHandled = TRUE; 		
		return bHandled;
	}
	else if(nMyGardenViewId == nCtrlID)
	{
		Set_Url_Params(KX_GardenDetail, "fuid", "");
		KaiXinAPICommon_Download(KX_GardenDetail, this->GetWindowHwndId());
		bHandled = TRUE;
		return bHandled;
	}

	for( int nIndex = 0; nIndex < nDetailItems; nIndex++)
	{
		if(nActionId[nIndex] == nCtrlID)
		{
			if(Response->crops[nIndex].status == 2)//可收获
			{
				TUChar szFarmnum[32]={0};
				Char	sFarmnum[32]={0};

				TUString::StrIToA(szFarmnum, Response->crops[nIndex].farmnum);
				TUString::StrUnicodeToStrUtf8(sFarmnum, szFarmnum);

				Set_Url_Params(KX_GardenHarvest, "farmnum", (char*)sFarmnum);
				if(IsSelf == TRUE)
				{
					Set_Url_Params(KX_GardenHarvest, "fuid", KaiXinUserInfo.uid);//收获自己的
				}
				else
				{
					Set_Url_Params(KX_GardenHarvest, "fuid", Fuid);//偷别人的
				}

				KaiXinAPICommon_Download(KX_GardenHarvest, this->GetWindowHwndId());
				bHandled = TRUE;
			}
			else
			{

			}
		}
	}

	return bHandled;
}
