/*!
* \file	 KaiXinApp_GetUserInfos.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 获取用户信息
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"


#if(LCD_SIZE == LCD_HVGA )
#define FUNCTION_H	(187)

#define FUNCTION_CAPTION_Y		(38)

#define FUNCTION_BUTTON_X		(10)
#define FUNCTION_BUTTON_Y		(SCR_H - STATUSBAR_H - FUNCTION_H)
#define FUNCTION_BUTTON_W		(100)
#define FUNCTION_BUTTON_H		(60)

#elif(LCD_SIZE == LCD_WVGA )
#define FUNCTION_H	(281)

#define FUNCTION_CAPTION_Y		(60)

#define FUNCTION_BUTTON_X		(10)
#define FUNCTION_BUTTON_Y		(SCR_H - STATUSBAR_H - FUNCTION_H)
#define FUNCTION_BUTTON_W		(150)
#define FUNCTION_BUTTON_H		(90)

#endif

void* KaiXinAPI_GetUserInfos_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGetUserInfos*  Response = new tResponseGetUserInfos;
	memset(Response, 0 , sizeof(tResponseGetUserInfos));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "friends");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_friends = nSize1;
			if( nSize1 != 0 )
			{
				Response->friends = NULL;
				Response->friends = (GetUserInfos_friends*) malloc(sizeof( GetUserInfos_friends ) * nSize1 );
				memset(Response->friends, 0 , sizeof(GetUserInfos_friends) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf( Response->friends[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->friends[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "gender");
				if(pTemp1)
				{
					Response->friends[i].gender = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "online");
				if(pTemp1)
				{
					Response->friends[i].online = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "py");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->friends[i].nSize_py = nSize2;
					if( nSize2 != 0 )
					{
						Response->friends[i].py = NULL;
						Response->friends[i].py = (GetUserInfos_py*) malloc(sizeof( GetUserInfos_py ) * nSize2 );
						memset(Response->friends[i].py, 0 , sizeof(GetUserInfos_py) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "py");
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].py[j].py, pTemp2->valuestring);
						}

					}
				}				pTemp1 = cJSON_GetObjectItem(Item1, "fpy");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->friends[i].nSize_fpy = nSize2;
					if( nSize2 != 0 )
					{
						Response->friends[i].fpy = NULL;
						Response->friends[i].fpy = (GetUserInfos_fpy*) malloc(sizeof( GetUserInfos_fpy ) * nSize2 );
						memset(Response->friends[i].fpy, 0 , sizeof(GetUserInfos_fpy) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "fpy");
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].fpy[j].fpy, pTemp2->valuestring);
						}

					}
				}				pTemp1 = cJSON_GetObjectItem(Item1, "birthday");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].birthday, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "birthdaynew");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].birthdaynew, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "stateid");
				if(pTemp1)
				{
					Response->friends[i].stateid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "state");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].state, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "statetime");
				if(pTemp1)
				{
					Response->friends[i].statetime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo90");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].flogo90, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "city");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].city, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "hometown");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].hometown, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "interest");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].interest, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "mobile");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].mobile, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "tel");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].tel, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "qq");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].qq, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "msn");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].msn, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "address");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].address, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "zip");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].zip, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "email");
				if(pTemp1)
				{
					STRCPY_Ex(Response->friends[i].email, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "education");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->friends[i].nSize_education = nSize2;
					if( nSize2 != 0 )
					{
						Response->friends[i].education = NULL;
						Response->friends[i].education = (GetUserInfos_education*) malloc(sizeof( GetUserInfos_education ) * nSize2 );
						memset(Response->friends[i].education, 0 , sizeof(GetUserInfos_education) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "school");
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].education[j].school, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "class");
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].education[j].classEx, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "year");
						if(pTemp2)
						{
							//Response->friends[i].education[j].year = pTemp2->valueint;
							STRCPY_Ex(Response->friends[i].education[j].year, pTemp2->valuestring);
						}

					}
				}				pTemp1 = cJSON_GetObjectItem(Item1, "career");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->friends[i].nSize_career = nSize2;
					if( nSize2 != 0 )
					{
						Response->friends[i].career = NULL;
						Response->friends[i].career = (GetUserInfos_career*) malloc(sizeof( GetUserInfos_career ) * nSize2 );
						memset(Response->friends[i].career, 0 , sizeof(GetUserInfos_career) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "company");
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].career[j].company, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "dept");
						if(pTemp2)
						{
							STRCPY_Ex(Response->friends[i].career[j].dept, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "beginyear");
						if(pTemp2)
						{
							//Response->friends[i].career[j].beginyear = pTemp2->valueint;
							STRCPY_Ex(Response->friends[i].career[j].beginyear, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "beginmonth");
						if(pTemp2)
						{
							//Response->friends[i].career[j].beginmonth = pTemp2->valueint;
							STRCPY_Ex(Response->friends[i].career[j].beginmonth, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "endyear");
						if(pTemp2)
						{
							//Response->friends[i].career[j].endyear = pTemp2->valueint;
							STRCPY_Ex(Response->friends[i].career[j].endyear, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "endmonth");
						if(pTemp2)
						{
							//Response->friends[i].career[j].endmonth = pTemp2->valueint;
							STRCPY_Ex(Response->friends[i].career[j].endmonth, pTemp2->valuestring);
						}

					}
				}
			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

//创建标题Label
int TGetUserInfosForm::SetTilteLabel(TApplication * pApp, TUChar* pszTitleLabel, Int32 nResId)
{
	TCtrl *m_TitleContrl;
	Int32 m_TitleCtlID;
	TRectangle obBtnRec(0,0,0,0);	
	const TUChar* pszTitle = new TUChar[64 + 1];
	//获取要显示的标题文本
	if(pszTitleLabel != NULL)
	{
		TUString::StrNCopy((TUChar *)pszTitle, pszTitleLabel, 64);
	}
	else if(nResId != 0)
	{
		TUString::StrNCopy((TUChar *)pszTitle, TResource::LoadConstString(nResId), 64);
	}
	else
	{
		delete pszTitle;
		return eFailed;
	}

	//计算位置
	Coord X, Y, Width, Height;
	GetTitleLabelRect(pszTitle, &X, &Y, &Width, &Height );

	//创建Label	
	m_TitleContrl = new TLabel;		
	obBtnRec.SetRect(X, Y, Width, Height);
	if(m_TitleContrl->Create(this))
	{		
		m_TitleContrl->SetBounds(&obBtnRec);	
		m_TitleCtlID = m_TitleContrl->GetId();	
		m_TitleContrl->SetCaption(pszTitle, FALSE);
		//自适应文字大小
		((TLabel*)m_TitleContrl)->SetAutoSize(TRUE);
		m_TitleContrl->SetEnabled(FALSE);
		m_TitleContrl->Show(TRUE);		
	}

	delete pszTitle;
	return eSucceed;
}

// 构造函数
TGetUserInfosForm::TGetUserInfosForm(TApplication* pApp):TWindow(pApp)
{
	memset(gFuid, 0, sizeof(gFuid));
	memset(gFname, 0, sizeof(gFname));	
	pPhotoBmp = NULL;
	Create(APP_KA_ID_GetUserInfos_Form);
}

// 析构函数
TGetUserInfosForm::~TGetUserInfosForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if(pPhotoBmp != NULL)
	{
		pPhotoBmp->Destroy();
		pPhotoBmp = NULL;
	}
}

// 窗口事件处理
Boolean TGetUserInfosForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_function_bg), 0, (SCR_H - STATUSBAR_H - FUNCTION_H), SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}

		//下载进度消息
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
			break;
		}

		//下载完成消息
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					if(pPhotoBmp != NULL)
					{
						pPhotoBmp->Destroy();
						pPhotoBmp = NULL;
					}
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);
					if(pDownLoadBitmap)
					{
						TMaskButton* pUserHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_UserHeadMaskButton));
						TRectangle rc;

						pUserHeadMBtn->GetBounds(&rc);

						pPhotoBmp = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
						pPhotoBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
						
						pUserHeadMBtn->SetImage(pPhotoBmp,(rc.Width()-pPhotoBmp->GetWidth())/2, (rc.Height()-pPhotoBmp->GetHeight())/2);
						pUserHeadMBtn->Draw();

						//释放图片
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL; 							
					}
					break;
				}
				//到这里已经是success的了,fail的情况在app_kaixin.c中已经过滤
			case KX_SendAMessage:
				{
					pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_SendMessage),WMB_OK);
					break;
				}

			case KX_PostComment:
				{
					pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);
					break;
				}
			case KX_GetFriendCount:
			case KX_GetAlbumCount:
			case KX_GetDiaryCount:
			case KX_GetRepasteCount:
			case KX_GetRecordCount: 					
				{
					this->_SetCountToCtrls(pApp, notifyData.nAccessType);
					break;
				}
			case KX_PokesList: 					
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_PokesList))
					{				
						PokeUserData UserData;
						MemSet(&UserData, 0, sizeof(PokeUserData));

						STRCPY_Ex(UserData.uid, gFuid);
						TUString::StrUtf8ToStrUnicode(UserData.name , (const Char *)gFname);

						TPokeListForm *pPokeListForm = new TPokeListForm( pApp, UserData);
					}
					break;
				}		
			case KX_SendBirthdayGift:
				{
					int iRet = eFailed;
					tResponseSendBirthdayGift* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_SendBirthdayGift, (void **)&Response);
					if(Response->ret == 1)
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_SendGift),WMB_OK);
					}
					else
					{
						if(strlen(Response->ErrorInfo)>0)
						{
							TUChar pszError[128] = {0};
							TUString::StrUtf8ToStrUnicode(pszError, (const Char*)Response->ErrorInfo);							
							pApp->MessageBox(pszError,TResource::LoadConstString(APP_KA_ID_STRING_SendGift),WMB_OK);
						}
						else
							pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_SendGift),WMB_OK);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;				
			default:
				break;
			}

			bHandled = TRUE;
			break;			
		}
		//
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			switch(notifyData.nEditType)
			{
			case NewMessageEdit:
				{		
					Set_Url_Params(KX_SendAMessage, "touid", (char*)gFuid);									
					Set_Url_Params(KX_SendAMessage, "msgcont", notifyData.PostMsgData.messagedata.pszMsgContent);	

					KaiXinAPICommon_Download(KX_SendAMessage, this->GetWindowHwndId());
					break;
				}			

			case NewUserCommentEdit:
				{						
					Set_Url_Params(KX_PostComment, "type", "0");	
					Set_Url_Params(KX_PostComment, "id",  (char*)gFuid);					
					Set_Url_Params(KX_PostComment, "ouid",  (char*)gFuid);
					if(notifyData.PostMsgData.commentdata.nHidden == 1)
						Set_Url_Params(KX_PostComment, "hidden", "1");
					else
						Set_Url_Params(KX_PostComment, "hidden", "0");

					Set_Url_Params(KX_PostComment, "content", notifyData.PostMsgData.commentdata.pszCommentContent);		
					KaiXinAPICommon_Download(KX_PostComment, this->GetWindowHwndId());
				}
			default:
				break;

			}

			bHandled = TRUE;
		}
		break;		

	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break; 

	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TGetUserInfosForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet =0;
	TUChar pszString[1024] = {0};
	TUChar szDateTime[32] = {0};
	TUChar pszID[64] = {0};	
	TFont tFont;
	tResponseGetUserInfos* Response = NULL;

	iRet = KaiXinAPI_JsonParse(KX_GetUserInfos, (void **)&Response);
	//如果返回的个数为空,直接退出
	if(Response->nSize_friends <=0)
	{
		delete Response;
		pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_DownLoadError),TResource::LoadConstString(APP_KA_ID_STRING_DownLoadError),WMB_OK);
		pApp->CloseWindowByHwndId(this->GetWindowHwndId());
		return FALSE;
	}

	//保存fname
	STRCPY_Ex(gFname , Response->friends[0].fname);

	//保存fuid
	STRCPY_Ex(gFuid, Response->friends[0].fuid);

	//下载数量
	_DownloadCountJason();

#if 0
	TButton* pTPhotoBtn = static_cast<TButton*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Button_Photo));				

	TButton* pTDiaryBtn = static_cast<TButton*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Button_Diary));				

	TButton* pTRepasteBtn = static_cast<TButton*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Button_Repaste));				

	TButton* pTRecordBtn = static_cast<TButton*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Button_Record)); 
#endif

	//name
	TLabel* pNameLabel = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Label_Name));
	TMaskButton* pUserHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_UserHeadMaskButton));
	TUString::StrUtf8ToStrUnicode(pszString , (const Char *)gFname);
	pNameLabel->SetCaption(pszString, FALSE);
	tFont.Create(FONT_NAME,FONT_NAME);
	pNameLabel->SetFont(tFont);
	pNameLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB(67, 67, 135));

	TBitmap* pDownLoadBitmap = NULL;
	//Photo, 先读取磁盘cache
	pDownLoadBitmap = LoadImgByUrl(Response->friends[0].flogo90);
	//磁盘cache无文件,再下载
	if( pDownLoadBitmap == NULL)
	{
		TRectangle rc;

		KaiXinAPICommon_DownloadPhoto(Response->friends[0].flogo90, this->GetWindowHwndId(), 0 );	
		const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
		pUserHeadMBtn->GetBounds(&rc);
		pUserHeadMBtn->SetEnabled(FALSE);
		pUserHeadMBtn->SetCaption(TUSTR_Kx_NULL,0,0);
		pUserHeadMBtn->SetImage(pBmp,(rc.Width()-pBmp->GetWidth())/2, (rc.Height()-pBmp->GetHeight())/2);			
	}
	else
	{
		TRectangle rc;				
		pUserHeadMBtn->GetBounds(&rc);
		pUserHeadMBtn->SetEnabled(FALSE);
		pUserHeadMBtn->SetCaption(TUSTR_Kx_NULL,0,0);

		pPhotoBmp = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
		pPhotoBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));		
		pUserHeadMBtn->SetImage(pPhotoBmp,(rc.Width()-pPhotoBmp->GetWidth())/2, (rc.Height()-pPhotoBmp->GetHeight())/2);			

		//释放图片
		pDownLoadBitmap->Destroy();
		pDownLoadBitmap = NULL; 	
	}

	//uid
	char pszTemp[64] = {0};
	sprintf(pszTemp, "ID:%s",gFuid);
	TUString::StrUtf8ToStrUnicode(pszString , (const Char *)pszTemp);
	TLabel* pUidLabel = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Label_Info));
	pUidLabel->SetCaption(pszString, FALSE);
	tFont.Create(FONT_OTHER_INFO,FONT_OTHER_INFO);
	pUidLabel->SetFont(tFont);


	//Status
	#if 0
	if(strlen(Response->friends[0].state) > 0)
	{
		TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->friends[0].state);
		TRichView* pPageTitlelbl = static_cast<TRichView*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Field_Status));
		pPageTitlelbl->SetCaption(pszString, FALSE);
		tFont.Create(FONT_STATE,FONT_STATE);
		pPageTitlelbl->SetFont(tFont);
		pPageTitlelbl->SetEnabled(FALSE);
	}
	#endif	
	//用户状态
	TPanel*pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Panel_Status));
	TRichView* pRichView = new TRichView();
	Int32 nRichViewId = 0;
	if(pRichView->Create(pPanel))	
	{
		TRectangle obBtnRec(0,0,0,0);
		pPanel->GetBounds(&obBtnRec);
		obBtnRec.SetX(0);
		obBtnRec.SetY(0);
		pRichView->SetBounds(&obBtnRec);
	
		TUString::StrUtf8ToStrUnicode(pszString , (const Char *)Response->friends[0].state);
		tFont = pRichView->GetFont();
		tFont.Create(FONT_STATE, FONT_STATE);
		pRichView->SetFont(tFont);
		pRichView->SetCaption(pszString,FALSE);

		pRichView->SetEnabled(FALSE);
		pRichView->SetWordWrapAttr(TRUE);
		pRichView->SetTransparent(TRUE);
		pRichView->SetScrollBarMode(CTL_SCL_MODE_NONE);
		pRichView->SetUnderLine(TRUE);
		Int32 nLineCount =  pRichView->GetLinesCount();
		if(nLineCount <7)
			nLineCount = 7;
	
		pRichView->SetMaxVisibleLines(nLineCount, TRUE);
	}		

	//State Time 
	TLabel* pStateDateTimelbl = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_UserStateTime));
	tFont.Create(FONT_OTHER_INFO,FONT_OTHER_INFO);
	pStateDateTimelbl->SetFont(tFont);
	pStateDateTimelbl->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);

	if(strlen(Response->friends[0].state) > 0)
	{
		TUChar* pszDateTime = NULL;
		cUnixTime_ConvertUnixTimeToFormatString( Response->friends[0].statetime, KX_TIME_FORMAT_YY_MM_DD, &pszDateTime );
		if(pszDateTime != NULL)
		{
			TUString::StrCat(szDateTime, TUSTR_Kx_Left_Parenthesis);
			TUString::StrCat(szDateTime, pszDateTime);
			TUString::StrCat(szDateTime, TUSTR_Kx_Right_Parenthesis);
		}
		if(pszDateTime != NULL)
		{
			delete pszDateTime;
			pszDateTime = NULL;
		}
	}
	else
	{
		TUString::StrCat(szDateTime, TUSTR_Kx_Left_Parenthesis);
		TUString::StrCat(szDateTime, TResource::LoadConstString(APP_KA_ID_STRING_NoState));
		TUString::StrCat(szDateTime, TUSTR_Kx_Right_Parenthesis);	
	}
	pStateDateTimelbl->SetCaption(szDateTime, FALSE);

	//Title
	TUString::StrUtf8ToStrUnicode(pszString , (const Char *)gFname);
	SetAppTilte(this,0,pszString);

	m_BackBtn = SetAppBackButton(this);
	_CreateFunctionButtons(pApp);

	delete Response;
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TGetUserInfosForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TGetUserInfosForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Int32 nCtrlID = pEvent->sParam1;
	Boolean bHandled;
	bHandled = FALSE;

	if(m_BackBtn == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(pEvent->sParam1 == m_nPhotosBtnID)//照片
	{
		Set_Url_Params(KX_AlbumList, "fuid", gFuid);			
		KaiXinAPICommon_Download(KX_AlbumList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nDiarysBtnID)//日记
	{
		Set_Url_Params(KX_DiaryList, "fuid", gFuid);			
		KaiXinAPICommon_Download(KX_DiaryList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nRecordsBtnID)//记录
	{
		Set_Url_Params(KX_RecordList, "fuid", gFuid);			
		KaiXinAPICommon_Download(KX_RecordList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nRepastesBtnID)//转帖
	{
		Set_Url_Params(KX_RepasteIndex, "fuid", gFuid);
		Set_Url_Params(KX_RepasteIndex, "lasturpid", "");
		KaiXinAPICommon_Download(KX_RepasteIndex, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nRecentNewsBtnID)//最新动态
	{
		Set_Url_Params(KX_RecentNews, "fuid", gFuid);			
		KaiXinAPICommon_Download(KX_RecentNews, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nFriendsBtnID)//他的好友
	{
		KaiXinAPICommon_Download(KX_PokesList, this->GetWindowHwndId());//暂时变为动他一下功能			
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nSendMessageBtnID)//发信息
	{
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = NewMessageEdit;
		STRCPY_Ex(in_msgData.PostMsgData.messagedata.pszToUid, gFname);

		TAppEditForm *pNewMessageEditForm = new TAppEditForm( pApp, in_msgData); 
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nWriteCommentBtnID)//写留言
	{
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = NewUserCommentEdit;
		TAppEditForm *pComment = new TAppEditForm( pApp, in_msgData); 					
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nSendGiftBtnID)//送礼物
	{
		Set_Url_Params(KX_SendBirthdayGift, "fuid", gFuid);
		Set_Url_Params(KX_SendBirthdayGift, "msg", "");
		Set_Url_Params(KX_SendBirthdayGift, "quiet", "0");
		KaiXinAPICommon_Download(KX_SendBirthdayGift, this->GetWindowHwndId());			
		bHandled = TRUE;
	}


	switch(nCtrlID)
	{
#if 0
		//照片
	case APP_KA_ID_GetUserInfos_Form_Button_Photo:
		{
			Set_Url_Params(KX_AlbumList, "fuid", gFuid);
			KaiXinAPICommon_Download(KX_AlbumList, this->GetWindowHwndId());			
			break;
		}

		///日记
	case APP_KA_ID_GetUserInfos_Form_Button_Diary:
		{
			Set_Url_Params(KX_DiaryList, "fuid", gFuid);
			KaiXinAPICommon_Download(KX_DiaryList, this->GetWindowHwndId());			
			break;
		}

		/*"转帖"*/
	case APP_KA_ID_GetUserInfos_Form_Button_Repaste:
		{
			Set_Url_Params(KX_RepasteIndex, "fuid", gFuid);
			KaiXinAPICommon_Download(KX_RepasteIndex, this->GetWindowHwndId());			
			break;
		}
		/*"记录"*/
	case APP_KA_ID_GetUserInfos_Form_Button_Record:
		{
			Set_Url_Params(KX_RecordList, "fuid", gFuid);
			KaiXinAPICommon_Download(KX_RecordList, this->GetWindowHwndId());			
			break;
		}

		/*"最新动态"*/
	case APP_KA_ID_GetUserInfos_Form_Button_News:
		{
			Set_Url_Params(KX_RecentNews, "fuid", gFuid);			
			KaiXinAPICommon_Download(KX_RecentNews, this->GetWindowHwndId());
			break;
		}

		/*"他的好友"*/
	case APP_KA_ID_GetUserInfos_Form_Button_Friends:
		{
			KaiXinAPICommon_Download(KX_PokesList, this->GetWindowHwndId());			
			break;
		}
		/*"发消息"*/
	case APP_KA_ID_GetUserInfos_Form_Button_SendMsg:
		{
			PostNotifyMsgDataType in_msgData;
			MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

			in_msgData.nCtrlId = 0;
			in_msgData.nHwndId = this->GetWindowHwndId();
			in_msgData.nEditType = NewMessageEdit;
			STRCPY_Ex(in_msgData.PostMsgData.messagedata.pszToUid, gFname);

			TAppEditForm *pNewMessageEditForm = new TAppEditForm( pApp, in_msgData); 
			break;
		}
		/*"留言"*/
	case APP_KA_ID_GetUserInfos_Form_Button_Commnet:
		{
			PostNotifyMsgDataType in_msgData;
			MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

			in_msgData.nCtrlId = 0;
			in_msgData.nHwndId = this->GetWindowHwndId();
			in_msgData.nEditType = NewUserCommentEdit;
			TAppEditForm *pComment = new TAppEditForm( pApp, in_msgData); 					
			break;
		}
		/*"送礼物"*/
	case APP_KA_ID_GetUserInfos_Form_Button_Gift:
		{
			break;
		}
#endif
	case  APP_KA_ID_GetUserInfos_Form_InfoCard:
		{
			TUserInfoDetailForm *pInfoDetail = new TUserInfoDetailForm(pApp);
			break;
		}

	default:
		break;
	}
	return bHandled;
}

void TGetUserInfosForm::_DownloadCountJason()
{

	//KaiXinAPICommon_Download(KX_GetFriendCount, this->GetWindowHwndId());//暂无好友的好友接口

	Set_Url_Params(KX_GetAlbumCount, "fuid", (char*)gFuid);	
	KaiXinAPICommon_Download(KX_GetAlbumCount, this->GetWindowHwndId());

	Set_Url_Params(KX_GetDiaryCount, "fuid", (char*)gFuid);	
	KaiXinAPICommon_Download(KX_GetDiaryCount, this->GetWindowHwndId());

	Set_Url_Params(KX_GetRepasteCount, "fuid", (char*)gFuid);	
	KaiXinAPICommon_Download(KX_GetRepasteCount, this->GetWindowHwndId());

	Set_Url_Params(KX_GetRecordCount, "fuid", (char*)gFuid);		
	KaiXinAPICommon_Download(KX_GetRecordCount, this->GetWindowHwndId());	
}

void TGetUserInfosForm::_SetCountToCtrls(TApplication* pApp, Int32 accessType)
{
	TUChar pszCaption[64] = {0};
	TUChar pszCount[32] = {0};
	Int32 CaptionX = 0;
	TFont tFont;	

	tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);

	switch(accessType)
	{
	case KX_GetFriendCount:
		{
			int iRet = eFailed;
			tResponseGetFriendCount* ResponseGetFriendCount = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetFriendCount, (void **)&ResponseGetFriendCount);	

			if(ResponseGetFriendCount != NULL)
			{
				TLabel *pTCtrl = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_GetUserInfos_Form_Label_Info));				
				TUString::StrIToA(pszCount,ResponseGetFriendCount->total);
				if(pTCtrl)
				{
					TUString::StrCopy(pszCaption, pTCtrl->GetCaption());
					TUString::StrCat(pszCaption, TUSTR_Kx_Empty_Cell);					
					TUString::StrCat(pszCaption, pszCount);
					pTCtrl->SetCaption(pszCaption,FALSE);
				}
				delete ResponseGetFriendCount;
				ResponseGetFriendCount = NULL;
			}

			break;
		}
	case KX_GetAlbumCount:
		{

			int iRet = eFailed;
			tResponseGetAlbumCount* ResponseGetAlbumCount = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetAlbumCount, (void **)&ResponseGetAlbumCount);	

			if(ResponseGetAlbumCount != NULL)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nPhotosBtnID));				
				//TUString::StrIToA(pszCount,ResponseGetAlbumCount->n);//这里应该是总的照片数，而非专辑数
				int nTotalPhoto = 0;
				TUChar pszTemp[16] = {0};
				for(int i = 0; i < ResponseGetAlbumCount->nSize_albums; i++)
				{
					//头像照(id=0, albumid=""),暂时不支持,直接跳过
					if(strcmp(ResponseGetAlbumCount->albums[i].albumid, "0") == 0)
					{
						continue;
					}			
					
					TUString::StrUtf8ToStrUnicode(pszTemp, (Char*)ResponseGetAlbumCount->albums[i].picnum);
					nTotalPhoto = nTotalPhoto + TUString::StrAToI(pszTemp);
				}
				TUString::StrIToA(pszCount,nTotalPhoto);
				if(pTCtrl)
				{
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_PhotosNum),pszCount);		
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					if(nTotalPhoto != 0)
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete ResponseGetAlbumCount;
				ResponseGetAlbumCount = NULL;
			}				

			break;
		}			
	case KX_GetDiaryCount: 
		{
			int iRet = eFailed;
			tResponseGetDiaryCount* ResponseGetDiaryCount = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetDiaryCount, (void **)&ResponseGetDiaryCount);	

			if(ResponseGetDiaryCount != NULL)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nDiarysBtnID));				
				//TUString::StrIToA(pszCount,ResponseGetDiaryCount->total);
				TUString::StrUtf8ToStrUnicode(pszCount,(Char*)ResponseGetDiaryCount->total);
				if(pTCtrl)
				{
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_DiarysNum),pszCount);
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					if(strcmp(ResponseGetDiaryCount->total, "0") != 0)
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete ResponseGetDiaryCount;
				ResponseGetDiaryCount = NULL;
			}

			break;
		}			
	case KX_GetRepasteCount:
		{
			int iRet = eFailed;
			tResponseGetRepasteCount* ResponseGetRepasteCount = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetRepasteCount, (void **)&ResponseGetRepasteCount);	

			if(ResponseGetRepasteCount != NULL)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nRepastesBtnID));
				TUString::StrUtf8ToStrUnicode(pszCount,(Char*)ResponseGetRepasteCount->total);
				
				if(pTCtrl)
				{
					//TUString::StrCopy(pszCaption, pTCtrl->GetCaption());
					//TUString::StrCat(pszCaption, TUSTR_Kx_Left_Parenthesis);
					//TUString::StrCat(pszCaption, pszCount);
					//TUString::StrCat(pszCaption, TUSTR_Kx_Right_Parenthesis);
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_RepasteNum),pszCount);						
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					
					if(strcmp(ResponseGetRepasteCount->total, "0") != 0)
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete ResponseGetRepasteCount;
				ResponseGetRepasteCount = NULL;
			}

			break;
		}
	case KX_GetRecordCount: 					
		{
			int iRet = eFailed;
			tResponseGetRecordCount* ResponseGetRecordCount = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetRecordCount, (void **)&ResponseGetRecordCount); 

			if(ResponseGetRecordCount != NULL)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nRecordsBtnID));				
				TUString::StrUtf8ToStrUnicode(pszCount,(Char*)ResponseGetRecordCount->total);
				if(pTCtrl)
				{
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_RecordNum),pszCount);
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					if(strcmp(ResponseGetRecordCount->total, "0") != 0)
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete ResponseGetRecordCount;
				ResponseGetRecordCount = NULL;
			}

			break;
		}
	default:
		break;
	}

}

//创建创建主页功能按钮，必须有9个成员变量来保存ButtonID, 
/*
Int32 m_nPhotosBtnID;//照片
Int32 m_nDiarysBtnID;//日记
Int32 m_nRecordsBtnID;//记录
Int32 m_nRepastesBtnID;//转帖
Int32 m_nRecentNewsBtnID;//最新动态
Int32 m_nFriendsBtnID;//他的好友
Int32 m_nSendMessageBtnID;//发信息
Int32 m_nWriteCommentBtnID;//写留言
Int32 m_nSendGiftBtnID;//送礼物
*/

Int32 TGetUserInfosForm::_CreateFunctionButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(6,224,308,187); //初始(left, top, w, h)
	TFont tFont;	
	Int32 CaptionX = 0;
	
	tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);

	//use to function buttons ID
	m_nPhotosBtnID = 0;//照片
	m_nDiarysBtnID = 0;//日记
	m_nRecordsBtnID = 0;//记录
	m_nRepastesBtnID = 0;//转帖
	m_nRecentNewsBtnID = 0;//最新动态
	m_nFriendsBtnID = 0;//他的好友
	m_nSendMessageBtnID = 0;//发信息
	m_nWriteCommentBtnID = 0;//写留言
	m_nSendGiftBtnID = 0;//送礼物

	const TBitmap * pImgBg = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_function_btn_bg);


	const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_photos);
	const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_photos_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X, FUNCTION_BUTTON_Y, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pPhotosBtn =new TMaskButton;
	if(pPhotosBtn->Create(this))
	{
		pPhotosBtn->SetBounds(&obBtnRec); 	
		m_nPhotosBtnID = pPhotosBtn->GetId();//save button ID
		//pPhotosBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pPhotosBtn->SetImage(pImgNormal,(FUNCTION_BUTTON_W-pImgNormal->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal->GetHeight())/2 - 10); 
		pPhotosBtn->SetSelImage(pImgDown,(FUNCTION_BUTTON_W-pImgDown->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Photo), tFont))/2;		
		pPhotosBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Photo), CaptionX, FUNCTION_CAPTION_Y);
		pPhotosBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pPhotosBtn->SetFont(tFont);
		pPhotosBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_diarys);
	const TBitmap * pImgDown1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_diarys_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W, FUNCTION_BUTTON_Y, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pDiarysBtn =new TMaskButton;
	if(pDiarysBtn->Create(this))
	{
		pDiarysBtn->SetBounds(&obBtnRec); 	
		m_nDiarysBtnID = pDiarysBtn->GetId();//save button ID
		//pDiarysBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pDiarysBtn->SetImage(pImgNormal1,(FUNCTION_BUTTON_W-pImgNormal1->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal1->GetHeight())/2 - 10); 
		pDiarysBtn->SetSelImage(pImgDown1,(FUNCTION_BUTTON_W-pImgDown1->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown1->GetHeight())/2 - 10);
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Diary), tFont))/2;	
		pDiarysBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Diary), CaptionX, FUNCTION_CAPTION_Y);
		pDiarysBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pDiarysBtn->SetFont(tFont);
		pDiarysBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}


	const TBitmap * pImgNormal2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_records);
	const TBitmap * pImgDown2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_records_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W*2, FUNCTION_BUTTON_Y, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pRecordsBtn =new TMaskButton;
	if(pRecordsBtn->Create(this))
	{
		pRecordsBtn->SetBounds(&obBtnRec); 	
		m_nRecordsBtnID = pRecordsBtn->GetId();//save button ID
		//pRecordsBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pRecordsBtn->SetImage(pImgNormal2,(FUNCTION_BUTTON_W-pImgNormal2->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal2->GetHeight())/2 - 10); 
		pRecordsBtn->SetSelImage(pImgDown2,(FUNCTION_BUTTON_W-pImgDown2->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown2->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Record), tFont))/2;	
		pRecordsBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Record), CaptionX, FUNCTION_CAPTION_Y);
		pRecordsBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pRecordsBtn->SetFont(tFont);
		pRecordsBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repastes);
	const TBitmap * pImgDown3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repastes_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pRepastesBtn =new TMaskButton;
	if(pRepastesBtn->Create(this))
	{
		pRepastesBtn->SetBounds(&obBtnRec); 	
		m_nRepastesBtnID = pRepastesBtn->GetId();//save button ID
		//pRepastesBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pRepastesBtn->SetImage(pImgNormal3,(FUNCTION_BUTTON_W-pImgNormal3->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal3->GetHeight())/2 - 10); 
		pRepastesBtn->SetSelImage(pImgDown3,(FUNCTION_BUTTON_W-pImgDown3->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown3->GetHeight())/2 - 10);
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Repaste), tFont))/2;
		pRepastesBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Repaste), CaptionX, FUNCTION_CAPTION_Y);
		pRepastesBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pRepastesBtn->SetFont(tFont);
		pRepastesBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_recent_news);
	const TBitmap * pImgDown4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_recent_news_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pRecentNewsBtn =new TMaskButton;
	if(pRecentNewsBtn->Create(this))
	{
		pRecentNewsBtn->SetBounds(&obBtnRec); 	
		m_nRecentNewsBtnID = pRecentNewsBtn->GetId();//save button ID
		//pRecentNewsBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pRecentNewsBtn->SetImage(pImgNormal4,(FUNCTION_BUTTON_W-pImgNormal4->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal4->GetHeight())/2 - 10); 
		pRecentNewsBtn->SetSelImage(pImgDown4,(FUNCTION_BUTTON_W-pImgDown4->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown4->GetHeight())/2 - 10);
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_RecentNews), tFont))/2;
		pRecentNewsBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_RecentNews), CaptionX, FUNCTION_CAPTION_Y);
		pRecentNewsBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pRecentNewsBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}

	//"他的好友"暂时改为"动他一下"
	const TBitmap * pImgNormal5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friends);
	const TBitmap * pImgDown5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friends_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W*2, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pFriendsBtn =new TMaskButton;
	if(pFriendsBtn->Create(this))
	{
		pFriendsBtn->SetBounds(&obBtnRec); 	
		m_nFriendsBtnID = pFriendsBtn->GetId();//save button ID
		//pFriendsBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pFriendsBtn->SetImage(pImgNormal5,(FUNCTION_BUTTON_W-pImgNormal5->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal5->GetHeight())/2 - 10); 
		pFriendsBtn->SetSelImage(pImgDown5,(FUNCTION_BUTTON_W-pImgDown5->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown5->GetHeight())/2 - 10);
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Poke), tFont))/2;
		pFriendsBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Poke), CaptionX, FUNCTION_CAPTION_Y);
		pFriendsBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pFriendsBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal6 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_send_message);
	const TBitmap * pImgDown6 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_send_message_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H*2, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pSendMessageBtn =new TMaskButton;
	if(pSendMessageBtn->Create(this))
	{
		pSendMessageBtn->SetBounds(&obBtnRec); 	
		m_nSendMessageBtnID = pSendMessageBtn->GetId();//save button ID
		//pSendMessageBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pSendMessageBtn->SetImage(pImgNormal6,(FUNCTION_BUTTON_W-pImgNormal6->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal6->GetHeight())/2 - 10); 
		pSendMessageBtn->SetSelImage(pImgDown6,(FUNCTION_BUTTON_W-pImgDown6->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown6->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_SendMessage), tFont))/2;
		pSendMessageBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SendMessage), CaptionX, FUNCTION_CAPTION_Y);
		pSendMessageBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pSendMessageBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal7 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_write_comment);
	const TBitmap * pImgDown7 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_write_comment_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H*2, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);	
	TMaskButton* pWriteCommentBtn =new TMaskButton;
	if(pWriteCommentBtn->Create(this))
	{
		pWriteCommentBtn->SetBounds(&obBtnRec); 	
		m_nWriteCommentBtnID = pWriteCommentBtn->GetId();//save button ID
		//pWriteCommentBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pWriteCommentBtn->SetImage(pImgNormal7,(FUNCTION_BUTTON_W-pImgNormal7->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal7->GetHeight())/2 - 10); 
		pWriteCommentBtn->SetSelImage(pImgDown7,(FUNCTION_BUTTON_W-pImgDown7->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown7->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_WriteComment), tFont))/2;
		pWriteCommentBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_WriteComment), CaptionX, FUNCTION_CAPTION_Y);
		pWriteCommentBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pWriteCommentBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}


	const TBitmap * pImgNormal8 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_gift);
	const TBitmap * pImgDown8 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_gift_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W*2, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H*2, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pSendGiftBtn =new TMaskButton;
	if(pSendGiftBtn->Create(this))
	{
		pSendGiftBtn->SetBounds(&obBtnRec); 	
		m_nSendGiftBtnID = pSendGiftBtn->GetId();//save button ID
		//pSendGiftBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pSendGiftBtn->SetImage(pImgNormal8,(FUNCTION_BUTTON_W-pImgNormal8->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal8->GetHeight())/2 - 10); 
		pSendGiftBtn->SetSelImage(pImgDown8,(FUNCTION_BUTTON_W-pImgDown8->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown8->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_SendGift), tFont))/2;
		pSendGiftBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SendGift), CaptionX, FUNCTION_CAPTION_Y);
		pSendGiftBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pSendGiftBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}	

	return bnRetCod;
}

