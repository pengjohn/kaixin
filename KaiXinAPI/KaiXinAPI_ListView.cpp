/*!
* \file	 KaiXinApp_ListView.cpp
* \author	 GoZone
* \date	
* \brief  UI: 增加用于显示开心网信息的界面组件
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/
//记录列表
//日记列表

#include "KaiXinAPI_ListView.h"
#include "KaiXinAPICommon.h"


#define ITEM_LINE_SPACE		(8)
#define ITEM_TITLE_FONT		(FONT_NORMAL)
#define ITEM_CONTENT_FONT	(FONT_MIDDLE)
#define ITEM_TIME_FONT		(FONT_SMALL)

#define ITEM_X				(12)
#define ITEM_W				(SCR_W - 40)

#define LISTVIEW_LINE1_Y	(ITEM_LINE_SPACE)
#define LISTVIEW_LINE2_Y	(LISTVIEW_LINE1_Y + ITEM_TITLE_FONT + ITEM_LINE_SPACE)
#define LISTVIEW_LINE3_Y	(LISTVIEW_LINE2_Y + ITEM_CONTENT_FONT + ITEM_LINE_SPACE)

#define LISTVIEW_RECORD_H	(LISTVIEW_LINE2_Y + ITEM_TIME_FONT + ITEM_LINE_SPACE*2)
#define LISTVIEW_DIARY_H	(LISTVIEW_LINE3_Y +  ITEM_TIME_FONT + ITEM_LINE_SPACE*2)


TAppListViewForm::TAppListViewForm( TApplication *pApp, AppListViewType appListViewType,Boolean bNew):TWindow(pApp)
{
	m_nCtlIDCount = 0;

	m_pDiaryListResponse = NULL; 
	m_pRepasteIndexResponse = NULL;
	m_pRecordListResponse = NULL;
	
	m_appListViewType = appListViewType;
	_LoadDataResouse(m_appListViewType);
	Create(APP_KA_ID_CommonCoolBarListForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);	
}

TAppListViewForm::~TAppListViewForm(void)
{
	_OnDataFree();
}



Boolean TAppListViewForm::EventHandler( TApplication * pApp, EventType *pEvent )
{
	Boolean bHandled = FALSE;
	switch( pEvent->eType )
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			// 处理控件点击事件或响应事件
			bHandled = _OnCtlSelectEvent( pApp, pEvent );
		}
		break;
	case EVENT_ListPreDraw:
		{
			//bHandled = _OnLstPreDrawEvent(pEvent);
		}
		break;
	case EVENT_WinPaint:
		{
			//DrawWindow();
			//bHandled = TRUE;
		}
		break;		
	case EVENT_CoolListViewCustomDraw:
		{
			//bHandled = _OnCoolListViewCustomDrawEvent(pApp, pEvent);
		}
		break;
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlSetFocusEvent(pApp, pEvent);
		}
		break;			
	case EVENT_CtrlKillFocus :
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;			
	case EVENT_WinClose:
		{
			// Do uninitialization here
		}
		break;
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;			
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));
			bHandled = TRUE;
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			//下载完成消息
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{	
			case KX_PostDiary:
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_PostDiary))
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK); 
						Set_Url_Params(KX_DiaryList, "fuid", KaiXinUserInfo.uid);			
						KaiXinAPICommon_Download(KX_DiaryList, this->GetWindowHwndId());
					}					
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					break;
				}
			case KX_WriteRecord:				
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_WriteRecord))
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK); 
						Set_Url_Params(KX_RecordList, "fuid", KaiXinUserInfo.uid);			
						KaiXinAPICommon_Download(KX_RecordList, this->GetWindowHwndId());
					}
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					break;
				}

			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == NewDiaryEdit)
			{			
				Set_Url_Params(KX_PostDiary, "title", (char*)notifyData.PostMsgData.diarydata.pszEditTitle);
				Set_Url_Params(KX_PostDiary, "content", (char*)notifyData.PostMsgData.diarydata.pszEditContent);								
				KaiXinAPICommon_Download(KX_PostDiary, this->GetWindowHwndId()); 		
			}
			else if(notifyData.nEditType == NewRecordEdit)
			{   													
				Set_Url_Params(KX_WriteRecord, "privacy", "0");
				Set_Url_Params(KX_WriteRecord, "reccont", (char*)notifyData.PostMsgData.recorddata.pszRecordContent);

				KaiXinAPICommon_Download(KX_WriteRecord, this->GetWindowHwndId());				
			}

			bHandled = TRUE;
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;
	default:
		break;
	}
	return bHandled;
}

Boolean TAppListViewForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	m_BackBtn = SetAppBackButton(this);
	switch(this->m_appListViewType)
	{
	case DiaryListView:
		{	
			m_WriteBtn = SetAppWriteButton(this);
			break;			
		}
	case RecordListView:
		{
			m_WriteBtn = SetAppWriteButton(this);
			break;			
		}	
	default:
		m_WriteBtn = 0;
		break;
	}
	SetFocus(m_BackBtn);

	m_nTitleLblID = this->SetAppTitle(this->m_appListViewType);
	_SetCoolBarListRowItem(pApp);
	return TRUE;
}


Boolean TAppListViewForm::_OnCtlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	
	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if( nCtrlID == APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList)
	{   
		TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
		Int32			  nRowIndex ;//点击，选中的行		
		nRowIndex = pItem->GetTagValue();			
		ShowItemDetail(pApp, nRowIndex);							
		bHandled = TRUE;
	}
	else if(nCtrlID == this->m_WriteBtn)
	{
		switch(this->m_appListViewType)
		{
		case DiaryListView:
			{	
				PostNotifyMsgDataType in_msgData;
				MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

				in_msgData.nCtrlId = 0;
				in_msgData.nHwndId = this->GetWindowHwndId();
				in_msgData.nEditType = NewDiaryEdit;

				TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
				break;		
			}
		case RecordListView:
			{
				PostNotifyMsgDataType in_msgData;
				MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

				in_msgData.nCtrlId = 0;
				in_msgData.nHwndId = this->GetWindowHwndId();
				in_msgData.nEditType = NewRecordEdit;

				TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
				break;			
			}		
		default:
			break;
		}
		bHandled = TRUE;
	}
	return bHandled;
}
Boolean TAppListViewForm::_OnCtrlSetFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean 	bHandled = FALSE;
	Int32 	CtrlID = pEvent->sParam1; 

	return bHandled;	
}
Boolean TAppListViewForm::_OnCtrlKillFocusEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean 	bHandled = FALSE;
	Int32 	CtrlID = pEvent->sParam1; 

	return bHandled;
}


int TAppListViewForm::SetAppTitle(AppListViewType appListViewType)
{
	TUChar pszTitleString[64] = {0};
	TUChar pszViewObjectName[32] = {0};//查看对象名
	int iRet = eFailed;
	int i = 0;
	char* szUid = NULL;
	char* szFuid = NULL;

	memset(fname, 0, sizeof(fname));
	memset(fuid, 0, sizeof(fuid));

	szUid = (char*)malloc(32);
	szFuid = (char*)malloc(32);
	memset(szUid, 0, sizeof(32));
	memset(szFuid, 0, sizeof(32));

	switch(appListViewType)
	{
	case DiaryListView:
		{
			Get_Url_Params(KX_DiaryList, "uid", &szUid);			
			Get_Url_Params(KX_DiaryList, "fuid", &szFuid);
			TUString::StrCat (pszViewObjectName, TResource::LoadConstString(APP_KA_ID_STRING_SDiary));
			break;			
		}
	case RecordListView:
		{
			Get_Url_Params(KX_RecordList, "uid", &szUid);			
			Get_Url_Params(KX_RecordList, "fuid", &szFuid);
			STRCPY_Ex(fuid, szFuid);
			TUString::StrCat (pszViewObjectName, TResource::LoadConstString(APP_KA_ID_STRING_SRecord));
			break;			
		}	
	default:

		break;

	}

	if(strcmp(szUid, szFuid)==0)
	{
		TUString::StrCat (pszTitleString, TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else //SetUserName From UserInfos
	{
		tResponseGetUserInfos* Response = NULL;

		Int32 Fuid = 0;
		TUChar TUCharFuid[32];
		TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)szFuid);
		Fuid = TUString::StrAToI(TUCharFuid);
		iRet = KaiXinAPI_JsonParse(KX_GetUserInfos, (void **)&Response);

		if(iRet == eSucceed)
		{
			for(i = 0; i<Response->nSize_friends; i++)
			{
				if((Int32)Response->friends[i].fuid == Fuid)
				{
					TUString::StrUtf8ToStrUnicode(pszTitleString , (const Char *)Response->friends[i].fname);
					STRCPY_Ex(fname, Response->friends[i].fname);
					break;
				}
			}

			if(i >= Response->nSize_friends)
			{
				TUString::StrCat (pszTitleString, TResource::LoadConstString(APP_KA_ID_STRING_Friend));//好友字串//TResource::LoadConstString(TUSTR_Kx_Profile_More_Title)
			}

			delete Response;
		}
		else
		{
			TUString::StrCat (pszTitleString, TResource::LoadConstString(APP_KA_ID_STRING_Friend));//好友字串			
		}
	}

	TUString::StrCat (pszTitleString, pszViewObjectName);
	free(szUid);
	free(szFuid);

	return SetAppTilte(this,0,pszTitleString);
}

Int32 TAppListViewForm::_LoadDataResouse(AppListViewType appListViewType)
{
	int iRet = eFailed;
	switch(appListViewType)
	{
	case DiaryListView:
		{			
			iRet = KaiXinAPI_JsonParse(KX_DiaryList, (void **)&m_pDiaryListResponse);
			if(iRet)
			{
				this->m_nCoolTotalRows = m_pDiaryListResponse->nSize_diarylist;
			}
			break;			
		}
	case RecordListView:
		{
			iRet = KaiXinAPI_JsonParse(KX_RecordList, (void **)&m_pRecordListResponse);
			if(iRet)
			{
				this->m_nCoolTotalRows = m_pRecordListResponse->nSize_recordlist;
			}
			break;			
		}
	
	default:

		break;
	}

	return iRet;	
}

void TAppListViewForm::_SetCoolBarListRowItem(TApplication * pApp)
{
	TBarRowList* 	lpRowList = NULL;
	TBarRow* 		lpRow = NULL;
	TBarListItem* lpItem = NULL;
	
	TCoolBarList* 	pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList));
	if(pCoolBarList == NULL)
		return;
	//背景设置为白色底色
	pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
		
	lpRowList = pCoolBarList->Rows();
	if(lpRowList == NULL)
		return;
	
	//add row
	lpRowList->BeginUpdate();
	lpRowList->Clear();
	lpRow = lpRowList->AppendRow();									

	if(lpRow)
	{
		switch(m_appListViewType)
		{
		case DiaryListView:
			{			
				for(int i=0; i<m_pDiaryListResponse->nSize_diarylist; i++)
				{
					TUChar pUnicodeTitle[1024];
					TUChar pUnicodeContent[2048];//test
					TUChar pUnicodeDateTime[128];
					TUString::StrUtf8ToStrUnicode( pUnicodeTitle ,(const Char *)m_pDiaryListResponse->diarylist[i].title );
					TUString::StrUtf8ToStrUnicode( pUnicodeContent ,(const Char *)m_pDiaryListResponse->diarylist[i].content );
					TUString::StrUtf8ToStrUnicode( pUnicodeDateTime ,(const Char *)m_pDiaryListResponse->diarylist[i].ctime );

					//add Item
					lpItem = lpRow->AppendItem();
					if (lpItem)
					{
						lpItem->SetTitle(NULL);
						lpItem->SetCaption(NULL);				
						lpItem->SetIndicatorType(itDefault);
						CtrlAddItemToCoolBarList_Lable(this, lpItem, 5, LISTVIEW_LINE1_Y,SCR_W-40, ITEM_TITLE_FONT, pUnicodeTitle, RGB_COLOR_LIGHTBLUE);
						CtrlAddItemToCoolBarList_Lable(this, lpItem, 5, LISTVIEW_LINE2_Y,SCR_W-40, ITEM_CONTENT_FONT, pUnicodeContent);
						CtrlAddItemToCoolBarList_Lable(this, lpItem, 5, LISTVIEW_LINE3_Y,SCR_W-40, ITEM_TIME_FONT, pUnicodeDateTime, RGB_COLOR_GRAY);
						lpItem->SetHeight(LISTVIEW_DIARY_H);
						lpItem->SetTagValue(i);
					}
				}
				break;			
			}
		case RecordListView:
			{
				for(int i=0; i<m_pRecordListResponse->nSize_recordlist; i++)
				{
					TUChar pUnicodeContent[2048];//test
					TUChar pUnicodeDateTime[128];
					TUString::StrUtf8ToStrUnicode( pUnicodeContent ,(const Char *)m_pRecordListResponse->recordlist[i].content );
					TUString::StrUtf8ToStrUnicode( pUnicodeDateTime ,(const Char *)m_pRecordListResponse->recordlist[i].strctime );

					//add Item
					lpItem = lpRow->AppendItem();
					if (lpItem)
					{
						lpItem->SetTitle(NULL);
						lpItem->SetCaption(NULL);				
						lpItem->SetIndicatorType(itDefault);
						CtrlAddItemToCoolBarList_Lable(this, lpItem, ITEM_X, LISTVIEW_LINE1_Y,ITEM_W, ITEM_TITLE_FONT, pUnicodeContent);
						CtrlAddItemToCoolBarList_Lable(this, lpItem, ITEM_X, LISTVIEW_LINE2_Y, ITEM_W, ITEM_TIME_FONT, pUnicodeDateTime, RGB_COLOR_GRAY);
						lpItem->SetHeight(LISTVIEW_RECORD_H);
						lpItem->SetTagValue(i);
					}
				}
				break;			
			}
		
		default:

			break;
		}	

	}
	lpRowList->EndUpdate(); 	
#if 0
	TPatternItem	  *pPattern;
	TCListViewFontType objFontType;
	TCoolListView* pCoolListView;
	TRectangle obBtnRec(0,0,0,0);	//初始(left, top, w, h)

	pCoolListView = static_cast< TCoolListView* >(GetControlPtr(m_nCoolListViewID));

	if(pCoolListView)
	{
		pCoolListView->SetEnabled(TRUE);			
		//pCoolListView->SetFrameWidth(2);
		//pCoolListView->SetRowHeight(90);
		pCoolListView->SetScrollMode(CTL_SCL_MODE_NONE);
		pCoolListView->SetOwnerData(TRUE);//owner draw
		pCoolListView->SetOwnerDraw(TRUE);
		pCoolListView->SetTransparent(TRUE);

		switch(this->m_appListViewType)
		{
		case DiaryListView:
			{	
				pCoolListView->SetRowHeight(LISTVIEW_LINE_H*3); 

				for(int i=0; i<4; i++)
				{
					pCoolListView->AppendPatternItem();
				}

				//Title
				pPattern = pCoolListView->GetPatternItem(0);
				obBtnRec.SetRect(5, LISTVIEW_LINE1_Y,SCR_W-40, LISTVIEW_LINE_H);
				if (pPattern)
				{
					pPattern->SetParentColor(FALSE);
					pPattern->SetParentFont(FALSE);
					objFontType = pPattern->GetFont();
					objFontType.font.Create(FONT_TITLE, FONT_TITLE);

					objFontType.foreColor = RGB_COLOR_LIGHTBLUE;//RGB(67, 67, 135);
					pPattern->SetFont(objFontType); 
					pPattern->SetSelFont(objFontType);

					pPattern->SetShortText(TRUE);
					pPattern->SetAlign(tasLeftJustify);//tasCenter
					pPattern->SetLayout(tlsCenter);
					pPattern->SetRect(obBtnRec);
				}

				//Content
				pPattern = pCoolListView->GetPatternItem(1);
				obBtnRec.SetRect(5, LISTVIEW_LINE2_Y, SCR_W - 40, LISTVIEW_LINE_H);
				if (pPattern)
				{
					pPattern->SetParentColor(FALSE);
					pPattern->SetParentFont(FALSE);
					pPattern->SetType(pitText); 					
					objFontType = pPattern->GetFont();
					objFontType.font.Create(FONT_CONTENT, FONT_CONTENT);

					objFontType.foreColor = RGB_COLOR_BLACK;//RGB(128, 128, 128); 					
					pPattern->SetFont(objFontType); 			
					pPattern->SetSelFont(objFontType); 
					pPattern->SetAlign(tasLeftJustify);
					pPattern->SetLayout(tlsCenter);
					pPattern->SetShortText(TRUE);
					pPattern->SetRect(obBtnRec);
				}

				//go to detail icon
				pPattern = pCoolListView->GetPatternItem(2);
				obBtnRec.SetRect(SCR_W - 40, LISTVIEW_LINE_H, 20, LISTVIEW_LINE_H);
				if (pPattern)
				{
					pPattern->SetParentColor(FALSE);
					pPattern->SetParentFont(FALSE);
					pPattern->SetType(pitImage);
					pPattern->SetLayout(tlsCenter);
					pPattern->SetRect(obBtnRec);

				}				

				//date time
				pPattern = pCoolListView->GetPatternItem(3);
				obBtnRec.SetRect(5, LISTVIEW_LINE3_Y, SCR_W - 40, LISTVIEW_LINE_H);
				if (pPattern)
				{
					pPattern->SetParentColor(FALSE);
					pPattern->SetParentFont(FALSE);
					objFontType = pPattern->GetFont();
					objFontType.font.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);

					objFontType.foreColor = RGB_COLOR_LIGHTGRAY;//RGB(183, 183, 183); 					
					pPattern->SetFont(objFontType); 			
					pPattern->SetSelFont(objFontType); 
					pPattern->SetAlign(tasLeftJustify);
					pPattern->SetLayout(tlsCenter);
					pPattern->SetRect(obBtnRec);

				}				
				break;			
			}
		case RecordListView:
			{
				pCoolListView->SetRowHeight(LISTVIEW_LINE_H*2); 

				for(int i=0; i<3; i++)
				{
					pCoolListView->AppendPatternItem();
				}

				//Content
				pPattern = pCoolListView->GetPatternItem(0);
				obBtnRec.SetRect(5, LISTVIEW_LINE1_Y, SCR_W - 40, LISTVIEW_LINE_H);//(2,30,280,30)
				if (pPattern)
				{
					pPattern->SetParentColor(FALSE);
					pPattern->SetParentFont(FALSE);
					pPattern->SetType(pitText); 					
					objFontType = pPattern->GetFont();
					objFontType.font.Create(FONT_CONTENT, FONT_CONTENT);

					objFontType.foreColor = RGB_COLOR_LIGHTBLUE;//RGB(67, 67, 135); 					
					pPattern->SetFont(objFontType); 			
					pPattern->SetSelFont(objFontType); 
					pPattern->SetAlign(tasLeftJustify);
					pPattern->SetLayout(tlsCenter);
					pPattern->SetShortText(TRUE);
					pPattern->SetRect(obBtnRec);
				}

				//go to detail icon
				pPattern = pCoolListView->GetPatternItem(1);
				obBtnRec.SetRect(SCR_W - 40, 0 ,20, LISTVIEW_LINE_H*2);
				if (pPattern)
				{
					pPattern->SetParentColor(FALSE);
					pPattern->SetParentFont(FALSE);
					pPattern->SetType(pitImage);
					pPattern->SetLayout(tlsCenter);
					pPattern->SetRect(obBtnRec);

				}				

				//date time
				pPattern = pCoolListView->GetPatternItem(2);
				obBtnRec.SetRect(5, LISTVIEW_LINE2_Y, SCR_W - 40, LISTVIEW_LINE_H);
				if (pPattern)
				{
					pPattern->SetParentColor(FALSE);
					pPattern->SetParentFont(FALSE);
					objFontType = pPattern->GetFont();
					objFontType.font.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);

					objFontType.foreColor = RGB_COLOR_LIGHTGRAY;//RGB(183, 183, 183); 					
					pPattern->SetFont(objFontType); 			
					pPattern->SetSelFont(objFontType); 
					pPattern->SetAlign(tasLeftJustify);
					pPattern->SetLayout(tlsCenter);
					pPattern->SetRect(obBtnRec);

				}
				break;
			}
		
		default:

			break;
		}		
		pCoolListView->SetRowsCount(this->m_nCoolTotalRows);
		pCoolListView->Draw(CLSTV_ALL);
	}
#endif
}

#if 0
Int32 TAppListViewForm::_SetCoolListRowItemValue(TCoolListView* pCoolListView,Int32 RowIndex)
{
	TUChar pUnicodeTitle[1024];
	TUChar pUnicodeContent[2048];//test
	TUChar pUnicodeDateTime[128];

	const TBitmap* pGoToDetailIcon = TBitmap::LoadResBitmap(APP_KA_ID_BITMAP_triangle);

	memset(pUnicodeTitle, 0, sizeof(pUnicodeTitle));
	memset(pUnicodeContent, 0, sizeof(pUnicodeContent));
	memset(pUnicodeDateTime, 0, sizeof(pUnicodeDateTime));

	switch(this->m_appListViewType)
	{
	case DiaryListView:
		{	
			if(m_pDiaryListResponse)
			{
				TUString::StrUtf8ToStrUnicode( pUnicodeTitle ,(const Char *)m_pDiaryListResponse->diarylist[RowIndex].title );
				TUString::StrUtf8ToStrUnicode( pUnicodeContent ,(const Char *)m_pDiaryListResponse->diarylist[RowIndex].content );
				TUString::StrUtf8ToStrUnicode( pUnicodeDateTime ,(const Char *)m_pDiaryListResponse->diarylist[RowIndex].ctime );

				pCoolListView->SetItemText( RowIndex, 0, pUnicodeTitle);
				pCoolListView->SetItemText( RowIndex, 1, pUnicodeContent);					
				pCoolListView->SetItemImage(RowIndex, 2, pGoToDetailIcon);	
				pCoolListView->SetItemText( RowIndex, 3, pUnicodeDateTime);				
			}
			break;			
		}
	case RecordListView:
		{
			if(m_pRecordListResponse)
			{
				TUString::StrUtf8ToStrUnicode( pUnicodeContent ,(const Char *)m_pRecordListResponse->recordlist[RowIndex].content );
				TUString::StrUtf8ToStrUnicode( pUnicodeDateTime ,(const Char *)m_pRecordListResponse->recordlist[RowIndex].strctime );

				pCoolListView->SetItemText( RowIndex, 0, pUnicodeContent);					
				pCoolListView->SetItemImage(RowIndex, 1, pGoToDetailIcon);	
				pCoolListView->SetItemText( RowIndex, 2, pUnicodeDateTime);				
			}

			break;			
		}

	case MessageListView:
		{

			break;			
		}

	case AlbumListView:
		{

			break;			
		}
	case UserCommentListView:
		{

			break;			
		}			
	case FriendCommentListView:
		{

			break;			
		}		
	default:

		break;
	}

	return 0;	
}
#endif
void TAppListViewForm::ShowItemDetail(TApplication * pApp, Int32 nRowIndex)
{
	Int32 id = 0;
	TUChar TUCharId[32];
	TUString::StrUtf8ToStrUnicode(TUCharId,(const Char *)KaiXinUserInfo.uid);
	id = TUString::StrAToI(TUCharId);
	char* szFuid = NULL;		
	szFuid = (char*)malloc(32);
	memset(szFuid, 0, sizeof(32));

	switch(this->m_appListViewType)
	{
	case DiaryListView:
		{	
			if(m_pDiaryListResponse)
			{
				Set_Url_Params(KX_DiaryDetail, "did", (char *)m_pDiaryListResponse->diarylist[nRowIndex].did);
				Get_Url_Params(KX_DiaryList, "fuid", &szFuid);	
				Set_Url_Params(KX_DiaryDetail, "fuid", szFuid);	

				KaiXinAPICommon_Download(KX_DiaryDetail, this->GetWindowHwndId());

				//有没有人赞过
#if 0
				Set_Url_Params(KX_ReceivedAnObjectComments, "fuid", szFuid);
				Set_Url_Params(KX_ReceivedAnObjectComments, "id", (char *)m_pDiaryListResponse->diarylist[nRowIndex].did);		

				//下载
				KaiXinAPICommon_Download(KX_ReceivedAnObjectComments, this->GetWindowHwndId());
#endif
			}
			break;			
		}
	case RecordListView:
		{
			if(m_pRecordListResponse)
			{
				//显示记录详情
				DetailDataType detailData;
				MemSet(&detailData, 0, sizeof(detailData));

				//detailData.nId = m_pRecordListResponse->recordlist[nRowIndex].rid;		
				STRCPY_Ex(detailData.rid, m_pRecordListResponse->recordlist[nRowIndex].rid);
				STRCPY_Ex(detailData.nType, "1018");
				STRCPY_Ex(detailData.szFname, this->fname);				
				STRCPY_Ex(detailData.szFuid, this->fuid);								
				detailData.ctime = m_pRecordListResponse->recordlist[nRowIndex].ctime;
				STRCPY_Ex(detailData.stime, m_pRecordListResponse->recordlist[nRowIndex].strctime);

				TUString::StrUtf8ToStrUnicode(detailData.pszContent, (const Char*)m_pRecordListResponse->recordlist[nRowIndex].content);				

				TOtherDetailForm *pComm1 = new TOtherDetailForm( pApp, detailData);							
			}

			break;			
		}
	
	default:

		break;
	}

	free(szFuid);
}


Int32 TAppListViewForm::_OnDataFree()
{
	if(this->m_pDiaryListResponse) 
	{
		delete this->m_pDiaryListResponse;
	}
	if(this->m_pRepasteIndexResponse)
	{
		delete this->m_pRepasteIndexResponse;
	}
	if(this->m_pRecordListResponse)
	{
		delete this->m_pRecordListResponse;
	}	
	return 0;
}

Boolean TAppListViewForm::_OnLstPreDrawEvent(EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	return bHandled;

}

Boolean TAppListViewForm::_OnCoolListViewCustomDrawEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean                  bHandled;
	CLstvCustomDrawEventType *pDrawEvent;
	TCoolListView            *pCoolListView;

	bHandled = FALSE;

	if(pEvent->sParam1 == this->m_nCoolListViewID)
	{
		pDrawEvent = reinterpret_cast< CLstvCustomDrawEventType* >( pEvent );
		pCoolListView = static_cast<TCoolListView*>(GetControlPtr(pEvent->sParam1));

		// 需要重画行背景
		if( 2 == pDrawEvent->DrawType && pCoolListView) 
		{
			// 需要重画背景的是第几行，放在pDrawEvent->RowIndex中
			TRectangle	  rc(pDrawEvent->Rect);
			TCtrlDC 	  dcCtrl(pCoolListView);

			dcCtrl.BeginPaint();

			//画背景
			switch(this->m_appListViewType)
			{
			case DiaryListView:
				{
					dcCtrl.DrawBitmapXY(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_LisItemtBG_90x320), rc.X(), rc.Y(),
						GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);								
					break;
				}
			case RecordListView:
				{
					dcCtrl.DrawBitmapXY(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_ListItemBG_60x320), rc.X(), rc.Y(),
						GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);					
					break;
				}
			default:
				{

					break;
				}				
			}

			// 画边线
			if (pCoolListView->GetRowsCount()-1 == pDrawEvent->RowIndex)
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Bottom(), rc.Right(), rc.Bottom()-1, RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.X(), rc.Bottom(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.Right(), rc.Y(), rc.Right(), rc.Bottom(), RGB(212,212,212));
			}
			else
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Bottom(), rc.Right(), rc.Bottom(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.X(), rc.Bottom(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.Right(), rc.Y(), rc.Right(), rc.Bottom(), RGB(212,212,212));
			}

			dcCtrl.EndPaint();

			pDrawEvent->Result = TRUE; // must set Result to TRUE			
		}		
		bHandled = TRUE;
	}
	return bHandled;
}

