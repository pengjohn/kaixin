/*!
* \file	 KaiXinAPI_OtherDetail.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 处理一些特定的详情显示
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

//记录详情

#include "KaiXinAPICommon.h"

#if(LCD_SIZE == LCD_HVGA )
#define COMMENT_ICON_X		140
#define PRAISE_ICON_X		200
#elif(LCD_SIZE == LCD_WVGA )
#define COMMENT_ICON_X		200
#define PRAISE_ICON_X		300
#endif

// 构造函数
TOtherDetailForm::TOtherDetailForm(TApplication* pApp):TWindow(pApp)
{

	Create(APP_KA_ID_OtherDetailForm);
}

TOtherDetailForm::TOtherDetailForm(TApplication* pApp, DetailDataType detailData):TWindow(pApp)
{
	MemSet(&mDetailData, 0, sizeof(mDetailData));
	mDetailData = detailData;
	Create(APP_KA_ID_OtherDetailForm);
}

// 析构函数
TOtherDetailForm::~TOtherDetailForm(void)
{

}

// 窗口事件处理
Boolean TOtherDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;

			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == DiaryEdit)
			{
				TUChar pszTUCharDid[32];
				Char pszDid[64];

				TUString::StrUnicodeToStrUtf8(pszDid, pszTUCharDid);

				Set_Url_Params(KX_PostDiary, "did", (char*)pszDid);		
				Set_Url_Params(KX_PostDiary, "title", (char*)notifyData.PostMsgData.diarydata.pszEditTitle);
				Set_Url_Params(KX_PostDiary, "content", (char*)notifyData.PostMsgData.diarydata.pszEditContent);			

				KaiXinAPICommon_Download(KX_PostDiary, this->GetWindowHwndId()); 		
			}
			else if(notifyData.nEditType == NewCommentEdit)
			{
				TUChar pszTUCharHiddenString[32];
				Char pszHiddenString[32];
				TUString::StrIToA(pszTUCharHiddenString , notifyData.PostMsgData.commentdata.nHidden);
				TUString::StrUnicodeToStrUtf8( pszHiddenString, (const TUChar*)pszTUCharHiddenString);

				Set_Url_Params(KX_PostComment, "content", (char*)notifyData.PostMsgData.commentdata.pszCommentContent);
				Set_Url_Params(KX_PostComment, "id", (char*)notifyData.PostMsgData.commentdata.nId);	
				Set_Url_Params(KX_PostComment, "ouid", (char*)notifyData.PostMsgData.commentdata.nOuid);

				Set_Url_Params(KX_PostComment, "type", (char*)notifyData.PostMsgData.commentdata.nType);				
				Set_Url_Params(KX_PostComment, "hidden", (char*)pszHiddenString);

				KaiXinAPICommon_Download(KX_PostComment, this->GetWindowHwndId());				
			}
			bHandled = TRUE;
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PostComment:
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_PostComment))
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK); 
					}					
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					break;
				}
			case KX_PostUp:
				{				
					if(KaiXinAPI_JsonParse_bSuccess(KX_PostUp))
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Zan),WMB_OK); 
					}					
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_ZanYet),TResource::LoadConstString(APP_KA_ID_STRING_Zan),WMB_OK);	
					}
					break;
				}		
			}

			break;	
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TOtherDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	bIsSelfDiary = FALSE;
	m_BackBtn = SetAppBackButton(this);	
	_SetAppTilte(pApp);
	_SetOtherDetailCoolBarList(pApp);		
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TOtherDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TOtherDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	TUChar pszId[32] = {0};
	Char szId[32] = {0};

	TUString::StrI64ToA(pszId,(Int64)mDetailData.nId);
	TUString::StrUnicodeToStrUtf8(szId,pszId);

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(pEvent->sParam1 == this->nPraiseIconId)
	{	
		//有的接口传入是int, 有的接口传入是char
		if(strlen(mDetailData.rid) > 0)
			Set_Url_Params(KX_PostUp, "id", (char*)mDetailData.rid);
		else
			Set_Url_Params(KX_PostUp, "id", (char*)szId);

		if(strlen(mDetailData.rid) > 0)
		
		Set_Url_Params(KX_PostUp, "touid", mDetailData.szFuid);
		Set_Url_Params(KX_PostUp, "appid", mDetailData.nType);//怎么获得appid呢、、2：日记

		KaiXinAPICommon_Download(KX_PostUp, this->GetWindowHwndId());
	}
	else if(pEvent->sParam1 == this->nCommentIconId)//评论
	{
#if 0
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = NewCommentEdit;

		STRCPY_Ex(in_msgData.PostMsgData.commentdata.nId, (char*)szId);
		STRCPY_Ex(in_msgData.PostMsgData.commentdata.nOuid,mDetailData.szFuid);	
		STRCPY_Ex(in_msgData.PostMsgData.commentdata.nType,mDetailData.nType);

		TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData); 
#endif
		Set_Url_Params(KX_ReceivedAnObjectComments, "fuid", mDetailData.szFuid); 
		Set_Url_Params(KX_ReceivedAnObjectComments, "type", (char*)mDetailData.nType); 

		//有的接口传入是int, 有的接口传入是char
		if(strlen(mDetailData.rid) > 0)
			Set_Url_Params(KX_ReceivedAnObjectComments, "id", (char*)mDetailData.rid);
		else
			Set_Url_Params(KX_ReceivedAnObjectComments, "id", (char*)szId);
		
		if(strcmp(mDetailData.nType,"1018") == 0 )	//记录
		{
			KaiXinAPICommon_Download(KX_ReceivedRecordComments, this->GetWindowHwndId()); 
		}
		else if(strcmp(mDetailData.nType,"3") == 0 )	//状态
		{
			KaiXinAPICommon_Download(KX_ReceivedStateComments, this->GetWindowHwndId()); 
		}
	}	
	return bHandled;
}

Int32 TOtherDetailForm::_SetAppTilte(TApplication * pApp)
{
	TUChar pszTitle[64] = {0};
	TUChar pszNType[8] = {0};
	Int32 nType = 0;

	if(strcmp(mDetailData.szFuid,KaiXinUserInfo.uid)==0)
	{
		TUString::StrCopy(pszTitle, TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else
	{
		TUString::StrUtf8ToStrUnicode(pszTitle , (const Char *)mDetailData.szFname);
	}

	TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)mDetailData.nType);
	nType = TUString::StrAToI(pszNType);

	if(nType == StateDetail)
	{
		TUString::StrCat(pszTitle, TResource::LoadConstString(APP_KA_ID_STRING_SState));
	}
	else
	{
		TUString::StrCat(pszTitle, TResource::LoadConstString(APP_KA_ID_STRING_SRecord));
	}

	return SetAppTilte(this, 0, pszTitle);
}

Int32 TOtherDetailForm::_SetOtherDetailCoolBarList(TApplication * pApp)
{
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;

	TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_OtherDetailForm_OtherDetailPanel));
	pPanel->SetOrigin(0, 0);

	TBarRow *lpRow = NULL;
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_OtherDetailForm_OtherCoolBarList));
	if (pCoolBarList)
	{
		TBarListItem* lpItem = NULL;
		pCoolBarList->SetBounds(RC_LIST_SMALL);	
		pCoolBarList->GetBounds(&Rc_CoolBarList);

		lpRowList = pCoolBarList->Rows();
		//add row
		if (lpRowList)
		{
			lpRowList->BeginUpdate();
			lpRowList->Clear();
			lpRow = lpRowList->AppendRow();

			//add Item
			if(lpRow)
			{
				//:TODO:Add Subject info
				lpItem = lpRow->AppendItem();
				if(lpItem)
				{
					TFont objFontType;
					TUChar pszContent[10000] = {0};
					TUChar pszContentFormat[10000] = {0};
					TUChar pRChar = 0x0020;
					TUChar* pSrc = NULL;
					TUChar* pDes = NULL;

					Int32 ItemHeight = 0;

					TRectangle rect;
					TRectangle Rc_Temp;
					lpItem->GetBounds(rect);
					lpItem->SetCaption(NULL);						
					lpItem->SetIndicatorType(itNone);

					//TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)m_pDiaryDetailResponse->content);
					pSrc = mDetailData.pszContent;
					pDes = pszContentFormat;
					while( *pSrc != '\0' )
					{
						if(*pSrc != pRChar || (*pSrc == pRChar && *(pSrc+1) != pRChar))
						{
							*pDes = *pSrc;
							pDes++;
							pSrc++;
							continue;
						}
						else
						{
							*pDes = '\n';
							pDes++;
							while( *pSrc == pRChar )
							{
								pSrc++;
							}							
						}
					}
					*pDes = '\0';

					Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
					TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
					TRectangle Rc_Content(10, rect.Y() - Rc_CoolBarList.Y() + 10, SCR_W - 60, 200);
					pContent->SetBounds(&Rc_Content);
					pContent->SetWordWrapAttr(TRUE);
					objFontType = pContent->GetFont();
					objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
					pContent->SetFont(objFontType); 
					pContent->SetCaption(mDetailData.pszContent,FALSE);//pszContentFormat
					pContent->SetWordWrapAttr(TRUE);
					pContent->SetTransparent(TRUE);
					pContent->SetEnabled(FALSE);
					pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
					pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
					pContent->GetBounds(&Rc_Temp);

					ItemHeight = ItemHeight + Rc_Temp.Height() + 30;							

					Int32 nDateTimelabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
					TLabel* pDateTimelabel = static_cast<TLabel*>(GetControlPtr(nDateTimelabelId));
					TRectangle Rc_DateTimelabel(10, ItemHeight, 100, 20);
					pDateTimelabel->SetBounds(&Rc_DateTimelabel);
					objFontType = pDateTimelabel->GetFont();
					objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
					pDateTimelabel->SetFont(objFontType); 
					pDateTimelabel->SetColor(CTL_COLOR_TYPE_FORE,GRAY);

					if(mDetailData.ctime == 0)
					{
						TUChar szDateTime[32] = {0};
						TUString::StrUtf8ToStrUnicode(szDateTime,(const Char *)mDetailData.stime);
						pDateTimelabel->SetCaption(szDateTime,FALSE);
					}
					else
					{					
						TUChar* pszDateTime = NULL;
						cUnixTime_ConvertUnixTimeToFormatString( mDetailData.ctime, KX_TIME_FORMAT_YY_MM_DD_HH_MM, &pszDateTime );
						pDateTimelabel->SetCaption(pszDateTime,FALSE);					
						if(pszDateTime) 
						{
							delete[] pszDateTime; 
							pszDateTime = NULL;
						}	
					}
					pDateTimelabel->GetBounds(&Rc_Temp);
					ItemHeight = ItemHeight + Rc_Temp.Height()+20;


					//日期后面加赞图标和评论图标			
					//评论
					nCommentIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
					const TBitmap * pCommentBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_comment_img_with_frame);
					TImage* pCommentImage = static_cast<TImage*>(GetControlPtr(nCommentIconId));
					TRectangle Rc_CommentIcon(COMMENT_ICON_X, Rc_Temp.Y()- (pCommentBmp->GetHeight()/2) + 4, pCommentBmp->GetWidth(), pCommentBmp->GetHeight());
					pCommentImage->SetBounds(&Rc_CommentIcon);
					pCommentImage->SetBitmap(pCommentBmp);
					pCommentImage->GetBounds(&Rc_Temp);
					pCommentImage->Show(TRUE);

					//赞
					nPraiseIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
					const TBitmap * pPraiseBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_praise_img_with_frame);
					TImage* pPraiseImage = static_cast<TImage*>(GetControlPtr(nPraiseIconId));
					TRectangle Rc_PraiseIcon(PRAISE_ICON_X, Rc_Temp.Y()+(pCommentBmp->GetHeight()/2)-(pPraiseBmp->GetHeight()/2), pPraiseBmp->GetWidth(), pPraiseBmp->GetHeight());
					pPraiseImage->SetBounds(&Rc_PraiseIcon);
					pPraiseImage->SetBitmap(pPraiseBmp);
					pPraiseImage->GetBounds(&Rc_Temp);
					pPraiseImage->Show(TRUE);

					lpItem->SetHeight(ItemHeight);
				}

			}

			lpRowList->EndUpdate(); 
		}
	}
	return 0;
}


