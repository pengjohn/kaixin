/*!
* \file	 KaiXinAPI_PhotoDetail.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 相册图片详情
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

//图片坐标
#define KX_PHOTO_DETAIL_IMAGE_X			(0)
#define KX_PHOTO_DETAIL_IMAGE_Y			(0)
#define KX_PHOTO_DETAIL_IMAGE_W			(SCR_W)
#define KX_PHOTO_DETAIL_IMAGE_H			(SCR_H - 140)			//347

//图片标题坐标
#define KX_PHOTO_DETAIL_TITLE_X			(10)
#define KX_PHOTO_DETAIL_TITLE_Y			(347)
#define KX_PHOTO_DETAIL_TITLE_W			(100)
#define KX_PHOTO_DETAIL_TITLE_H			(20)


// 构造函数
TPhotoDetailForm::TPhotoDetailForm(TApplication* pApp):TWindow(pApp)
{		
	pPhotoBmp = NULL;
	Create(APP_KA_ID_PhotoDetailForm);
}

TPhotoDetailForm::TPhotoDetailForm(TApplication* pApp, tPhotoDetail photodata):TWindow(pApp)
{		
	pPhotoBmp = NULL;
	m_photodata = photodata;
	Create(APP_KA_ID_PhotoDetailForm);
}

// 析构函数
TPhotoDetailForm::~TPhotoDetailForm(void)
{	
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if( pPhotoBmp != NULL)
	{
		pPhotoBmp->Destroy();
		pPhotoBmp = NULL; 								
	}	
}

// 窗口事件处理
Boolean TPhotoDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{	
					//下载完后更新图片
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

					if(pDownLoadBitmap)
					{
						TImage* pTImage;

						pTImage = static_cast< TImage* >(this->GetControlPtr(APP_KA_ID_PhotoDetailForm_PhotoImage));
						if(pTImage)
						{
							TRectangle RC;
							pTImage->GetBounds(&RC);

							//一定要先释放后使用
							if( pPhotoBmp != NULL)
							{
								pPhotoBmp->Destroy();
								pPhotoBmp = NULL; 								
							}								

							pPhotoBmp = TBitmap::Create(RC.Width(), RC.Height(), pDownLoadBitmap->GetDepth());
							pPhotoBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));

							pTImage->SetBitmap(pPhotoBmp);
							//pTImage->SetDrawColor(COLOR_BLACK,TRUE);
							pTImage->Draw();
						}
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL;							
					}
					if(strcmp(m_photodata.picnum,"1")!=0)
					{
						_SetViewButtonEnabled(TRUE);//图片下载完毕，查看按钮即时变为可用
					}
					break;
				}				
			}
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TPhotoDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//init login form
	m_TitleButtonCtlID = 0;	
	m_TitleButtonCtlID = _SetTilteButton(pApp);
	m_BackBtn = SetAppBackButton(this);	
	_SetFormTilte(pApp);
	_SetCtrlsStyle(pApp);
	_SetCtrlsData(pApp);
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TPhotoDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TPhotoDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	Int32 nSelectCtrlID = pEvent->sParam1;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(nSelectCtrlID)
	{
		if(nSelectCtrlID == m_TitleButtonCtlID)
		{
			//返回前一个页面
			CloseWindow();
		}
	}
	if (!bHandled)
	{
		switch(pEvent->sParam1)
		{	
		case APP_KA_ID_PhotoDetailForm_PrePhotoBtn:
			{
				_ViewPhoto(pApp, KX_PrePhoto);
				bHandled = TRUE;
				break;
			}
		case APP_KA_ID_PhotoDetailForm_NexPhotoBtn:
			{
				_ViewPhoto(pApp, KX_NextPhoto);
				bHandled = TRUE;
				break;
			}
		default:
			break;		
		}
	}	
	return bHandled;
}

//创建标题按钮
Int32 TPhotoDetailForm::_SetTilteButton(TApplication * pApp)
{
	TCtrl *m_TitleButtonContrl;
	TRectangle obBtnRec(0,0,0,0);	//初始(left, top, w, h)
	Int32 m_TitleButtonCtlID = 0;
	TFont tFont;

	//创建图片按钮
	m_TitleButtonContrl =new TButton ;	

	obBtnRec.SetRect(BUTTON_X, BUTTON_Y, BUTTON_W, BUTTON_H);
	if(m_TitleButtonContrl->Create(this))
	{
		m_TitleButtonContrl->SetBounds(&obBtnRec);	
		m_TitleButtonCtlID = m_TitleButtonContrl->GetId();

		tFont = m_TitleButtonContrl->GetFont();
		tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
		m_TitleButtonContrl->SetFont(tFont);

		if(this->m_photodata.dataFrom == 1)
		{
			m_TitleButtonContrl->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_News2),FALSE);
		}
		else
		{
			m_TitleButtonContrl->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Album),FALSE);
		}
		m_TitleButtonContrl->Hide(TRUE);//暂时屏蔽		
	}

	return m_TitleButtonCtlID;
}

//创建标题标签 for Title
Int32 TPhotoDetailForm::_SetFormTilte(TApplication * pApp)
{
	TUChar pszAlbumTitle[256] = {0};

	TUChar pszCaption[64] = {0};
	TUChar pszName[32]; 

	if(m_photodata.dataFrom == 1)
	{
		TUString::StrUtf8ToStrUnicode(pszName , (const Char *)m_photodata.fname);
		TUString::StrCat (pszCaption, pszName);
	}
	else
	{
		if(strlen(m_photodata.albumtitle) > 0 )
		{
			TUString::StrUtf8ToStrUnicode(pszCaption, (const Char *)m_photodata.albumtitle);
			return SetAppTilte(this, 0, pszCaption);
		}
		else
		{
			if(strcmp(KaiXinUserInfo.uid, m_photodata.photouid)==0)
			{
				TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Me));
			}
			else
			{
				Int32 Fuid = 0, i = 0;
				TUChar TUCharFuid[32];
				int iRet = eFailed;
				tResponseGetUserInfos* Response = NULL;
				TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)m_photodata.photouid);
				Fuid = TUString::StrAToI(TUCharFuid);
				iRet = KaiXinAPI_JsonParse(KX_GetUserInfos, (void **)&Response);
				if(iRet == eSucceed)
				{
					for(i = 0; i<Response->nSize_friends; i++)
					{
						if((Int32)Response->friends[i].fuid == Fuid)
						{
							TUString::StrUtf8ToStrUnicode(pszName , (const Char *)Response->friends[i].fname);
							TUString::StrCat (pszCaption, pszName);
							break;
						}
					}
					if(i >= Response->nSize_friends)
					{
						TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
					}
					delete Response;
				}
				else
				{
					TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
				}
			}
		}
	}

	TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_SPhoto));

	return SetAppTilte(this, 0, pszCaption);
}
Int32 TPhotoDetailForm::_SetCtrlsStyle(TApplication* pApp)
{
	TFont tFont;

	TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_PhotoDetailPanel));
	if(pTPanel)
	{		
		pTPanel->SetTransparent(FALSE);
		pTPanel->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_BLACK);
	}

	TLabel* pTotalPhotoLabel =static_cast<TLabel*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_PhotoTitleLbl)); 
	if(pTotalPhotoLabel)
	{		
		pTotalPhotoLabel->SetAutoSize(TRUE);				
		tFont = pTotalPhotoLabel->GetFont();
		tFont.Create(FONT_CONTENT, FONT_CONTENT);
		pTotalPhotoLabel->SetFont(tFont);
		pTotalPhotoLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_WHITE);
		pTotalPhotoLabel->SetEnabled(FALSE);
		pTotalPhotoLabel->Show(TRUE);		
	}

	TButton* pPrePhotoBtn =static_cast<TButton*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_PrePhotoBtn)); 
	if(pPrePhotoBtn)
	{		
		tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
		pPrePhotoBtn->SetFont(tFont);
		pPrePhotoBtn->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_WHITE);
		pPrePhotoBtn->SetColor(CTL_COLOR_TYPE_BACK,RGB_COLOR_WHITE);
		pPrePhotoBtn->SetColor(CTL_COLOR_TYPE_FOCUS_FORE,RGB_COLOR_WHITE);
		pPrePhotoBtn->SetColor(CTL_COLOR_TYPE_FOCUS_BACK,RGB_COLOR_WHITE);
		pPrePhotoBtn->SetTransparent(TRUE);
	}

	TButton* pNextPhotoBtn =static_cast<TButton*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_NexPhotoBtn)); 
	if(pNextPhotoBtn)
	{		
		tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);
		pNextPhotoBtn->SetFont(tFont);
		pNextPhotoBtn->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_WHITE);
		pNextPhotoBtn->SetColor(CTL_COLOR_TYPE_BACK,RGB_COLOR_WHITE);
		pNextPhotoBtn->SetColor(CTL_COLOR_TYPE_FOCUS_FORE,RGB_COLOR_WHITE);
		pNextPhotoBtn->SetColor(CTL_COLOR_TYPE_FOCUS_BACK,RGB_COLOR_WHITE);
		pNextPhotoBtn->SetTransparent(TRUE);
	}

	TImage  *pImage = NULL;
	pImage = static_cast<TImage*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_PhotoCommentBitmap));
	if (pImage)
	{
		pImage->SetTransparent(TRUE);
		pImage->Hide(FALSE);//评论按钮暂时隐藏
	}

	if(strcmp(m_photodata.picnum,"1")==0)//如果该相册只有一张图片
	{
		//查看按钮不可用
		_SetViewButtonEnabled(FALSE);
	}	
	return 0;
}

Int32 TPhotoDetailForm::_SetCtrlsData(TApplication* pApp)
{
	//下载图片
	KaiXinAPICommon_DownloadPhoto(m_photodata.large, this->GetWindowHwndId(), 0);
	_SetViewButtonEnabled(FALSE);//开始下载图片，查看按钮暂时不可用

	TBitmap* pLoadBitmap = NULL;
	pLoadBitmap = LoadImgByUrl(m_photodata.thumbnail);

	if(pLoadBitmap)
	{
		TImage* pTImage;	
		pTImage = static_cast< TImage* >(this->GetControlPtr(APP_KA_ID_PhotoDetailForm_PhotoImage));
		if(pTImage)
		{
			TRectangle RC;
			pTImage->GetBounds(&RC);

			//一定要先释放后使用
			if( pPhotoBmp != NULL)
			{
				pPhotoBmp->Destroy();
				pPhotoBmp = NULL;								
			}								

			pPhotoBmp = TBitmap::Create(RC.Width(), RC.Height(), pLoadBitmap->GetDepth());
			pPhotoBmp->QuickZoom(pLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));

			pTImage->SetBitmap(pPhotoBmp);
			pTImage->Draw();
		}

		pLoadBitmap->Destroy();
		pLoadBitmap = NULL; 
	}



	//显示照片Title
	TUChar pszTitle[256]={0};
	TUChar pszPicPos[8]={0};
	TUChar pszPicNum[32]={0};

	TUString::StrUtf8ToStrUnicode(pszTitle, (Char *)m_photodata.title);
	TUString::StrUtf8ToStrUnicode(pszPicNum, (Char *)m_photodata.picnum);			
	TUString::StrIToA(pszPicPos, m_photodata.pos);

	TUString::StrCat(pszTitle, TUSTR_Kx_Empty_Cell);
	TUString::StrCat(pszTitle, TUSTR_Kx_Left_Parenthesis);
	TUString::StrCat(pszTitle, pszPicPos);
	TUString::StrCat(pszTitle, TUSTR_Kx_Anti_Slash);
	TUString::StrCat(pszTitle, pszPicNum);			
	TUString::StrCat(pszTitle, TUSTR_Kx_Right_Parenthesis);


	TLabel* pTotalPhotoLabel =static_cast<TLabel*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_PhotoTitleLbl));	
	if(pTotalPhotoLabel)
	{						
		pTotalPhotoLabel->SetCaption(pszTitle,FALSE);		
	}

	return 0;
}
Int32 TPhotoDetailForm::_ViewPhoto(TApplication* pApp, KX_ViewPhotoType ShowType)
{
	int iRet = eFailed;
	tResponseAlbumPhoto* Response = NULL;
	if(strcmp(m_photodata.picnum,"1")==0)
	{
		return 0;//无上下张可看 直接返回
	}

	if(m_photodata.dataFrom == 1)
	{
		iRet = KaiXinAPI_JsonParse(KX_AlbumPhotoFromNews, (void **)&Response);
	}
	else
	{
		iRet = KaiXinAPI_JsonParse(KX_AlbumPhoto, (void **)&Response);
	}

	if(iRet == eSucceed)
	{
		int CurrIndex = m_photodata.pos - 1;
		int MaxIndex = Response->nSize_photos - 1;
		int NewIndex = 0;
		switch(ShowType)
		{	
		case KX_PrePhoto:
			{	
				NewIndex = ((CurrIndex - 1) >= 0)?(CurrIndex - 1):MaxIndex;
				break;
			}
		case KX_NextPhoto:
			{
				NewIndex = ((CurrIndex + 1) <= MaxIndex)?(CurrIndex + 1):0;
				break;
			}
		default:
			break;		
		}
		STRCPY_Ex(m_photodata.pid, Response->photos[NewIndex].pid);
		STRCPY_Ex(m_photodata.title, Response->photos[NewIndex].title);
		STRCPY_Ex(m_photodata.thumbnail, Response->photos[NewIndex].thumbnail);
		STRCPY_Ex(m_photodata.large, Response->photos[NewIndex].large);
		STRCPY_Ex(m_photodata.privacy, Response->photos[NewIndex].privacy);
		m_photodata.pos = NewIndex + 1;//所在位置为数组下标增加1
		STRCPY_Ex(m_photodata.ctimeString, Response->photos[NewIndex].ctime);	
		m_photodata.cnum = Response->photos[NewIndex].cnum;

		_SetCtrlsData(pApp);
	}
	else
	{
		//若取不到专辑数据则查看按钮也不可使用
		_SetViewButtonEnabled(FALSE);
	}

	if(Response)
	{
		delete Response;
	}
	return 0;

}

Int32 TPhotoDetailForm::_SetViewButtonEnabled(Boolean bEnabled)
{
	TButton* pPrePhotoBtn =static_cast<TButton*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_PrePhotoBtn)); 
	TButton* pNextPhotoBtn =static_cast<TButton*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_NexPhotoBtn)); 
	if(pPrePhotoBtn && pNextPhotoBtn)
	{		
		pPrePhotoBtn->SetEnabled(bEnabled);
		pNextPhotoBtn->SetEnabled(bEnabled);
	}
	return 0;
}

#if 0
Int32 TPhotoDetailForm::_CreatePhotoImage(TApplication* pApp)
{

	TPanel* pTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_PhotoDetailForm_PhotoDetailPanel));
	if(pTPanel)
	{		
		TRectangle obBtnRec;
		//pTPanel->SetScrollBar(CTL_SCL_MODE_BOTH);
		pTPanel->SetTransparent(FALSE);
		//pTPanel->SetColor(CTL_COLOR_TYPE_FORE, GRAY);
		pTPanel->SetColor(CTL_COLOR_TYPE_BACK, GRAY);

		//const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_RegisterInterface_Top);
		//this->SetBackGroundBitmap(pImgNormal,0);

		KaiXinAPICommon_DownloadPhoto(m_photodata.large, this->GetWindowHwndId(), 0);

		//创建TImage 
		pPhotoImage = new TImage;		
		obBtnRec.SetRect(KX_PHOTO_DETAIL_IMAGE_X, KX_PHOTO_DETAIL_IMAGE_Y, KX_PHOTO_DETAIL_IMAGE_W,KX_PHOTO_DETAIL_IMAGE_H);

		if(pPhotoImage->Create(pTPanel))
		{		
			pPhotoImage->SetBounds(&obBtnRec);	
			nPhotoImage = pPhotoImage->GetId();//save TImage ID
			//pPhotoImage->SetBitmapByResId(APP_KA_ID_BITMAP_albumdefaultpic);
			pPhotoImage->SetEnabled(TRUE);
			pPhotoImage->SetTransVisible(TRUE);
			pPhotoImage->Show(TRUE);		
		}

		//创建标签显示照片Title
		TFont tFont;
		TUChar pszTitle[256]={0};
		TUChar pszPicPos[8]={0};
		TUChar pszPicNum[32]={0};

		TUString::StrUtf8ToStrUnicode(pszTitle, (Char *)m_photodata.title);
		TUString::StrUtf8ToStrUnicode(pszPicNum, (Char *)m_photodata.picnum);			
		TUString::StrIToA(pszPicPos, m_photodata.pos);

		TUString::StrCat(pszTitle, (TUChar*)L" ");
		TUString::StrCat(pszTitle, (TUChar*)L"(");
		TUString::StrCat(pszTitle, pszPicPos);
		TUString::StrCat(pszTitle, (TUChar*)L"/");
		TUString::StrCat(pszTitle, pszPicNum);			
		TUString::StrCat(pszTitle, (TUChar*)L")");


		TLabel* pTotalPhotoLabel =new TLabel;			
		obBtnRec.SetRect(KX_PHOTO_DETAIL_TITLE_X,KX_PHOTO_DETAIL_TITLE_Y, KX_PHOTO_DETAIL_TITLE_W, KX_PHOTO_DETAIL_TITLE_H);
		if(pTotalPhotoLabel->Create(pTPanel))
		{		
			pTotalPhotoLabel->SetAutoSize(TRUE);
			pTotalPhotoLabel->SetBounds(&obBtnRec);					
			pTotalPhotoLabel->SetCaption(pszTitle,FALSE);
			tFont = pTotalPhotoLabel->GetFont();
			tFont.Create(14, 14);
			pTotalPhotoLabel->SetFont(tFont);
			pTotalPhotoLabel->SetColor(CTL_COLOR_TYPE_FORE, BLUE);
			pTotalPhotoLabel->SetEnabled(FALSE);
			pTotalPhotoLabel->Show(TRUE);		
		}		

	}
	return 0;
}
#endif

