/*!
* \file	 KaiXinApp_PokeList.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 动它一下
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#if(LCD_SIZE == LCD_HVGA )
#define POKE_W  (100)
#define POKE_H	(24)
#elif(LCD_SIZE == LCD_WVGA )
#define POKE_W	(150)
#define POKE_H	(36)
#endif

void* KaiXinAPI_PokeList_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponsePokeList*  Response = new tResponsePokeList;
	memset(Response, 0 , sizeof(tResponsePokeList));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "pokes");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_pokes = nSize1;
			if( nSize1 != 0 )
			{
				Response->pokes = NULL;
				Response->pokes = (PokeList_pokes*) malloc(sizeof( PokeList_pokes ) * nSize1 );
				memset(Response->pokes, 0 , sizeof(PokeList_pokes) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "action");
				if(pTemp1)
				{
					STRCPY_Ex(Response->pokes[i].action, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "actionname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->pokes[i].actionname, pTemp1->valuestring);
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

void* KaiXinAPI_SendPoke_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseSendPoke*  Response = new tResponseSendPoke;
	memset(Response, 0 , sizeof(tResponseSendPoke));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "wordsucc");
		if(pTemp0)
		{
			STRCPY_Ex(Response->wordsucc, pTemp0->valuestring);
		}


	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}


// 构造函数
TPokeListForm::TPokeListForm(TApplication* pApp):TWindow(pApp)
{
	//Create(APP_KA_ID_KaiXinHomePage);
}

TPokeListForm::TPokeListForm(TApplication* pApp, PokeUserData userData):TWindow(pApp)
{
	mUserData = userData;

	Create(APP_KA_ID_PokeListForm);
}
// 析构函数
TPokeListForm::~TPokeListForm(void)
{
	if(Response)
	{
		delete Response;
	}
}

// 窗口事件处理
Boolean TPokeListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-44, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			switch(notifyData.nAccessType)
			{
			case KX_SendPoke: 					
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_SendPoke))
					{				
						TUChar wordSucc[256] = {0};
						//TUChar sWordSucc[256] = {0};
						int iRet = eFailed;
						tResponseSendPoke*	SendPokeResponse = NULL;

						iRet = KaiXinAPI_JsonParse(KX_SendPoke, (void **)&SendPokeResponse);
						if(iRet)
						{
							TUString::StrUtf8ToStrUnicode(wordSucc,(const Char *)SendPokeResponse->wordsucc);
							//TUString::StrPrintF(sWordSucc,wordSucc,mUserData.name,mUserData.name);
							pApp->MessageBox(wordSucc,TResource::LoadConstString(APP_KA_ID_STRING_Poke),WMB_OK);	
						}

						if(SendPokeResponse)
						{
							delete SendPokeResponse;
						}
					}
					else//动它一下失败
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Poke),WMB_OK);	
					}
					break;
				}			
			default:
				break;
			}

			bHandled = TRUE;
			break;			
		}	
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TPokeListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	TFont objFontType;
	objFontType.Create(FONT_CONTENT, FONT_CONTENT);

	m_BackBtn = SetAppBackButton(this);	
	SetAppTilte(this,APP_KA_ID_STRING_Poke);//设置标题

	TLabel *pPokeFriend = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_PokeListForm_ChoosePokeFriend));
	if(pPokeFriend)
	{	
		pPokeFriend->SetFont(objFontType); 		
	}

	TLabel *pChoosePoke = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_PokeListForm_ChoosePokeLabel));
	if(pChoosePoke)
	{		
		pChoosePoke->SetFont(objFontType); 		
	}

	TCheckBox *pPrivacyCheckBox = static_cast<TCheckBox*>(GetControlPtr(APP_KA_ID_PokeListForm_PrivacyCheckBox));
	if(pPrivacyCheckBox)
	{
		pPrivacyCheckBox->SetFont(objFontType); 		
	}	

	TLabel *pPrivacyTextLabel = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_PokeListForm_PrivacyTextLabel));
	if(pPrivacyTextLabel)
	{		
		pPrivacyTextLabel->SetFont(objFontType); 		
	}

	TButton *pSendPokeButton = static_cast<TButton*>(GetControlPtr(APP_KA_ID_PokeListForm_SendPokeButton));
	if(pSendPokeButton)
	{		
		pSendPokeButton->SetFont(objFontType); 		
	}

	TLabel *pFriendName = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_PokeListForm_PokeFriendName));
	if(pFriendName)
	{

		objFontType.Create(FONT_CONTENT, FONT_CONTENT, FONT_STYLE_BOLD);
		pFriendName->SetCaption(mUserData.name,FALSE);		
		pFriendName->SetFont(objFontType); 		
	}	

	_SetPokeList(pApp);	
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TPokeListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TPokeListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	switch(pEvent->sParam1)
	{
	case APP_KA_ID_PokeListForm_SendPokeButton:
		{
			//设置action
			for(int i = 0; i < Response->nSize_pokes; i++)
			{
				if(tRadioBtn[i] && tRadioBtn[i]->GetValue() == TRUE)
				{
					Set_Url_Params(KX_SendPoke, "action", Response->pokes[i].action);
					break;
				}			
			}

			//设置动一下好友id
			Set_Url_Params(KX_SendPoke, "touid", mUserData.uid);

			//设置是否私密
			TCheckBox *pPrivacyCheckBox = static_cast<TCheckBox*>(GetControlPtr(APP_KA_ID_PokeListForm_PrivacyCheckBox));
			if(pPrivacyCheckBox && pPrivacyCheckBox->GetValue() == TRUE)
			{
				Set_Url_Params(KX_SendPoke, "private", "1");		
			}
			else
			{
				Set_Url_Params(KX_SendPoke, "private", "0");
			}

			KaiXinAPICommon_Download(KX_SendPoke, this->GetWindowHwndId());
			break;
		}
	default:
		break;
	}

	return bHandled;
}

Int32 TPokeListForm::_SetPokeList(TApplication * pApp)
{
	int iRet = eFailed;
	iRet = KaiXinAPI_JsonParse(KX_PokesList, (void **)&this->Response);

	TPanel *pPokeListPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_PokeListForm_PokeListPanel));

	if(iRet == eSucceed && pPokeListPanel)
	{
		TRectangle rect(10,10,100,24);
		TFont tFont;
		TUChar RadioCaption[32] = {0};
		pPokeListPanel->Show(TRUE);

		tFont.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);

		for(int i = 0; i < Response->nSize_pokes; i++)
		{
			tRadioBtn[i] = NULL;
			tRadioBtn[i] = new TRadioButton;	
			rect.SetRect(20+(i%2)*(POKE_W+40), 10+(i/2)*POKE_H, POKE_W, POKE_H);

			if(tRadioBtn[i]->Create(pPokeListPanel))
			{
				TUString::StrUtf8ToStrUnicode(RadioCaption,(const Char *)Response->pokes[i].actionname);
				if(i==0)
				{
					tRadioBtn[i]->SetValue(TRUE);
				}
				tRadioBtn[i]->SetBounds(&rect);
				tRadioBtn[i]->SetFont(tFont);
				tRadioBtn[i]->SetCaption(RadioCaption,FALSE);
				tRadioBtn[i]->SetGroupID(1);
				tRadioBtn[i]->Show(TRUE);
			}
		}
	}	
	return 0;
}

