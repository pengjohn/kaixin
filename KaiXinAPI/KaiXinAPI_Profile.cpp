/*!
* \file	 KaiXinAPI_Profile.cpp
* \author	 huxianxiang@GoZone
* \date	 2010-11-8
* \brief  解析与UI: 我的首页
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/


#include "KaiXinAPICommon.h"


//用户Image Index
#define KX_INFOS_USER_IMAGE_INDEX	(0)

//For Photo
#define KX_INFOS_PHOTO_X		(5)
#define KX_INFOS_PHOTO_Y		(5)
#define KX_INFOS_PHOTO_WIDTH	(60)
#define KX_INFOS_PHOTO_HEIGHT	(60)

//For Star Icon
#define KX_INFOS_STAR_X			(75)
#define KX_INFOS_STAR_Y			(59)
#define KX_INFOS_STAR_WIDTH		(10)
#define KX_INFOS_STAR_HEIGHT	(12)

//For User Name
#define KX_INFOS_NAME_X			(KX_INFOS_STAR_X)//默认跟机构的坐标一样，如果用户属于机构，则做相应调整
#define KX_INFOS_NAME_Y			(56)
#define KX_INFOS_NAME_WIDTH		(60)
#define KX_INFOS_NAME_HEIGHT	(20)

//For friends count
#define KX_INFOS_FRIENDS_X			(75)
#define KX_INFOS_FRIENDS_Y			(77)
#define KX_INFOS_FRIENDS_WIDTH		(80)
#define KX_INFOS_FRIENDS_HEIGHT		(16)


//各项字体
#define KX_INFOS_FONT_SIZE_FNAME	(16)
#define KX_INFOS_FONT_SIZE_CONTENT	(12)
#define KX_INFOS_FONT_SIZE_STIME	(12)
#define KX_INFOS_FONT_SIZE_STATUS	(14)
#define KX_INFOS_FONT_SIZE_Friends	(12)

#if(LCD_SIZE == LCD_HVGA )
#define FUNCTION_H	(187)

#define FUNCTION_CAPTION_Y		(38)

#define FUNCTION_BUTTON_X		(10)
#define FUNCTION_BUTTON_Y		(SCR_H - STATUSBAR_H - BOTTOM_TAB_H - FUNCTION_H)
#define FUNCTION_BUTTON_W		(100)
#define FUNCTION_BUTTON_H		(60)

#elif(LCD_SIZE == LCD_WVGA )
#define FUNCTION_H	(281)

#define FUNCTION_CAPTION_Y		(60)

#define FUNCTION_BUTTON_X		(10)
#define FUNCTION_BUTTON_Y		(SCR_H - STATUSBAR_H - BOTTOM_TAB_H - FUNCTION_H)
#define FUNCTION_BUTTON_W		(150)
#define FUNCTION_BUTTON_H		(90)

#endif

void* KaiXinAPI_Profile_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseProfile*  Response = new tResponseProfile;
	memset(Response, 0 , sizeof(tResponseProfile));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->uid, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "indexprivacy");
		if(pTemp0)
		{
			Response->indexprivacy = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "realname");
		if(pTemp0)
		{
			STRCPY_Ex(Response->realname, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "note");
		if(pTemp0)
		{
			STRCPY_Ex(Response->note, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "notetime");
		if(pTemp0)
		{
			Response->notetime = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "stime");
		if(pTemp0)
		{
			STRCPY_Ex(Response->stime, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "online");
		if(pTemp0)
		{
			Response->online = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "gender");
		if(pTemp0)
		{
			Response->gender = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "istar");
		if(pTemp0)
		{
			Response->istar = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "ismyfriend");
		if(pTemp0)
		{
			Response->ismyfriend = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "logo");
		if(pTemp0)
		{
			STRCPY_Ex(Response->logo, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "logo90");
		if(pTemp0)
		{
			STRCPY_Ex(Response->logo90, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			Response->total = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "vcount");
		if(pTemp0)
		{
			Response->vcount = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "starintro");
		if(pTemp0)
		{
			STRCPY_Ex(Response->starintro, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "news");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_news = nSize1;
			if( nSize1 != 0 )
			{
				Response->news = NULL;
				Response->news = (Profile_news*) malloc(sizeof( Profile_news ) * nSize1 );
				memset(Response->news, 0 , sizeof(Profile_news) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->news[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->news[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ntype");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].ntype, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ntypename");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].ntypename, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					Response->news[i].ctime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "stime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].stime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "intro");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].intro, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "privacy");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].privacy, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "thumbnail");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].thumbnail, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "id");
				if(pTemp1)
				{
					Response->news[i].id = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "star");
				if(pTemp1)
				{
					Response->news[i].star = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "cnum");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].cnum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "upnum");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].upnum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "title");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].title, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "commentflag");
				if(pTemp1)
				{
					Response->news[i].commentflag = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "imglist");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->news[i].nSize_imglist = nSize2;
					if( nSize2 != 0 )
					{
						Response->news[i].imglist = NULL;
						Response->news[i].imglist = (Profile_imglist*) malloc(sizeof( Profile_imglist ) * nSize2 );
						memset(Response->news[i].imglist, 0 , sizeof(Profile_imglist) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "pid");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].pid, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "title");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].title, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "thumbnail");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].thumbnail, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "large");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].large, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "privacy");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].privacy, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "albumid");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].albumid, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "albumtitle");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].albumtitle, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "picnum");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].picnum, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "pos");
						if(pTemp2)
						{
							Response->news[i].imglist[j].pos = pTemp2->valueint;
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "ctime");
						if(pTemp2)
						{
							Response->news[i].imglist[j].ctime = pTemp2->valueint;
						}

					}
				}				pTemp1 = cJSON_GetObjectItem(Item1, "replist");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->news[i].nSize_replist = nSize2;
					if( nSize2 != 0 )
					{
						Response->news[i].replist = NULL;
						Response->news[i].replist = (Profile_replist*) malloc(sizeof( Profile_replist ) * nSize2 );
						memset(Response->news[i].replist, 0 , sizeof(Profile_replist) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "id");
						if(pTemp2)
						{
							Response->news[i].replist[j].id = pTemp2->valueint;
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "title");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].replist[j].title, pTemp2->valuestring);
						}

					}
				}
			}
		}		pTemp0 = cJSON_GetObjectItem(json, "applist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_applist = nSize1;
			if( nSize1 != 0 )
			{
				Response->applist = NULL;
				Response->applist = (Profile_applist*) malloc(sizeof( Profile_applist ) * nSize1 );
				memset(Response->applist, 0 , sizeof(Profile_applist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "aid");
				if(pTemp1)
				{
					STRCPY_Ex(Response->applist[i].aid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "num");
				if(pTemp1)
				{
					STRCPY_Ex(Response->applist[i].num, pTemp1->valuestring);
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

void* KaiXinAPI_GetStatus_JsonParse(char *text)

{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGetStatus*  Response = new tResponseGetStatus;
	memset(Response, 0 , sizeof(tResponseGetStatus));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "realname");
		if(pTemp0)
		{
			STRCPY_Ex(Response->realname, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "note");
		if(pTemp0)
		{
			STRCPY_Ex(Response->note, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "notetime");
		if(pTemp0)
		{
			Response->notetime = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "stime");
		if(pTemp0)
		{
			STRCPY_Ex(Response->stime, pTemp0->valuestring);
		}			
	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

//GetFriendCount
void* KaiXinAPI_GetFriendCount_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGetFriendCount*  Response = new tResponseGetFriendCount;
	memset(Response, 0 , sizeof(tResponseGetFriendCount));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			Response->total = pTemp0->valueint;
		}


	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

//GetAlbumCount
void* KaiXinAPI_GetAlbumCount_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGetAlbumCount*  Response = new tResponseGetAlbumCount;
	memset(Response, 0 , sizeof(tResponseGetAlbumCount));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	pTemp0 = cJSON_GetObjectItem(json,"n");
	if (pTemp0)
	{
		Response->n = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "albums");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_albums = nSize1;
			if( nSize1 != 0 )
			{
				Response->albums = NULL;
				Response->albums = (GetAlbumCount_albums*) malloc(sizeof( GetAlbumCount_albums ) * nSize1 );
				memset(Response->albums, 0 , sizeof(GetAlbumCount_albums) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "picnum");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->albums[i].picnum, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->albums[i].picnum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "albumid");
				if(pTemp1)
				{
					if(IsNullString(pTemp1->valuestring) == FALSE)
						STRCPY_Ex(Response->albums[i].albumid, pTemp1->valuestring);
					else
						sprintf(Response->albums[i].albumid, "%d", pTemp1->valueint);
				}
			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

//GetDiaryCount
void* KaiXinAPI_GetDiaryCount_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGetDiaryCount*  Response = new tResponseGetDiaryCount;
	memset(Response, 0 , sizeof(tResponseGetDiaryCount));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			if(IsNullString(pTemp0->valuestring))
				sprintf(Response->total, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->total, pTemp0->valuestring);
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

//GetRepasteCount
void* KaiXinAPI_GetRepasteCount_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGetRepasteCount*  Response = new tResponseGetRepasteCount;
	memset(Response, 0 , sizeof(tResponseGetRepasteCount));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			if(IsNullString(pTemp0->valuestring))
				sprintf(Response->total, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->total, pTemp0->valuestring);
		}
	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

//GetRecordCount
void* KaiXinAPI_GetRecordCount_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseGetRecordCount*  Response = new tResponseGetRecordCount;
	memset(Response, 0 , sizeof(tResponseGetRecordCount));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			if(IsNullString(pTemp0->valuestring))
				sprintf(Response->total, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->total, pTemp0->valuestring);
		}
	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}


// 构造函数
TProfileForm::TProfileForm(TApplication * pApp):TWindow(pApp)
{
	Response = NULL;
	pUserImageBmp = NULL;
	m_ExitBtn = -1;
	m_RefreshBtn = -1;
	m_StatusID = -1;
	
	Create(APP_KA_ID_ProfileForm);
}
// 析构函数
TProfileForm::~TProfileForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if(Response)
	{
		delete Response;
	}

	if( pUserImageBmp != NULL)
	{
		pUserImageBmp->Destroy();
		pUserImageBmp = NULL; 								
	}
}

Boolean TProfileForm::EventHandler( TApplication * pApp, EventType *pEvent )
{
	Boolean bHandled = FALSE;
	switch( pEvent->eType )
	{
	case EVENT_WinInit:
		{
			// Do initialization here
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlFocusEvent(pApp, pEvent);
		}
		break;		
	case EVENT_CtrlSelect:
		{

			// 处理控件点击事件或响应事件
			bHandled = _OnCtlSelectEvent( pApp, pEvent );

		}
		break;		
	case EVENT_WinClose:
		{
			// Do uninitialization here
		}
		break;
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_function_bg), 0, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H - FUNCTION_H), SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);
			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-44, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;			
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{	
					//下载完后跟新缩略图图标
					if(notifyData.nParam == KX_INFOS_USER_IMAGE_INDEX)
					{
						TBitmap* pDownLoadBitmap = NULL;
						
						if( pUserImageBmp != NULL)
						{
							pUserImageBmp->Destroy();
							pUserImageBmp = NULL;								
						}
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);							
						if(pDownLoadBitmap)
						{

							TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_ProfileForm_MyHeadMaskButton));
							if(pMyHeadMBtn)
							{
								TRectangle rc;

								pUserImageBmp = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
								pUserImageBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));				

								pMyHeadMBtn->GetBounds(&rc);
								pMyHeadMBtn->SetImage(pUserImageBmp,(rc.Width()-pUserImageBmp->GetWidth())/2, (rc.Height()-pUserImageBmp->GetHeight())/2);
								pMyHeadMBtn->Draw();
							}
							//释放图片
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL; 	

							//先保存个人头像路径
							Char logoPath[256] = {0};
							TUString::StrUnicodeToStrUtf8(logoPath, notifyData.pszFilePath);
							STRCPY_Ex(KaiXinUserInfo.logoPath, (char*)logoPath);
						}						
					}

					break;
				}
			case KX_UpdateStatus:
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_UpdateStatus))
					{
						KaiXinAPICommon_Download(KX_GetStatus, this->GetWindowHwndId());
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK); 
					}					
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					break;
				}						
			case KX_PostDiary:
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_PostDiary))
					{
						Set_Url_Params(KX_GetDiaryCount, "fuid", KaiXinUserInfo.uid);		
						KaiXinAPICommon_Download(KX_GetDiaryCount, this->GetWindowHwndId());
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK); 
					}					
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					break;
				}
			case KX_WriteRecord:				
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_WriteRecord))
					{
						Set_Url_Params(KX_GetRecordCount, "fuid", KaiXinUserInfo.uid);		
						KaiXinAPICommon_Download(KX_GetRecordCount, this->GetWindowHwndId());
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					break;
				}
			case KX_GetFriendCount:
			case KX_GetAlbumCount:
			case KX_GetDiaryCount:
			case KX_GetRepasteCount:
			case KX_GetRecordCount:						
				{
					this->_SetCountToCtrls(pApp, notifyData.nAccessType);
					break;
				}
			case KX_GetStatus:						
				{
					//更新状态显示
					int iRet = eFailed;
					tResponseGetStatus* StatusResponse = NULL;
					iRet = KaiXinAPI_JsonParse(KX_GetStatus, (void **)&StatusResponse);
					if(StatusResponse)
					{
						TUChar pszStatus[KAIXIN_STATUS_LENTH] = {0};	
						TUChar pszDateTime[32] = {0};
						TUChar pszDateTimeCaption[64] = {0};

						TRichView *pStatus = static_cast<TRichView*>(GetControlPtr(APP_KA_ID_ProfileForm_RichViewStatus));
						//TRichView *pStatus = static_cast<TRichView*>(GetControlPtr(m_StatusID));
						if(pStatus)
						{
							//Panel坐标复位
							TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_ProfileForm_ProfilePanel));
							pPanel->SetOrigin(0, 0);
													
							//先保存个人状态
							STRCPY_Ex(KaiXinUserInfo.status, StatusResponse->note);						
							TUString::StrUtf8ToStrUnicode(pszStatus, (const Char *)StatusResponse->note); 
							pStatus->SetCaption(pszStatus,FALSE);

							Int32 nLineCount =  pStatus->GetLinesCount();
							if(nLineCount <16)
								nLineCount = 16;
							pStatus->SetMaxVisibleLines(nLineCount, TRUE);	
						}

						TLabel *pStatusDateTime = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_ProfileForm_DateTime));
						if(pStatusDateTime)
						{
							if(strcmp(Response->note,"")==0)
							{				
								TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Left_Parenthesis);
								TUString::StrCat(pszDateTimeCaption, TResource::LoadConstString(APP_KA_ID_STRING_NoState)); 
								TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Right_Parenthesis);	
							}
							else
							{
								TUString::StrUtf8ToStrUnicode(pszDateTime, (const Char *)StatusResponse->stime);
								TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Left_Parenthesis);
								TUString::StrCat(pszDateTimeCaption, pszDateTime);
								TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Right_Parenthesis);
							}

							pStatusDateTime->SetCaption(pszDateTimeCaption,FALSE);			 
						}

						delete StatusResponse;
						StatusResponse = NULL;
					}

					break;
				}			
			case KX_UploadPhoto:
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_UploadPhoto))
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_PhotoUploadSuccess),TResource::LoadConstString(APP_KA_ID_STRING_UploadPhotos),WMB_OK); 					
						Set_Url_Params(KX_GetAlbumCount, "fuid", KaiXinUserInfo.uid);		
						KaiXinAPICommon_Download(KX_GetAlbumCount, this->GetWindowHwndId());
					}
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_UploadPhotos),WMB_OK);	
					}
					break;
				}				
			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == StatusUpdateEdit)
			{ 				
				Set_Url_Params(KX_UpdateStatus, "state", notifyData.PostMsgData.statusupdatedata.pszStateContent);									
				KaiXinAPICommon_Download(KX_UpdateStatus, this->GetWindowHwndId());		
			}
			else if(notifyData.nEditType == NewDiaryEdit)
			{						
				Set_Url_Params(KX_PostDiary, "title", (char*)notifyData.PostMsgData.diarydata.pszEditTitle);
				Set_Url_Params(KX_PostDiary, "content", (char*)notifyData.PostMsgData.diarydata.pszEditContent);				

				KaiXinAPICommon_Download(KX_PostDiary, this->GetWindowHwndId()); 		
			}
			else if(notifyData.nEditType == NewRecordEdit)
			{  
				Set_Url_Params(KX_WriteRecord, "privacy", "0");
				Set_Url_Params(KX_WriteRecord, "reccont", (char*)notifyData.PostMsgData.recorddata.pszRecordContent);					

				KaiXinAPICommon_Download(KX_WriteRecord, this->GetWindowHwndId());				
			}

			bHandled = TRUE;
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_ExitBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;		

	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}
	return bHandled;

}
Boolean TProfileForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//init login form
	int iRet = eFailed;
	iRet = KaiXinAPI_JsonParse(KX_Profile, (void **)&this->Response);

	m_RefreshBtn = SetAppRefreshButton(this);
	m_ExitBtn = SetAppExitButton(this);
	SetAppTilte(this,APP_KA_ID_STRING_MyInfos);
	_CreateFunctionButtons(pApp);
	_CreateTabButtons(pApp);

	if(iRet == eSucceed)
	{
		//先保存个人状态
		STRCPY_Ex(KaiXinUserInfo.status, Response->note);

		_DownloadCountJason();
		_SetDataToCtrls(pApp);
	}
	return TRUE;
}

Boolean TProfileForm::_OnCtlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean 	bHandled = FALSE;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);

	if(pEvent->sParam1 == this->m_nNewsBtnID)//动态
	{
		//如果原先就有窗口 要先删除掉 或者怎样，有待研究
		KaiXinAPICommon_Download(KX_UpdateFriendsNews, this->GetWindowHwndId());
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == this->m_nFriendsBtnID)//好友
	{
		KaiXinAPICommon_Download(KX_FriendList, this->GetWindowHwndId());
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == this->m_nInfosBtnID)//我的地盘
	{		
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == this->m_nAppsBtnID)//组件
	{
		App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_APPLIST, NULL, 0, 0, 0);			
		//KaiXinAPICommon_Download(KX_ApplicationList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == this->m_nMoreBtnID)//更多
	{
		//TMoreForm *pComm = new TMoreForm( pApp );

		App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_MORE, NULL, 0, 0, 0);			
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_ExitBtn)//退出
	{
		App_PostMessageEx(&gtidMain, MSG_EXIT, NULL, 0, 0, 0);	
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_RefreshBtn)//刷新
	{
		KaiXinAPICommon_Download(KX_Profile, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nPhotosBtnID)//照片
	{
		Set_Url_Params(KX_AlbumList, "fuid", KaiXinUserInfo.uid);			
		KaiXinAPICommon_Download(KX_AlbumList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nDiarysBtnID)//日记
	{
		//获取自己的DiaryList也需要传fuid , 和API文档有差异
		Set_Url_Params(KX_DiaryList, "fuid", KaiXinUserInfo.uid);			
		KaiXinAPICommon_Download(KX_DiaryList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nRecordsBtnID)//记录
	{

		//获取自己的RecordList也需要传fuid , 和API文档有差异
		Set_Url_Params(KX_RecordList, "fuid", KaiXinUserInfo.uid);			
		KaiXinAPICommon_Download(KX_RecordList, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nRepastesBtnID)//转帖
	{
		//获取自己的RepasteIndex也需要传fuid , 和API文档有差异
		Set_Url_Params(KX_RepasteIndex, "fuid", KaiXinUserInfo.uid);
		Set_Url_Params(KX_RepasteIndex, "lasturpid", "");		
		KaiXinAPICommon_Download(KX_RepasteIndex, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nRecentNewsBtnID)//最新动态
	{
		Set_Url_Params(KX_RecentNews, "fuid", KaiXinUserInfo.uid);			
		KaiXinAPICommon_Download(KX_RecentNews, this->GetWindowHwndId());
		bHandled = TRUE;
	}	
	else if(pEvent->sParam1 == m_nMessageCenterBtnID)//消息中心
	{
		//KaiXinAPICommon_Download(KX_MessageCenter, this->GetWindowHwndId());
		App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_MESSAGE_CENTER, NULL, 0, 0, 0);	
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nUploadPhotoBtnID)//传照片
	{
		PopBox_UploadPhoto(pApp, this->GetWindowHwndId());
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nWriteDiaryBtnID)//写日记
	{
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = NewDiaryEdit;

		TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_nWriteRecordBtnID)//写记录
	{
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = NewRecordEdit;

		TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
		bHandled = TRUE;
	}
	else if(pEvent->sParam1 == m_StatusID)
	{
	}		
	else
	{
		switch(pEvent->sParam1)
		{
		case APP_KA_ID_ProfileForm_ViewDetail://详情
			{
				//just for test will be modify later
				Set_Url_Params(KX_GetProfileDetail, "uids", KaiXinUserInfo.uid);
				KaiXinAPICommon_Download(KX_GetProfileDetail, this->GetWindowHwndId());			
				bHandled = TRUE;
				break;
			}		
		case APP_KA_ID_ProfileForm_RichViewStatus:
			{
				PostNotifyMsgDataType in_msgData;
				//TUChar pszStateContent[1024];

				MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
				//memset(pszStateContent, 0, sizeof(pszStateContent));		

				in_msgData.nCtrlId = 0;
				in_msgData.nHwndId = this->GetWindowHwndId();
				in_msgData.nEditType = StatusUpdateEdit;

				//content
				//STRCPY_Ex(in_msgData.PostMsgData.statusupdatedata.pszStateContent,KaiXinUserInfo.status);

				TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);

				bHandled = TRUE;
				break;
			}		
	
		default:
			break;		
		}
	}
	return bHandled;
}

Boolean TProfileForm::_OnCtrlFocusEvent(TApplication* pApp, EventType* pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->sParam1)
	{	
	case APP_KA_ID_ProfileForm_RichViewStatus:
		{
			this->SetFocus(m_RefreshBtn);
			bHandled = TRUE;
		}
		break;	
	default:

		break;   
	}

	return bHandled;
}
void TProfileForm::_DownloadCountJason()
{
	KaiXinAPICommon_Download(KX_GetFriendCount, this->GetWindowHwndId());

	Set_Url_Params(KX_GetAlbumCount, "fuid", KaiXinUserInfo.uid);	
	KaiXinAPICommon_Download(KX_GetAlbumCount, this->GetWindowHwndId());

	Set_Url_Params(KX_GetDiaryCount, "fuid", KaiXinUserInfo.uid);	
	KaiXinAPICommon_Download(KX_GetDiaryCount, this->GetWindowHwndId());

	Set_Url_Params(KX_GetRepasteCount, "fuid", KaiXinUserInfo.uid);	
	KaiXinAPICommon_Download(KX_GetRepasteCount, this->GetWindowHwndId());

	Set_Url_Params(KX_GetRecordCount, "fuid", KaiXinUserInfo.uid);		
	KaiXinAPICommon_Download(KX_GetRecordCount, this->GetWindowHwndId());	
}

void TProfileForm::_SetCountToCtrls(TApplication* pApp, Int32 accessType)
{
	TUChar pszCaption[64] = {0};
	TUChar pszCount[32] = {0};
	Int32 CaptionX = 0;
	TFont tFont;	

	tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);

	switch(accessType)
	{
	case KX_GetFriendCount:
		{
			int iRet = eFailed;
			tResponseGetFriendCount* Response = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetFriendCount, (void **)&Response);	

			if(Response)
			{
				TLabel *pTCtrl = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_ProfileForm_FriendsLbl));				
				TUString::StrIToA(pszCount,Response->total);
				if(pTCtrl)
				{
					TUString::StrCopy(pszCaption, pTCtrl->GetCaption());
					TUString::StrCat(pszCaption, TUSTR_Kx_Empty_Cell);					
					TUString::StrCat(pszCaption, pszCount);
					pTCtrl->SetCaption(pszCaption,FALSE);
				}
				delete Response;
				Response = NULL;
			}

			break;
		}
	case KX_GetAlbumCount:
		{

			int iRet = eFailed;
			tResponseGetAlbumCount* Response = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetAlbumCount, (void **)&Response);	

			if(Response)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nPhotosBtnID));				
				//TUString::StrIToA(pszCount,Response->n);//这里应该是总的照片数，而非专辑数
				int nTotalPhoto = 0;
				TUChar pszTemp[16] = {0};
				for(int i = 0; i < Response->nSize_albums; i++)
				{				
					//头像照(id=0, albumid=""),暂时不支持,直接跳过
					if(strcmp(Response->albums[i].albumid, "0") == 0)
					{
						continue;
					}					
					TUString::StrUtf8ToStrUnicode(pszTemp, (Char*)Response->albums[i].picnum);
					nTotalPhoto = nTotalPhoto + TUString::StrAToI(pszTemp);
				}
				TUString::StrIToA(pszCount,nTotalPhoto);
				if(pTCtrl)
				{
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_PhotosNum),pszCount);		
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					if(nTotalPhoto != 0)
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete Response;
				Response = NULL;
			}				

			break;
		}			
	case KX_GetDiaryCount: 
		{
			int iRet = eFailed;
			tResponseGetDiaryCount* Response = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetDiaryCount, (void **)&Response);	

			if(Response)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nDiarysBtnID));				
				//TUString::StrIToA(pszCount,Response->total);
				TUString::StrUtf8ToStrUnicode(pszCount,(Char*)Response->total);
				if(pTCtrl)
				{
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_DiarysNum),pszCount);
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					if(strcmp(Response->total, "0") != 0)
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete Response;
				Response = NULL;
			}

			break;
		}			
	case KX_GetRepasteCount:
		{
			int iRet = eFailed;
			tResponseGetRepasteCount* Response = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetRepasteCount, (void **)&Response);	

			if(Response)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nRepastesBtnID));				
				TUString::StrUtf8ToStrUnicode(pszCount,(Char*)Response->total);
				
				if(pTCtrl)
				{
					//TUString::StrCopy(pszCaption, pTCtrl->GetCaption());
					//TUString::StrCat(pszCaption, TUSTR_Kx_Left_Parenthesis);
					//TUString::StrCat(pszCaption, pszCount);
					//TUString::StrCat(pszCaption, TUSTR_Kx_Right_Parenthesis);
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_RepasteNum),pszCount);
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					
					if(strcmp(Response->total, "0") != 0)	
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete Response;
				Response = NULL;
			}

			break;
		}
	case KX_GetRecordCount: 					
		{
			int iRet = eFailed;
			tResponseGetRecordCount* Response = NULL;
			iRet = KaiXinAPI_JsonParse(KX_GetRecordCount, (void **)&Response); 

			if(Response)
			{
				TMaskButton *pTCtrl = static_cast<TMaskButton*>(GetControlPtr(m_nRecordsBtnID));				
				TUString::StrUtf8ToStrUnicode(pszCount,(Char*)Response->total);
				if(pTCtrl)
				{
					TUString::StrPrintF(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_RecordNum),pszCount);
					CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth(pszCaption, tFont))/2;
					pTCtrl->SetCaption(pszCaption,CaptionX,FUNCTION_CAPTION_Y);
					if(strcmp(Response->total, "0") != 0)
					{
						pTCtrl->SetEnabled(TRUE);
					}
				}
				delete Response;
				Response = NULL;
			}

			break;
		}
	default:
		break;
	}

}
void TProfileForm::_SetDataToCtrls(TApplication* pApp)
{

	TFont objFontType;
	TUChar pszFName[32] = {0};				
	TUChar pszStatus[KAIXIN_STATUS_LENTH] = {0};
	TUChar pszFriends[64] = {0};	
	TUChar pszDateTime[32] = {0};
	TUChar pszDateTimeCaption[64] = {0};

	TRectangle rect;


	TButton *pReleaseBtn = static_cast<TButton*>(GetControlPtr(APP_KA_ID_ProfileForm_ReleaseBtn));
	if(pReleaseBtn)
	{
		pReleaseBtn->Hide(TRUE);//设为不可见
	}

	if(this->Response)
	{
		TImage *pStarImage = static_cast<TImage*>(GetControlPtr(APP_KA_ID_ProfileForm_Star));
		if(pStarImage)
		{
			if(Response->istar)
			{
			}
			else
			{
				pStarImage->Hide(TRUE);
			}
		}

		TLabel *pUserName = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_ProfileForm_UserName));
		if(pUserName)
		{
			TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)Response->realname);
			objFontType = pUserName->GetFont();
			objFontType.Create(FONT_LARGE_NAME, FONT_LARGE_NAME);
			pUserName->SetFont(objFontType); 
			pUserName->SetColor(CTL_COLOR_TYPE_FORE, RGB(67, 67, 135));//RGB(100, 160, 160)
			pUserName->SetCaption(pszFName,FALSE);	
		}	

		TLabel *pFriends = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_ProfileForm_FriendsLbl));
		if(pFriends)
		{	
			objFontType = pFriends->GetFont();
			objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);

			pFriends->SetFont(objFontType);
			pFriends->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
			pFriends->SetAutoSize(TRUE);				
		}

#if 1
		TRichView *pRichView = static_cast<TRichView*>(GetControlPtr(APP_KA_ID_ProfileForm_RichViewStatus));
		if(pRichView)
		{
			TUString::StrUtf8ToStrUnicode(pszStatus, (const Char *)Response->note);
			objFontType = pRichView->GetFont();
			objFontType.Create(FONT_STATE, FONT_STATE);
			pRichView->SetFont(objFontType); 
			pRichView->SetCaption(pszStatus,FALSE);	
			
			pRichView->SetWordWrapAttr(TRUE);
			pRichView->SetBorderStyle(bsNone,TRUE);
			pRichView->SetTransparent(TRUE);
			pRichView->SetEnabled(TRUE);
			pRichView->SetScrollBarMode(CTL_SCL_MODE_NONE);

			Int32 nLineCount =  pRichView->GetLinesCount();
			if(nLineCount <16)
				nLineCount = 16;
			pRichView->SetMaxVisibleLines(nLineCount, TRUE);			
		}
#else
		TPanel*pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_ProfileForm_ProfilePanel));
		TRichView* pRichView = new TRichView();
		if(pRichView->Create(pPanel))	
		{
			m_StatusID = pRichView->GetId();
			TRectangle obBtnRec(0,0,0,0);
			pPanel->GetBounds(&obBtnRec);	
			obBtnRec.SetX(0);
			obBtnRec.SetY(0);			
			pRichView->SetBounds(&obBtnRec);
		
			pRichView->SetColor(CTL_COLOR_TYPE_BACK, RGB_COLOR_WHITE);
			pRichView->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, RGB_COLOR_WHITE);
			pRichView->SetColor(CTL_COLOR_TYPE_DISABLE_BACK, RGB_COLOR_WHITE);
			
			TUString::StrUtf8ToStrUnicode(pszStatus, (const Char *)Response->note);
			objFontType = pRichView->GetFont();
			objFontType.Create(FONT_STATE, FONT_STATE);
			pRichView->SetFont(objFontType);
			pRichView->SetCaption(pszStatus,FALSE);

			pRichView->SetEnabled(FALSE);
			pRichView->SetWordWrapAttr(TRUE);
			pRichView->SetTransparent(TRUE);
			pRichView->SetScrollBarMode(CTL_SCL_MODE_NONE);
			pRichView->SetUnderLine(TRUE);
			
			Int32 nLineCount =  pRichView->GetLinesCount();
			if(nLineCount <6)
				nLineCount = 6;
			pRichView->SetMaxVisibleLines(nLineCount, TRUE);
		}
#endif		

		TLabel *pStatusDateTime = static_cast<TLabel*>(GetControlPtr(APP_KA_ID_ProfileForm_DateTime));
		if(pStatusDateTime)
		{
			if(strcmp(Response->note,"")==0)
			{				
				TUString::StrUtf8ToStrUnicode(pszDateTime, (const Char *)Response->stime);
				TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Left_Parenthesis);
				TUString::StrCat(pszDateTimeCaption, TResource::LoadConstString(APP_KA_ID_STRING_NoState));	
				TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Right_Parenthesis);	
			}
			else
			{
				TUString::StrUtf8ToStrUnicode(pszDateTime, (const Char *)Response->stime);
				TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Left_Parenthesis);
				TUString::StrCat(pszDateTimeCaption, pszDateTime);
				TUString::StrCat(pszDateTimeCaption, TUSTR_Kx_Right_Parenthesis);
			}

			objFontType = pStatusDateTime->GetFont();
			objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
			pStatusDateTime->SetFont(objFontType); 
			pStatusDateTime->SetCaption(pszDateTimeCaption,FALSE); 			
			pStatusDateTime->SetTransparent(TRUE);
			pStatusDateTime->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
			pStatusDateTime->SetEnabled(FALSE); 
		}

#if 0
		TImage* pNewsUserImage = static_cast<TImage*>(GetControlPtr(APP_KA_ID_ProfileForm_PersonalPhoto));
		if(pNewsUserImage)
		{
			KaiXinAPICommon_DownloadPhoto(Response->logo, this->GetWindowHwndId(), KX_INFOS_USER_IMAGE_INDEX);	
			rect.SetRect(KX_INFOS_PHOTO_X, KX_INFOS_PHOTO_Y, KX_INFOS_PHOTO_WIDTH, KX_INFOS_PHOTO_HEIGHT);
			const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
			pNewsUserImage->SetBounds(&rect);
			pNewsUserImage->SetBitmap(pBmp);
		}
#endif

		TMaskButton* pMyHeadMBtn = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_ProfileForm_MyHeadMaskButton));
		if(pMyHeadMBtn)
		{
			//这里需要每次走KaiXinAPICommon_DownloadPhoto流程,保存头像路径到全局变量
			#if 0		
			TBitmap* pDownLoadBitmap = NULL;
			//Photo, 先读取磁盘cache
			pDownLoadBitmap = LoadImgByUrl(Response->logo120);
			//磁盘cache无文件,再下载
			if( pDownLoadBitmap == NULL)
			{
				TRectangle rc;

				KaiXinAPICommon_DownloadPhoto(Response->logo, this->GetWindowHwndId(), KX_INFOS_USER_IMAGE_INDEX);	
				const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
				pMyHeadMBtn->GetBounds(&rc);
				pMyHeadMBtn->SetEnabled(FALSE);
				pMyHeadMBtn->SetCaption(TUSTR_Kx_NULL,0,0);
				pMyHeadMBtn->SetImage(pBmp,(rc.Width()-pBmp->GetWidth())/2, (rc.Height()-pBmp->GetHeight())/2);			
			}
			else
			{
				TRectangle rc;				
				pMyHeadMBtn->GetBounds(&rc);
				pMyHeadMBtn->SetEnabled(FALSE);
				pMyHeadMBtn->SetCaption(TUSTR_Kx_NULL,0,0);

				pUserImageBmp = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
				pUserImageBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));		
				pMyHeadMBtn->SetImage(pUserImageBmp,(rc.Width()-pUserImageBmp->GetWidth())/2, (rc.Height()-pUserImageBmp->GetHeight())/2);			

				//释放图片
				pDownLoadBitmap->Destroy();
				pDownLoadBitmap = NULL; 	
			}
			#else		
			TRectangle rc;

			KaiXinAPICommon_DownloadPhoto(Response->logo90, this->GetWindowHwndId(), KX_INFOS_USER_IMAGE_INDEX);	
			const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
			pMyHeadMBtn->GetBounds(&rc);
			pMyHeadMBtn->SetEnabled(FALSE);
			pMyHeadMBtn->SetCaption(TUSTR_Kx_NULL,0,0);
			pMyHeadMBtn->SetImage(pBmp,(rc.Width()-pBmp->GetWidth())/2, (rc.Height()-pBmp->GetHeight())/2);	
			#endif			
		}
	}

}

//创建创建主页功能按钮，必须有9个成员变量来保存ButtonID, 
/*
Int32 m_nPhotosBtnID;//照片
Int32 m_nDiarysBtnID;//日记
Int32 m_nRecordsBtnID;//记录
Int32 m_nRepastesBtnID;//转帖
Int32 m_nRecentNewsBtnID;//最新动态
Int32 m_nMessageCenterBtnID;//消息中心
Int32 m_nUploadPhotoBtnID;//传照片
Int32 m_nWriteDiaryBtnID;//写日记
Int32 m_nWriteRecordBtnID;//写记录
*/
Int32 TProfileForm::_CreateFunctionButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(6,224,308,187); //初始(left, top, w, h)
	TFont tFont;	
	Int32 CaptionX = 0;

	tFont.Create(FONT_BUTTON_CAPTION, FONT_BUTTON_CAPTION);

	//use to function buttons ID
	m_nPhotosBtnID = 0;//照片
	m_nDiarysBtnID = 0;//日记
	m_nRecordsBtnID = 0;//记录
	m_nRepastesBtnID = 0;//转帖
	m_nRecentNewsBtnID = 0;//最新动态
	m_nMessageCenterBtnID = 0;//消息中心
	m_nUploadPhotoBtnID = 0;//传照片
	m_nWriteDiaryBtnID = 0;//写日记
	m_nWriteRecordBtnID = 0;//写记录

	const TBitmap * pImgBg = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_function_btn_bg);


	const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_photos);
	const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_photos_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X, FUNCTION_BUTTON_Y, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pPhotosBtn =new TMaskButton;
	if(pPhotosBtn->Create(this))
	{
		pPhotosBtn->SetBounds(&obBtnRec); 	
		m_nPhotosBtnID = pPhotosBtn->GetId();//save button ID
		//pPhotosBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pPhotosBtn->SetImage(pImgNormal,(FUNCTION_BUTTON_W-pImgNormal->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal->GetHeight())/2 - 10); 
		pPhotosBtn->SetSelImage(pImgDown,(FUNCTION_BUTTON_W-pImgDown->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Photo), tFont))/2;
		pPhotosBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Photo), CaptionX, FUNCTION_CAPTION_Y);
		pPhotosBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pPhotosBtn->SetFont(tFont);
		pPhotosBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_diarys);
	const TBitmap * pImgDown1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_diarys_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W, FUNCTION_BUTTON_Y, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pDiarysBtn =new TMaskButton;
	if(pDiarysBtn->Create(this))
	{
		pDiarysBtn->SetBounds(&obBtnRec); 	
		m_nDiarysBtnID = pDiarysBtn->GetId();//save button ID
		//pDiarysBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pDiarysBtn->SetImage(pImgNormal1,(FUNCTION_BUTTON_W-pImgNormal1->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal1->GetHeight())/2 - 10); 
		pDiarysBtn->SetSelImage(pImgDown1,(FUNCTION_BUTTON_W-pImgDown1->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown1->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Diary), tFont))/2;
		pDiarysBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Diary), CaptionX, FUNCTION_CAPTION_Y);
		pDiarysBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pDiarysBtn->SetFont(tFont);
		pDiarysBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}


	const TBitmap * pImgNormal2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_records);
	const TBitmap * pImgDown2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_records_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W*2, FUNCTION_BUTTON_Y, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pRecordsBtn =new TMaskButton;
	if(pRecordsBtn->Create(this))
	{
		pRecordsBtn->SetBounds(&obBtnRec); 	
		m_nRecordsBtnID = pRecordsBtn->GetId();//save button ID
		//pRecordsBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pRecordsBtn->SetImage(pImgNormal2,(FUNCTION_BUTTON_W-pImgNormal2->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal2->GetHeight())/2 - 10); 
		pRecordsBtn->SetSelImage(pImgDown2,(FUNCTION_BUTTON_W-pImgDown2->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown2->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Record), tFont))/2;		
		pRecordsBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Record), CaptionX, FUNCTION_CAPTION_Y);
		pRecordsBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pRecordsBtn->SetFont(tFont);
		pRecordsBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repastes);
	const TBitmap * pImgDown3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repastes_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pRepastesBtn =new TMaskButton;
	if(pRepastesBtn->Create(this))
	{
		pRepastesBtn->SetBounds(&obBtnRec); 	
		m_nRepastesBtnID = pRepastesBtn->GetId();//save button ID
		//pRepastesBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pRepastesBtn->SetImage(pImgNormal3,(FUNCTION_BUTTON_W-pImgNormal3->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal3->GetHeight())/2 - 10); 
		pRepastesBtn->SetSelImage(pImgDown3,(FUNCTION_BUTTON_W-pImgDown3->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown3->GetHeight())/2 - 10);
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_Repaste), tFont))/2;	
		pRepastesBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Repaste), CaptionX, FUNCTION_CAPTION_Y);
		pRepastesBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pRepastesBtn->SetFont(tFont);
		pRepastesBtn->SetEnabled(FALSE);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_recent_news);
	const TBitmap * pImgDown4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_recent_news_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pRecentNewsBtn =new TMaskButton;
	if(pRecentNewsBtn->Create(this))
	{
		pRecentNewsBtn->SetBounds(&obBtnRec); 	
		m_nRecentNewsBtnID = pRecentNewsBtn->GetId();//save button ID
		//pRecentNewsBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pRecentNewsBtn->SetImage(pImgNormal4,(FUNCTION_BUTTON_W-pImgNormal4->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal4->GetHeight())/2 - 10); 
		pRecentNewsBtn->SetSelImage(pImgDown4,(FUNCTION_BUTTON_W-pImgDown4->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown4->GetHeight())/2 - 10);
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_RecentNews), tFont))/2;
		pRecentNewsBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_RecentNews), CaptionX, FUNCTION_CAPTION_Y);
		pRecentNewsBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pRecentNewsBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}


	const TBitmap * pImgNormal5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_message_center);
	const TBitmap * pImgDown5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_message_center_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W*2, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pMessageCenterBtn =new TMaskButton;
	if(pMessageCenterBtn->Create(this))
	{
		pMessageCenterBtn->SetBounds(&obBtnRec); 	
		m_nMessageCenterBtnID = pMessageCenterBtn->GetId();//save button ID
		//pMessageCenterBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pMessageCenterBtn->SetImage(pImgNormal5,(FUNCTION_BUTTON_W-pImgNormal5->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal5->GetHeight())/2 - 10); 
		pMessageCenterBtn->SetSelImage(pImgDown5,(FUNCTION_BUTTON_W-pImgDown5->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown5->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_MsgCenter), tFont))/2;
		pMessageCenterBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_MsgCenter), CaptionX , FUNCTION_CAPTION_Y);
		pMessageCenterBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pMessageCenterBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal6 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_upload_photo);
	const TBitmap * pImgDown6 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_upload_photo_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H*2, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pUploadPhotoBtn =new TMaskButton;
	if(pUploadPhotoBtn->Create(this))
	{
		pUploadPhotoBtn->SetBounds(&obBtnRec); 	
		m_nUploadPhotoBtnID = pUploadPhotoBtn->GetId();//save button ID
		//pUploadPhotoBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pUploadPhotoBtn->SetImage(pImgNormal6,(FUNCTION_BUTTON_W-pImgNormal6->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal6->GetHeight())/2 - 10); 
		pUploadPhotoBtn->SetSelImage(pImgDown6,(FUNCTION_BUTTON_W-pImgDown6->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown6->GetHeight())/2 - 10);
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_UploadPhotos), tFont))/2;
		pUploadPhotoBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_UploadPhotos), CaptionX, FUNCTION_CAPTION_Y);
		pUploadPhotoBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pUploadPhotoBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}

	const TBitmap * pImgNormal7 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_write_diary);
	const TBitmap * pImgDown7 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_write_diary_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H*2, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);	
	TMaskButton* pWriteDiaryBtn =new TMaskButton;
	if(pWriteDiaryBtn->Create(this))
	{
		pWriteDiaryBtn->SetBounds(&obBtnRec); 	
		m_nWriteDiaryBtnID = pWriteDiaryBtn->GetId();//save button ID
		//pWriteDiaryBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pWriteDiaryBtn->SetImage(pImgNormal7,(FUNCTION_BUTTON_W-pImgNormal7->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal7->GetHeight())/2 - 10); 
		pWriteDiaryBtn->SetSelImage(pImgDown7,(FUNCTION_BUTTON_W-pImgDown7->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown7->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_WriteDiary), tFont))/2;
		pWriteDiaryBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_WriteDiary), CaptionX, FUNCTION_CAPTION_Y);
		pWriteDiaryBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pWriteDiaryBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}


	const TBitmap * pImgNormal8 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_write_record);
	const TBitmap * pImgDown8 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_write_record_hl);
	obBtnRec.SetRect(FUNCTION_BUTTON_X+FUNCTION_BUTTON_W*2, FUNCTION_BUTTON_Y+FUNCTION_BUTTON_H*2, FUNCTION_BUTTON_W, FUNCTION_BUTTON_H);
	TMaskButton* pWriteRecordBtn =new TMaskButton;
	if(pWriteRecordBtn->Create(this))
	{
		pWriteRecordBtn->SetBounds(&obBtnRec); 	
		m_nWriteRecordBtnID = pWriteRecordBtn->GetId();//save button ID
		//pWriteRecordBtn->SetMaskImage(pImgBg,pImgBg,pImgBg);
		pWriteRecordBtn->SetImage(pImgNormal8,(FUNCTION_BUTTON_W-pImgNormal8->GetWidth())/2,(FUNCTION_BUTTON_H-pImgNormal8->GetHeight())/2 - 10); 
		pWriteRecordBtn->SetSelImage(pImgDown8,(FUNCTION_BUTTON_W-pImgDown8->GetWidth())/2,(FUNCTION_BUTTON_H-pImgDown8->GetHeight())/2 - 10);	
		CaptionX = (FUNCTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_WriteRecords), tFont))/2;
		pWriteRecordBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_WriteRecords), CaptionX, FUNCTION_CAPTION_Y);
		pWriteRecordBtn->SetColor(RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE,RGB_COLOR_BLACK,RGB_COLOR_WHITE);
		pWriteRecordBtn->SetFont(tFont);
	}
	else
	{
		bnRetCod ++;
	}	

	return bnRetCod;
}


//创建页面下方Tab Button部分，必须有5个成员变量来保存ButtonID, 
/*
Int32 m_nNewsBtnID;//动态
Int32 m_nFriendsBtnID;//好友
Int32 m_nInfosBtnID;//我的地盘
Int32 m_nAppsBtnID;//组件
Int32 m_nMoreBtnID;//更多

*/
Int32 TProfileForm::_CreateTabButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(100,50,150,30); //初始(left, top, w, h)
	TFont tFont;

	//control 
	Int32 m_iaCreateCtlID[56] = {0};
	TCtrl *m_obContrl[56] = {NULL};
	Int32 m_nCtlIDCount = 0;

	//use to save buttons ID
	m_nNewsBtnID = 0;//动态
	m_nFriendsBtnID = 0;//好友
	m_nInfosBtnID = 0;//我的地盘
	m_nAppsBtnID = 0;//组件
	m_nMoreBtnID = 0;//更多


	//创建5个页面对应的按钮
	const TBitmap * pImgBG = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_btn_bg);

	//动态	
	const TBitmap * pImgNormal1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_news);
	const TBitmap * pImgDown1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_news_over);	
	obBtnRec.SetRect(0, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pNewsBtn =new TMaskButton;;
	if(pNewsBtn->Create(this))
	{
		pNewsBtn->SetBounds(&obBtnRec);		
		m_nNewsBtnID = pNewsBtn->GetId();//save button ID
		pNewsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pNewsBtn->SetImage(pImgNormal1, (BOTTOM_TAB_W-pImgNormal1->GetWidth())/2, (BOTTOM_TAB_H-pImgNormal1->GetHeight())/2);	
		pNewsBtn->SetSelImage(pImgDown1, (BOTTOM_TAB_W-pImgDown1->GetWidth())/2, (BOTTOM_TAB_H-pImgDown1->GetHeight())/2);	
	}
	else
	{
		bnRetCod ++;
	}

	//好友	
	const TBitmap * pImgNormal2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friend);
	const TBitmap * pImgDown2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friend_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pFriendsBtn =new TMaskButton;;
	if(pFriendsBtn->Create(this))
	{
		pFriendsBtn->SetBounds(&obBtnRec);		
		m_nFriendsBtnID = pFriendsBtn->GetId();//save button ID
		pFriendsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pFriendsBtn->SetImage(pImgNormal2,(BOTTOM_TAB_W-pImgNormal2->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal2->GetHeight())/2);	
		pFriendsBtn->SetSelImage(pImgDown2,(BOTTOM_TAB_W-pImgDown2->GetWidth())/2,(BOTTOM_TAB_H-pImgDown2->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}


	//我的地盘

	//当前form为我的地盘，所以图标都是选中图片			
	const TBitmap * pImgNormal3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_info_over);//APP_KA_ID_BITMAP_info
	const TBitmap * pImgDown3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_info_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W*2, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);
	TMaskButton* pInfosBtn =new TMaskButton;
	if(pInfosBtn->Create(this))
	{
		pInfosBtn->SetBounds(&obBtnRec);		
		m_nInfosBtnID = pInfosBtn->GetId();//save button ID
		pInfosBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pInfosBtn->SetImage(pImgNormal3,(BOTTOM_TAB_W-pImgNormal3->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal3->GetHeight())/2);	
		pInfosBtn->SetSelImage(pImgDown3,(BOTTOM_TAB_W-pImgDown3->GetWidth())/2,(BOTTOM_TAB_H-pImgDown3->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}

	//组件
	const TBitmap * pImgNormal4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_module);
	const TBitmap * pImgDown4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_module_over);
	obBtnRec.SetRect(BOTTOM_TAB_W*3, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H),BOTTOM_TAB_W, BOTTOM_TAB_H);
	TMaskButton* pAppsBtn =new TMaskButton;;
	if(pAppsBtn->Create(this))
	{
		pAppsBtn->SetBounds(&obBtnRec);		
		m_nAppsBtnID = pAppsBtn->GetId();//save button ID
		pAppsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pAppsBtn->SetImage(pImgNormal4,(BOTTOM_TAB_W-pImgNormal4->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal4->GetHeight())/2);	
		pAppsBtn->SetSelImage(pImgDown4,(BOTTOM_TAB_W-pImgDown4->GetWidth())/2,(BOTTOM_TAB_H-pImgDown4->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}

	//更多
	const TBitmap * pImgNormal5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_more);
	const TBitmap * pImgDown5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_more_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W*4, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pMoreBtn =new TMaskButton;;
	if(pMoreBtn->Create(this))
	{
		pMoreBtn->SetBounds(&obBtnRec);		
		m_nMoreBtnID = pMoreBtn->GetId();//save button ID
		pMoreBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pMoreBtn->SetImage(pImgNormal5,(BOTTOM_TAB_W-pImgNormal5->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal5->GetHeight())/2);	
		pMoreBtn->SetSelImage(pImgDown5,(BOTTOM_TAB_W-pImgDown5->GetWidth())/2,(BOTTOM_TAB_H-pImgDown5->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}			

	return bnRetCod;
}


