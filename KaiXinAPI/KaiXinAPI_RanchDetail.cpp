/*!
* \file	 KaiXinApp_RanchDetail.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 牧场
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#if(LCD_SIZE == LCD_HVGA )
#define OFFSET_X	(10)
#elif(LCD_SIZE == LCD_WVGA )
#define OFFSET_X	(20)
#endif

void* KaiXinAPI_RanchDetail_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseRanchDetail*  Response = new tResponseRanchDetail;
	memset(Response, 0 , sizeof(tResponseRanchDetail));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "pn");
		if(pTemp0)
		{
			Response->pn = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "cash");
		if(pTemp0)
		{
			STRCPY_Ex(Response->szCash, pTemp0->valuestring);
			Response->cash = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "ranktip");
		if(pTemp0)
		{
			STRCPY_Ex(Response->ranktip, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "tcharms");
		if(pTemp0)
		{
			Response->tcharms = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "fuid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->fuid, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->fuid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "flogo");
		if(pTemp0)
		{
			STRCPY_Ex(Response->flogo, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "fname");
		if(pTemp0)
		{
			STRCPY_Ex(Response->fname, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "animals");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_animals = nSize1;
			if( nSize1 != 0 )
			{
				Response->animals = NULL;
				Response->animals = (RanchDetail_animals*) malloc(sizeof( RanchDetail_animals ) * nSize1 );
				memset(Response->animals, 0 , sizeof(RanchDetail_animals) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "animalsid");
				if(pTemp1)
				{
					if(pTemp1->valuedouble > 0)
						DoubleToChar(pTemp1->valuedouble, Response->animals[i].animalsid);
					else
						STRCPY_Ex(Response->animals[i].animalsid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "name");
				if(pTemp1)
				{
					STRCPY_Ex(Response->animals[i].name, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "growper");
				if(pTemp1)
				{
					STRCPY_Ex(Response->animals[i].growper, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "growdesc");
				if(pTemp1)
				{
					STRCPY_Ex(Response->animals[i].growdesc, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "status");
				if(pTemp1)
				{
					STRCPY_Ex(Response->animals[i].status, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "bproduct");
				if(pTemp1)
				{
					STRCPY_Ex(Response->animals[i].bproduct, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "htime");
				if(pTemp1)
				{
					Response->animals[i].htime = pTemp1->valueint;
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "products");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_products = nSize1;
			if( nSize1 != 0 )
			{
				Response->products = NULL;
				Response->products = (RanchDetail_products*) malloc(sizeof( RanchDetail_products ) * nSize1 );
				memset(Response->products, 0 , sizeof(RanchDetail_products) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "name");
				if(pTemp1)
				{
					STRCPY_Ex(Response->products[i].name, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "skey");
				if(pTemp1)
				{
					STRCPY_Ex(Response->products[i].skey, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "type");
				if(pTemp1)
				{
					//Response->products[i].type = pTemp1->valueint;
					STRCPY_Ex(Response->products[i].type, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "pnum");
				if(pTemp1)
				{
					Response->products[i].pnum = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "pdesc");
				if(pTemp1)
				{
					STRCPY_Ex(Response->products[i].pdesc, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "stealed");
				if(pTemp1)
				{
					Response->products[i].stealed = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "htime");
				if(pTemp1)
				{
					Response->products[i].htime = pTemp1->valueint;
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



void* KaiXinAPI_RanchHarvest_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseRanchHarvest*  Response = new tResponseRanchHarvest;
	memset(Response, 0 , sizeof(tResponseRanchHarvest));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "retdesc");
		if(pTemp0)
		{
			STRCPY_Ex(Response->retdesc, pTemp0->valuestring);
		}


	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



void* KaiXinAPI_RanchProduct_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseRanchProduct*  Response = new tResponseRanchProduct;
	memset(Response, 0 , sizeof(tResponseRanchProduct));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "retdesc");
		if(pTemp0)
		{
			STRCPY_Ex(Response->retdesc, pTemp0->valuestring);
		}


	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}

// 构造函数
TRanchDetailForm::TRanchDetailForm(TApplication* pApp, Boolean bNew):TWindow(pApp)
{
	Create(APP_KA_ID_RanchDetailForm);
	if(bNew == TRUE)
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
	else
		this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);	
}

// 析构函数
TRanchDetailForm::~TRanchDetailForm(void)
{
	if( Response )
	{
		delete Response;	
	}
}

// 窗口事件处理
Boolean TRanchDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}

	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_RanchHarvest:				
				{
					int iRet = eFailed;
					tResponseRanchHarvest* ResponseHarvest = NULL;
					iRet = KaiXinAPI_JsonParse(KX_RanchHarvest, (void **)&ResponseHarvest);
					if( ResponseHarvest )
					{
						if( strlen(ResponseHarvest->retdesc) > 0)
						{
							char InfoString[ERROR_INFO_LEN*3] = {0};
							TUChar InfoUString[ERROR_INFO_LEN] = {0};
							STRCPY_Ex(InfoString, ResponseHarvest->retdesc);		
							TUString::StrUtf8ToStrUnicode (InfoUString, (const Char *)InfoString);
							pApp->MessageBox(InfoUString, TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),WMB_OK);
							KaiXinAPICommon_Download(KX_RanchDetail, this->GetWindowHwndId());
						}
						else
						{
							if(ResponseHarvest->ret == 1)
							{
								pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),WMB_OK);
								KaiXinAPICommon_Download(KX_RanchDetail, this->GetWindowHwndId());
							}
							else
							{
								pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),WMB_OK);						
							}
						}
						delete ResponseHarvest;	
					}
					break;
				}			
			case KX_Product:				
				{
					int iRet = eFailed;
					tResponseRanchProduct* ResponseProduct = NULL;
					iRet = KaiXinAPI_JsonParse(KX_Product, (void **)&ResponseProduct);
					if( ResponseProduct )
					{
						if( strlen(ResponseProduct->retdesc) > 0)
						{
							char InfoString[ERROR_INFO_LEN] = {0};
							TUChar InfoUString[ERROR_INFO_LEN] = {0};
							STRCPY_Ex(InfoString, ResponseProduct->retdesc);
							TUString::StrUtf8ToStrUnicode (InfoUString, (const Char *)InfoString);
							pApp->MessageBox(InfoUString, TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),WMB_OK);
							KaiXinAPICommon_Download(KX_RanchDetail, this->GetWindowHwndId());
						}
						else
						{
							if(ResponseProduct->ret == 1)
							{
								pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Product),WMB_OK);
								KaiXinAPICommon_Download(KX_RanchDetail, this->GetWindowHwndId());
							}
							else
							{
								pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Product),WMB_OK);						
							}
						}
						delete ResponseProduct;	
					}
					break;
				}			
			}
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TRanchDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	int nIndex = 0;
	int nActionIndex = 0;
	int nProductActionIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	TUChar sUserName[32] = {0};

	IsSelf = FALSE;
	nDetailItems =0;
	memset(Fuid, 0, sizeof(Fuid));	
	Response = NULL;
	iRet = KaiXinAPI_JsonParse(KX_RanchDetail, (void **)&Response);
	m_BackBtn = SetAppBackButton(this);	
	this->SetFocus(m_BackBtn);
	SetAppTilte(this, APP_KA_ID_STRING_Ranch);

	char* szFuid = NULL;								
	szFuid = (char*)malloc(32);
	memset(szFuid, 0, sizeof(32));		

	Get_Url_Params(KX_RanchDetail, "fuid", &szFuid);	
	STRCPY_Ex(Fuid,szFuid);

	if(strcmp(szFuid, KaiXinUserInfo.uid)==0||strcmp(szFuid, "")==0)
	{							
		IsSelf = TRUE;
		TUString::StrCopy(sUserName,TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else
	{
		IsSelf = FALSE;

		tResponseRanchList* Response = NULL;

		Int32 Fuid = 0;
		TUChar TUCharFuid[32];
		TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)szFuid);
		Fuid = TUString::StrAToI(TUCharFuid);
		iRet = KaiXinAPI_JsonParse(KX_RanchList, (void **)&Response);

		if(iRet == eSucceed)
		{	
			int i =0;
			for(i = 0; i<Response->nSize_friends; i++)
			{
				if((Int32)Response->friends[i].fuid == Fuid)
				{
					TUString::StrUtf8ToStrUnicode(sUserName , (const Char *)Response->friends[i].fname);
					break;
				}
			}

			if(i >= Response->nSize_friends)
			{
				TUString::StrCopy(sUserName,TResource::LoadConstString(APP_KA_ID_STRING_Friend));
			}
		}
		else
		{
			TUString::StrCopy(sUserName,TResource::LoadConstString(APP_KA_ID_STRING_Friend));
		}

		if(Response)
		{
			delete Response;
		}
	}					
	free(szFuid);

	if(iRet == 1)
	{
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_RanchDetailForm_RanchDetailCoolBarList));
		if (pCoolBarList)
		{
			TBarListItem* lpItem = NULL;

			pCoolBarList->SetBounds(RC_LIST_LARGE);
			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate();
				if(lpRow)
				{
					//Title 
					lpItem = lpRow->AppendItem();
					if(lpItem)	
					{
						TFont objFontType;
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;
						TUChar pszSubTitle[64] = {0};

						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);						
						lpItem->SetIndicatorType(itNone);

						ItemHeight = ItemHeight + 30;

						TUString::StrPrintF(pszSubTitle, TResource::LoadConstString(APP_KA_ID_STRING_SubTitleRanch),sUserName);
						Int32 nTitlelabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pTitlelabel = static_cast<TLabel*>(GetControlPtr(nTitlelabelId));
						TRectangle Rc_Titlelabel(OFFSET_X, ItemHeight, SCR_W - 20, 20);
						pTitlelabel->SetBounds(&Rc_Titlelabel);
						objFontType = pTitlelabel->GetFont();
						objFontType.Create(FONT_CONTENT, FONT_CONTENT);
						pTitlelabel->SetFont(objFontType);					
						pTitlelabel->SetCaption(pszSubTitle,FALSE);
						pTitlelabel->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + 30;					
						lpItem->SetHeight(ItemHeight);	
					}	

					//现金，技能，魅力
					lpItem = lpRow->AppendItem();
					if(lpItem)
					{
						TFont objFontType;
						TUChar pszCash[128] = {0};
						TUChar pszSkill[128] = {0};
						TUChar pszCharm[128] = {0};
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;

						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);						
						lpItem->SetIndicatorType(itNone);

						ItemHeight = ItemHeight + rect.Y() + 15;

						Int32 nCashlabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCashlabel = static_cast<TLabel*>(GetControlPtr(nCashlabelId));
						TRectangle Rc_Cashlabel(OFFSET_X, ItemHeight, 45, 20);
						pCashlabel->SetBounds(&Rc_Cashlabel);
						objFontType = pCashlabel->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCashlabel->SetFont(objFontType); 
						pCashlabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Cash),FALSE);

						//返回有时是char，有时是int
						if(strlen(Response->szCash) > 0)
							TUString::StrUtf8ToStrUnicode(pszCash, (const Char *)Response->szCash);
						else
							TUString::StrIToA(pszCash, Response->cash);
						Int32 nCashId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCash = static_cast<TLabel*>(GetControlPtr(nCashId));
						TRectangle Rc_Cash(80, ItemHeight, 150, 20);
						pCash->SetBounds(&Rc_Cash);
						objFontType = pCash->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCash->SetFont(objFontType);
						pCash->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_RED);
						pCash->SetCaption(pszCash,FALSE);
						pCash->GetBounds(&Rc_Temp);
						pCash->GetBounds(&Rc_Temp);
						ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

						//技能文本已经自带标题
						TUString::StrUtf8ToStrUnicode(pszSkill, (const Char *)Response->ranktip);
						Int32 nSkillId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pSkill = static_cast<TLabel*>(GetControlPtr(nSkillId));
						TRectangle Rc_Skill(OFFSET_X, ItemHeight, 150, 20);
						pSkill->SetBounds(&Rc_Skill);
						objFontType = pSkill->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pSkill->SetFont(objFontType); 
						//pSkill->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_GREEN);
						pSkill->SetCaption(pszSkill,FALSE);
						pSkill->GetBounds(&Rc_Temp);
						ItemHeight = ItemHeight + Rc_Temp.Height() + 5;						
						#if 0
						Int32 nSkilllabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pSkilllabel = static_cast<TLabel*>(GetControlPtr(nSkilllabelId));
						TRectangle Rc_Skilllabel(OFFSET_X, ItemHeight, 45, 20);
						pSkilllabel->SetBounds(&Rc_Skilllabel);
						objFontType = pSkilllabel->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pSkilllabel->SetFont(objFontType); 
						pSkilllabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Skill),FALSE);

						//TUString::StrIToA(pszSkill, Response->ranktip);
						TUString::StrUtf8ToStrUnicode(pszSkill, (const Char *)Response->ranktip);
						Int32 nSkillId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pSkill = static_cast<TLabel*>(GetControlPtr(nSkillId));
						TRectangle Rc_Skill(80, ItemHeight, 150, 20);
						pSkill->SetBounds(&Rc_Skill);
						objFontType = pSkill->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pSkill->SetFont(objFontType); 
						pSkill->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_GREEN);
						pSkill->SetCaption(pszSkill,FALSE);
						pSkill->GetBounds(&Rc_Temp);
						ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
						#endif
						Int32 nCharmlabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCharmlabel = static_cast<TLabel*>(GetControlPtr(nCharmlabelId));
						TRectangle Rc_Charmlabel(OFFSET_X, ItemHeight, 45, 20);
						pCharmlabel->SetBounds(&Rc_Charmlabel);
						objFontType = pCharmlabel->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCharmlabel->SetFont(objFontType); 
						pCharmlabel->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Charm),FALSE);

						TUString::StrIToA(pszCharm, Response->tcharms);
						Int32 nCharmId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pCharm = static_cast<TLabel*>(GetControlPtr(nCharmId));
						TRectangle Rc_Charm(80, ItemHeight, 150, 20);
						pCharm->SetBounds(&Rc_Charm);
						objFontType = pCharm->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pCharm->SetFont(objFontType); 
						pCharm->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_LIGHT_PURPLE);
						pCharm->SetCaption(pszCharm,FALSE);
						pCharm->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
						lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );	
					}

					// 牧场动物产品详情
					nProductDetailItems = Response->nSize_products;
					for( nIndex = 0; nIndex < nProductDetailItems; nIndex++)
					{
						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							TFont objFontType;
							TUChar pszName[32] = {0};
							TUChar pszNum[32] = {0};							
							TUChar pszProductdesc[64] = {0};
							//TUChar pszGrowper[32] = {0};
							TUChar MsgInfo[128] = {0};
							Int32 ItemHeight = 0;
							TRectangle rect;
							TRectangle Rc_Temp;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);

							ItemHeight = ItemHeight + rect.Y() + 15;

							//动物生产产品

							//产品名
							TUString::StrUtf8ToStrUnicode(pszName, (const Char *)Response->products[nIndex].name);
							TUString::StrCopy(MsgInfo, pszName);							

#if 0
							//产品剩余数量
							TUString::StrCat(MsgInfo, TUSTR_Kx_Colon);
							TUString::StrIToA(pszNum, Response->products[nIndex].pnum);
							TUString::StrCat(MsgInfo, pszNum);
#endif

							Int32 nProductId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pProduct = static_cast<TRichView*>(GetControlPtr(nProductId));
							TRectangle Rc_Product(OFFSET_X, ItemHeight, SCR_W - 40 , 20);
							pProduct->SetBounds(&Rc_Product);
							objFontType = pProduct->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pProduct->SetFont(objFontType); 
							pProduct->SetCaption(MsgInfo,FALSE);
							pProduct->SetWordWrapAttr(TRUE);
							pProduct->SetTransparent(TRUE);
							pProduct->SetEnabled(FALSE);
							pProduct->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pProduct->SetMaxVisibleLines(pProduct->GetLinesCount(), TRUE);
							pProduct->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

							TUString::StrUtf8ToStrUnicode(pszProductdesc, (const Char *)Response->products[nIndex].pdesc);
							Int32 nInfoId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pInfo = static_cast<TRichView*>(GetControlPtr(nInfoId));
							TRectangle Rc_info(OFFSET_X, ItemHeight, SCR_W - 40 , 20);
							pInfo->SetBounds(&Rc_info);
							objFontType = pInfo->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pInfo->SetFont(objFontType); 
							pInfo->SetCaption(pszProductdesc,FALSE);
							pInfo->SetWordWrapAttr(TRUE);
							pInfo->SetTransparent(TRUE);
							pInfo->SetEnabled(FALSE);
							pInfo->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pInfo->SetMaxVisibleLines(pInfo->GetLinesCount(), TRUE);
							pInfo->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_GRAY);
							pInfo->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

							nProductActionId[nProductActionIndex] = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pAction = static_cast<TRichView*>(GetControlPtr(nProductActionId[nProductActionIndex]));
							TRectangle Rc_Action(OFFSET_X, ItemHeight, SCR_W - 40 , 20);
							pAction->SetBounds(&Rc_Action);
							objFontType = pAction->GetFont();
							objFontType.Create(FONT_LARGE_NAME, FONT_LARGE_NAME);
							pAction->SetFont(objFontType); 
							pAction->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_BLUE);
							pAction->SetWordWrapAttr(TRUE);
							pAction->SetTransparent(TRUE);
							pAction->SetEnabled(TRUE);
							pAction->Hide(FALSE);
							pAction->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pAction->SetMaxVisibleLines(1, TRUE);
							pAction->GetBounds(&Rc_Temp);

							if(1)//可收获
							{
								//收获	
								if(IsSelf == TRUE)
								{
									pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),FALSE);
								}
								else
								{
									if(Response->products[nIndex].stealed == 1)//已经偷过
									{
										pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Stealed),FALSE);
										pAction->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_GRAY);//灰色								
										pAction->SetEnabled(FALSE);//不可用
									}
									else
									{
										pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_HarvestOthers),FALSE);
									}
								}
								pAction->Show(FALSE);
								ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
							}
							else
							{
								//过期
							}
							lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );
							nProductActionIndex ++;
						}
					}

					// 牧场动物详情
					nDetailItems = Response->nSize_animals;
					for( nIndex = 0; nIndex < nDetailItems; nIndex++)
					{
						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							TFont objFontType;
							TUChar pszName[32] = {0};
							TUChar pszGrowdesc[64] = {0};
							TUChar pszGrowper[32] = {0};
							TUChar MsgInfo[128] = {0};
							Int32 ItemHeight = 0;
							TRectangle rect;
							TRectangle Rc_Temp;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);

							ItemHeight = ItemHeight + rect.Y() + 15;						

							//动物名字
							TUString::StrUtf8ToStrUnicode(pszName, (const Char *)Response->animals[nIndex].name);
							TUString::StrCopy(MsgInfo, pszName);							

							//动物生长状态
							TUString::StrCat(MsgInfo,TUSTR_Kx_Colon);
							TUString::StrUtf8ToStrUnicode(pszGrowper, (const Char *)Response->animals[nIndex].growper);
							TUString::StrCat(MsgInfo, pszGrowper);

							Int32 nGrowperId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pGrowper = static_cast<TRichView*>(GetControlPtr(nGrowperId));
							TRectangle Rc_Growper(OFFSET_X, ItemHeight, SCR_W - 40 , 20);
							pGrowper->SetBounds(&Rc_Growper);
							objFontType = pGrowper->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pGrowper->SetFont(objFontType); 
							pGrowper->SetCaption(MsgInfo,FALSE);
							pGrowper->SetWordWrapAttr(TRUE);
							pGrowper->SetTransparent(TRUE);
							pGrowper->SetEnabled(FALSE);
							pGrowper->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pGrowper->SetMaxVisibleLines(pGrowper->GetLinesCount(), TRUE);
							pGrowper->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

							TUString::StrUtf8ToStrUnicode(pszGrowdesc, (const Char *)Response->animals[nIndex].growdesc);
							Int32 nInfoId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pInfo = static_cast<TRichView*>(GetControlPtr(nInfoId));
							TRectangle Rc_info(OFFSET_X, ItemHeight, SCR_W - 40 , 20);
							pInfo->SetBounds(&Rc_info);
							objFontType = pInfo->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pInfo->SetFont(objFontType); 
							pInfo->SetCaption(pszGrowdesc,FALSE);
							pInfo->SetWordWrapAttr(TRUE);
							pInfo->SetTransparent(TRUE);
							pInfo->SetEnabled(FALSE);
							pInfo->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pInfo->SetMaxVisibleLines(pInfo->GetLinesCount(), TRUE);
							pInfo->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_GRAY);
							pInfo->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + 5;

							nActionId[nActionIndex] = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pAction = static_cast<TRichView*>(GetControlPtr(nActionId[nActionIndex]));
							TRectangle Rc_Action(OFFSET_X, ItemHeight, SCR_W - 40 , 20);
							pAction->SetBounds(&Rc_Action);
							objFontType = pAction->GetFont();
							objFontType.Create(FONT_LARGE_NAME, FONT_LARGE_NAME);
							pAction->SetFont(objFontType); 
							pAction->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_BLUE);
							pAction->SetWordWrapAttr(TRUE);
							pAction->SetTransparent(TRUE);
							pAction->SetEnabled(TRUE);
							pAction->Hide(FALSE);
							pAction->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pAction->SetMaxVisibleLines(1, TRUE);
							pAction->GetBounds(&Rc_Temp);

							if(strcmp(Response->animals[nIndex].status, "2") == 0)//可收获
							{
								//收获							
								pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_HarvestSelfs),FALSE);
								pAction->Show(FALSE);
								ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
							}
							else if(strcmp(Response->animals[nIndex].bproduct, "2") == 0)
							{
								//待产
								pAction->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Product),FALSE);//需要将字串改成生产
								pAction->Show(FALSE);
								ItemHeight = ItemHeight + Rc_Temp.Height() + 5;
							}
							lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );
							nActionIndex ++;
						}
					}

					if(IsSelf == TRUE)
					{
						//可收获的牧场
						lpItem = lpRow->AppendItem();
						if(lpItem)	
						{
							TFont objFontType;
							Int32 ItemHeight = 0;
							TRectangle rect;
							TRectangle Rc_Temp;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);

							ItemHeight = ItemHeight + rect.Y()+ 15;

							nRanchListViewId= lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pRanchListView = static_cast<TRichView*>(GetControlPtr(nRanchListViewId));
							TRectangle Rc_RanchListView(OFFSET_X, ItemHeight, SCR_W - 40, 20);
							pRanchListView->SetBounds(&Rc_RanchListView);
							objFontType = pRanchListView->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pRanchListView->SetFont(objFontType); 
							pRanchListView->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_BLUE);
							pRanchListView->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_HarvestRanch),FALSE);

							pRanchListView->SetWordWrapAttr(TRUE);
							pRanchListView->SetTransparent(TRUE);
							pRanchListView->SetEnabled(TRUE);
							pRanchListView->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pRanchListView->SetMaxVisibleLines(1, TRUE);	

							pRanchListView->GetBounds(&Rc_Temp);						

							ItemHeight = ItemHeight + Rc_Temp.Height() + 10;					
							lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );	
						}
					}
					else
					{
						//返回我的牧场
						lpItem = lpRow->AppendItem();
						if(lpItem)	
						{
							TFont objFontType;
							Int32 ItemHeight = 0;
							TRectangle rect;
							TRectangle Rc_Temp;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);

							ItemHeight = ItemHeight + rect.Y()+ 15;

							nMyRanchViewId= lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pMyRanchView = static_cast<TRichView*>(GetControlPtr(nMyRanchViewId));
							TRectangle Rc_MyRanchView(OFFSET_X, ItemHeight, SCR_W - 40, 20);
							pMyRanchView->SetBounds(&Rc_MyRanchView);
							objFontType = pMyRanchView->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pMyRanchView->SetFont(objFontType); 
							pMyRanchView->SetColor(CTL_COLOR_TYPE_FORE,RGB_COLOR_BLUE);
							pMyRanchView->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_BackToMyRanch),FALSE);

							pMyRanchView->SetWordWrapAttr(TRUE);
							pMyRanchView->SetTransparent(TRUE);
							pMyRanchView->SetEnabled(TRUE);
							pMyRanchView->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pMyRanchView->SetMaxVisibleLines(1, TRUE);	

							pMyRanchView->GetBounds(&Rc_Temp);						

							ItemHeight = ItemHeight + Rc_Temp.Height() + 10;					
							lpItem->SetHeight(ItemHeight - (rect.Y() - Rc_CoolBarList.Y()) + 10 );	
						}
					}
				}

				//:TODO:Add subject info

				lpRowList->BeginUpdate();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate(); 

				//add Item
				if(lpRow)
				{
					//nothing to do 				
				}
			}
		}
	}
	return TRUE;
}


// 关闭窗口时，保存设置信息
Boolean TRanchDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TRanchDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	Int32 nCtrlID = pEvent->sParam1;

	if(m_BackBtn == nCtrlID)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}
	else if(nRanchListViewId == nCtrlID)
	{
		KaiXinAPICommon_Download(KX_RanchList, this->GetWindowHwndId());
		bHandled = TRUE; 
		//this->CloseWindow();

		return bHandled;
	}
	else if(nMyRanchViewId == nCtrlID)
	{
		Set_Url_Params(KX_RanchDetail, "fuid", "");
		KaiXinAPICommon_Download(KX_RanchDetail, this->GetWindowHwndId());
		bHandled = TRUE;
		return bHandled;
	}

	for( int nIndex = 0; nIndex < nDetailItems; nIndex++)
	{
		if(nActionId[nIndex] == nCtrlID)
		{
			if(strcmp(Response->animals[nIndex].status, "2") == 0)//可收获
			{				
				Set_Url_Params(KX_RanchHarvest, "animalsid", Response->animals[nIndex].animalsid);
				Set_Url_Params(KX_RanchHarvest, "fuid", KaiXinUserInfo.uid);				
				KaiXinAPICommon_Download(KX_RanchHarvest, this->GetWindowHwndId());
				bHandled = TRUE;
			}
			else if(strcmp(Response->animals[nIndex].bproduct, "2") == 0)//待产
			{
				Set_Url_Params(KX_Product, "animalsid", Response->animals[nIndex].animalsid);
				if(IsSelf == TRUE)
				{
					Set_Url_Params(KX_Product, "fuid", KaiXinUserInfo.uid);
				}
				else
				{
					Set_Url_Params(KX_Product, "fuid", Fuid);//帮忙生产
				}								

				KaiXinAPICommon_Download(KX_Product, this->GetWindowHwndId());

				//Just for test
				//KaiXinAPICommon_Download(KX_GardenList, this->GetWindowHwndId());
				//KaiXinAPICommon_Download(KX_RanchList, this->GetWindowHwndId());

				bHandled = TRUE;		
			}
		}
	}

	if(!bHandled)
	{
		for( int nIndex = 0; nIndex < nProductDetailItems; nIndex++)
		{
			if(nProductActionId[nIndex] == nCtrlID)
			{
				if(Response->products[nIndex].stealed == 0)//没偷过
				{				
					//Set_Url_Params(KX_RanchHarvest, "animalsid", Response->animals[nIndex].animalsid);//动物产品不需要
					if(IsSelf == TRUE)
					{
						Set_Url_Params(KX_RanchHarvest, "fuid", KaiXinUserInfo.uid);
					}
					else
					{
						Set_Url_Params(KX_RanchHarvest, "fuid", Fuid);//偷别人的
					}
					Set_Url_Params(KX_RanchHarvest, "skey", Response->products[nIndex].skey);
					Set_Url_Params(KX_RanchHarvest, "type", Response->products[nIndex].type);

					KaiXinAPICommon_Download(KX_RanchHarvest, this->GetWindowHwndId());
					bHandled = TRUE;
				}
			}
		}
	}

	return bHandled;
}

