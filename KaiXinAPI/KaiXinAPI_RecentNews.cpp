/*!
* \file	 KaiXinApp_RecentNews.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 用户最新动态
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"


#if(LCD_SIZE == LCD_HVGA )
//动态空间间间隙
#define KX_News_ITEM_W_SPACE	(4)
#define KX_News_ITEM_H_SPACE	(5)

#define KX_News_THUMBNAIL_W			(50)
#define KX_News_THUMBNAIL_H			(50)

#define KX_News_FNAME_W			(50)
#elif(LCD_SIZE == LCD_WVGA )
//动态空间间间隙
#define KX_News_ITEM_W_SPACE	(6)
#define KX_News_ITEM_H_SPACE	(8)

#define KX_News_THUMBNAIL_W			(75)
#define KX_News_THUMBNAIL_H			(75)

#define KX_News_FNAME_W			(75)
#endif


//动态每行间隔
#define KX_News_ITEM_LINE_SPACE		(2)


//动态类型图标坐标
#define KX_News_TYPE_ICON_X			(10)
#define KX_News_TYPE_ICON_Y			(5)
#define KX_News_TYPE_ICON_W			(16)
#define KX_News_TYPE_ICON_H			(16)

//动态赞图标坐标
#define KX_News_PRAISE_ICON_X			(26)//根据获取到的数据会变动
#define KX_News_PRAISE_ICON_Y			(5)
#define KX_News_PRAISE_ICON_W			(15)
#define KX_News_PRAISE_ICON_H			(15)

//动态机构图标坐标
#define KX_News_STAR_ICON_X			(45)//根据获取到的数据会变动
#define KX_News_STAR_ICON_Y			(5)
#define KX_News_STAR_ICON_W			(10)
#define KX_News_STAR_ICON_H			(12)


//动态好友姓名坐标
#define KX_News_FNAME_X			(KX_News_TYPE_ICON_X + KX_News_TYPE_ICON_W + KX_News_ITEM_W_SPACE)//根据获取到的数据会变动
#define KX_News_FNAME_Y			(2)//KX_News_TYPE_ICON_Y因为是richview 那么间隔会太大，所以改成2
#define KX_News_FNAME_H			(FONT_NAME)

//动态简介内容坐标
#define KX_News_INTRO_X			(KX_News_FNAME_X + KX_News_FNAME_W + KX_News_ITEM_W_SPACE)//根据获取到的数据会变动
#define KX_News_INTRO_Y			(KX_News_TYPE_ICON_Y)
#define KX_News_INTRO_W			(50)
#define KX_News_INTRO_H			(FONT_CONTENT)

//动态内容坐标
#define KX_News_CONTENT_X		(20)
#define KX_News_CONTENT_Y		(KX_News_TYPE_ICON_Y+KX_News_TYPE_ICON_H+KX_News_ITEM_H_SPACE)
#define KX_News_CONTENT_W		(SCR_W-KX_News_CONTENT_X-KX_News_ITEM_W_SPACE)
#define KX_News_CONTENT_H		(FONT_CONTENT)

//动态缩略图片宽高

#define KX_News_THUMBNAIL_X			(10)
#define KX_News_THUMBNAIL_Y			(KX_News_TYPE_ICON_Y+KX_News_TYPE_ICON_H+KX_News_ITEM_H_SPACE)


//动态转帖坐标
#define KX_News_REPASTE_X			(20)
#define KX_News_REPASTE_Y			(KX_News_TYPE_ICON_Y+KX_News_TYPE_ICON_H+KX_News_ITEM_H_SPACE)//根据获取到的数据会变动
#define KX_News_REPASTE_W			(SCR_W-KX_News_REPASTE_X-KX_News_ITEM_W_SPACE)
#define KX_News_REPASTE_H			(FONT_CONTENT)

//动态时间坐标
#define KX_News_STIME_X			(KX_News_CONTENT_X)
#define KX_News_STIME_Y			(KX_News_CONTENT_Y + KX_News_CONTENT_H+KX_News_ITEM_H_SPACE)
#define KX_News_STIME_W			(50)
#define KX_News_STIME_H			(FONT_OTHER_INFO)

//动态默认行高
#define KX_News_ITEM_DEFAULT_H		(100)

//动态各项字体
#define KX_News_FONT_SIZE_FNAME		(14)
#define KX_News_FONT_SIZE_INTRO	(14)
#define KX_News_FONT_SIZE_CONTENT	(14)
#define KX_News_FONT_SIZE_STIME		(12)
#define KX_News_FONT_SIZE_STATUS	(18)

extern sKxNewsIcon KxNewsIcons;
extern sKxNewsMenuItem NewsMenuItem;

#if 0
sKxNewsIcon KxNewsIcons[] =
{
	{KX_NewsTypeStart, "", APP_KA_ID_BITMAP_movementdefault,0},//默认图标ID
	{KX_NewsUploadPhoto,"uploadphoto",APP_KA_ID_BITMAP_picture,0},
	{KX_NewsPostDiary, "postdiary", APP_KA_ID_BITMAP_diary,APP_KA_ID_STRING_NewsPostDiary},
	{KX_NewsUpdateStatus,"updatestatus",APP_KA_ID_BITMAP_movement,APP_KA_ID_STRING_NewsUpdateStatus},
	{KX_NewsRepaste,"merge_repaste",APP_KA_ID_BITMAP_repase,APP_KA_ID_STRING_NewsRepaste},		
	{KX_NewsVote, "merge_vote", APP_KA_ID_BITMAP_vote,APP_KA_ID_STRING_NewsVote},
	{KX_NewsMergeRecord,"merge_record",APP_KA_ID_BITMAP_recordmovement,APP_KA_ID_STRING_NewsRecord},
	{KX_NewsUpdateLogo, "", APP_KA_ID_BITMAP_movement,0},
	{KX_NewsUpdateInfo,"",APP_KA_ID_BITMAP_movement,0},

	{KX_NewsPraise,"",APP_KA_ID_BITMAP_praise,0},		
	//more to add here		
};

sKxNewsMenuItem	NewsMenuItem[] = 
{
	{KX_NewsMenuUploadPhoto,APP_KA_ID_STRING_UploadPhotos,APP_KA_ID_BITMAP_picture},
	{KX_NewsMenuPostDiary, APP_KA_ID_STRING_WriteDiary, APP_KA_ID_BITMAP_diary},
	{KX_NewsMenuWriteRecord,APP_KA_ID_STRING_WriteRecords,APP_KA_ID_BITMAP_recordmovement},

	//more to add here		
};
#endif

void* KaiXinAPI_RecentNews_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseRecentNews*  Response = new tResponseRecentNews;
	memset(Response, 0 , sizeof(tResponseRecentNews));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "news");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_news = nSize1;
			if( nSize1 != 0 )
			{
				Response->news = NULL;
				Response->news = (RecentNews_news*) malloc(sizeof( RecentNews_news ) * nSize1 );
				memset(Response->news, 0 , sizeof(RecentNews_news) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->news[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->news[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ntype");
				if(pTemp1)
				{
					if(IsNullString(pTemp1->valuestring))
						sprintf(Response->news[i].ntype, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->news[i].ntype, pTemp1->valuestring);
				}
				
				pTemp1 = cJSON_GetObjectItem(Item1, "ntypename");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].ntypename, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "intro");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].intro, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					Response->news[i].ctime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "stime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].stime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "thumbnail");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].thumbnail, pTemp1->valuestring);
				}

				//somenews type the id return as int, but sometime return as string(e.g: vote) 
				pTemp1 = cJSON_GetObjectItem(Item1, "id");
				if(pTemp1)
				{
					Response->news[i].id = pTemp1->valuedouble;
					STRCPY_Ex(Response->news[i].idString, pTemp1->valuestring);
				}
				
				pTemp1 = cJSON_GetObjectItem(Item1, "star");
				if(pTemp1)
				{
					Response->news[i].star = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "cnum");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->news[i].cnum, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->news[i].cnum, pTemp1->valuestring);
				}

				pTemp1 = cJSON_GetObjectItem(Item1, "upnum");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->news[i].upnum, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->news[i].upnum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "imglist");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->news[i].nSize_imglist = nSize2;
					if( nSize2 != 0 )
					{
						Response->news[i].imglist = NULL;
						Response->news[i].imglist = (RecentNews_imglist*) malloc(sizeof( RecentNews_imglist ) * nSize2 );
						memset(Response->news[i].imglist, 0 , sizeof(RecentNews_imglist) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "pid");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].pid, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "title");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].title, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "thumbnail");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].thumbnail, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "large");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].large, pTemp2->valuestring);
						}					
						pTemp2 = cJSON_GetObjectItem(Item2, "privacy");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].privacy, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "albumid");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].albumid, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "albumtitle");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].albumtitle, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "picnum");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].picnum, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "pos");
						if(pTemp2)
						{
							Response->news[i].imglist[j].pos = pTemp2->valueint;
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "ctime");
						if(pTemp2)
						{
							Response->news[i].imglist[j].ctime = pTemp2->valueint;
						}

					}
				}				pTemp1 = cJSON_GetObjectItem(Item1, "replist");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->news[i].nSize_replist = nSize2;
					if( nSize2 != 0 )
					{
						Response->news[i].replist = NULL;
						Response->news[i].replist = (RecentNews_replist*) malloc(sizeof( RecentNews_replist ) * nSize2 );
						memset(Response->news[i].replist, 0 , sizeof(RecentNews_replist) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "id");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].replist[j].id, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "title");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].replist[j].title, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "type");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].replist[j].type, pTemp2->valuestring);
						}

					}
				}
			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TRecentNewsForm::TRecentNewsForm(TApplication* pApp):TWindow(pApp)
{
	Response = NULL;

	m_nNewsItemCount = 0;

	nThumImgIndex = 0;
	MemSet(&m_photodata, 0, sizeof(tPhotoDetail));

	pUserImageBmp = NULL;

	for(int i=0; i<KX_News_THUMBNAIL_TOTAL_COUNT_MAX; i++)
	{
		pThumbnailBmp[i] = NULL;	
	}

	PreSelectRichViewID = 0;	

	Create(APP_KA_ID_RecentNewsForm);
}

// 析构函数
TRecentNewsForm::~TRecentNewsForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if(Response)
	{
		delete Response;
	}

	if( pUserImageBmp != NULL)
	{
		pUserImageBmp->Destroy();
		pUserImageBmp = NULL; 								
	}

	for(int i=0; i<KX_News_THUMBNAIL_TOTAL_COUNT_MAX; i++)
	{
		if( pThumbnailBmp[i] != NULL)
		{
			pThumbnailBmp[i]->Destroy();
			pThumbnailBmp[i] = NULL; 								
		}
	}	
}

// 窗口事件处理
Boolean TRecentNewsForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch( pEvent->eType )
	{
	case EVENT_WinInit:
		{
			// Do initialization here
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;		
	case EVENT_CtrlSelect:
		{

			// 处理控件点击事件或响应事件
			bHandled = _OnCtrlSelectEvent( pApp, pEvent );

		}
		break;			
	case EVENT_WinClose:
		{
			// Do uninitialization here
		}
		break;
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;			
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{	
					//下载完后跟新缩略图图标
					if(notifyData.nParam == KX_News_USER_IMAGE_INDEX)
					{
						if( pUserImageBmp != NULL)
						{
							pUserImageBmp->Destroy();
							pUserImageBmp = NULL;								
						}
						pUserImageBmp = LoadImgByPath(notifyData.pszFilePath);

						if(pUserImageBmp)
						{

						}						
					}
					else if(notifyData.nParam < KX_News_THUMBNAIL_TOTAL_COUNT_MAX)
					{
#if 0	
						if( pThumbnailBmp[notifyData.nParam] != NULL)
						{
							pThumbnailBmp[notifyData.nParam]->Destroy();
							pThumbnailBmp[notifyData.nParam] = NULL;								
						}
						pThumbnailBmp[notifyData.nParam] = LoadImgByPath(notifyData.pszFilePath);

						if(pThumbnailBmp[notifyData.nParam])
						{
							TImage* pTImage;

							pTImage = static_cast< TImage* >(this->GetControlPtr(this->nThumbnailImage[notifyData.nParam]));
							if(pTImage)
							{
								pTImage->SetBitmap(pThumbnailBmp[notifyData.nParam]);
								pTImage->Draw();
							}
						}	
#endif
#if 1
						//下载完后跟新缩略图图标
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);//test.png//(L"/My_Projects/App_KaiXin/Res/Photos/but_refresh1.png")

						if(pDownLoadBitmap)
						{
							TImage* pTImage;

							pTImage = static_cast< TImage* >(this->GetControlPtr(this->nThumbnailImage[notifyData.nParam]));
							if(pTImage)
							{	
								TRectangle RC;
								pTImage->GetBounds(&RC);

								if( pThumbnailBmp[notifyData.nParam] != NULL)
								{
									pThumbnailBmp[notifyData.nParam]->Destroy();
									pThumbnailBmp[notifyData.nParam] = NULL;								
								}

								pThumbnailBmp[notifyData.nParam] = TBitmap::Create(KX_News_THUMBNAIL_W, KX_News_THUMBNAIL_H, pDownLoadBitmap->GetDepth());
								pThumbnailBmp[notifyData.nParam]->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
								pTImage->SetBitmap(pThumbnailBmp[notifyData.nParam]);
								pTImage->Draw();
							}
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL;
						}						
#endif																
					}							

					break;
				}
			case KX_AlbumPhotoFromNews:				
				{
					//下载完毕之后，转到照片详情界面
					TPhotoDetailForm *pComm1 = new TPhotoDetailForm( pApp, m_photodata);
					break;
				}					

			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));
			//若需要，可在此处增加代码			

			bHandled = TRUE;
			break;
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;		
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}
	return bHandled;

}

// 窗口初始化
Boolean TRecentNewsForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//init login form
	int iRet = eFailed;
	iRet = KaiXinAPI_JsonParse(KX_RecentNews, (void **)&this->Response);
	m_BackBtn = SetAppBackButton(this);	
	if(iRet == eSucceed)
	{	
		_SetFormTilte(pApp);
		_SetNewsCoolBarList(pApp,KX_NewsShowAll);	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TRecentNewsForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TRecentNewsForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean 	bHandled = FALSE;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);

	Int32 nSelectedCtrlID = pEvent->sParam1;
	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	//点击到动态里面的控件
	bHandled = _OnCoolCtrlSelected(pApp, nSelectedCtrlID);

	return bHandled;
}

Boolean TRecentNewsForm::_OnCoolCtrlSelected(TApplication * pApp, Int32 nCtrlID)
{
	Boolean bHandled = FALSE;

	if(nCtrlID)
	{
		for(int i=0; i<KX_News_ITEM_COUNT_MAX; i++)
		{
			if(this->Response)
			{				
				int index = nItemNewsIndex[i];
				TUChar pszTUCharId[32];
				Char pszId[32];				 

				if( NewsFnameCtrlID[i] == nCtrlID )//点击到好友姓名
				{					
					Set_Url_Params(KX_GetUserInfos, "uids", Response->news[index].fuid);
					KaiXinAPICommon_Download(KX_GetUserInfos, this->GetWindowHwndId());

					bHandled = TRUE;
					break;
				}
				else if(NewsDiaryTitleCtrlID[i] == nCtrlID || NewsDiaryContCtrlID[i] == nCtrlID)//点击到日记标题或者概要
				{	
					//有事返回的id是int, 有时是char
					if(Response->news[index].id != 0)
					{
						TUString::StrI64ToA(pszTUCharId,(Int64)Response->news[index].id);
						TUString::StrUnicodeToStrUtf8(pszId, pszTUCharId);				
						Set_Url_Params(KX_DiaryDetail, "did", (char*)pszId);
					}
					else
					{
						Set_Url_Params(KX_DiaryDetail, "did", Response->news[index].idString);
					}
					
					Set_Url_Params(KX_DiaryDetail, "fuid", Response->news[index].fuid);	

					KaiXinAPICommon_Download(KX_DiaryDetail, this->GetWindowHwndId());
					bHandled = TRUE;
					break;
				}
				else if(NewsRecordCtrlID[i] == nCtrlID)//点击到记录概要
				{
					//显示记录详情
					DetailDataType detailData;
					MemSet(&detailData, 0, sizeof(detailData));

					STRCPY_Ex(detailData.rid, Response->news[index].idString);
					detailData.nId = Response->news[index].id;
					//detailData.nType = Response->news[index].ntype;				
					STRCPY_Ex(detailData.nType, Response->news[index].ntype);				
					STRCPY_Ex(detailData.szFname, Response->news[index].fname);				
					STRCPY_Ex(detailData.szFuid, Response->news[index].fuid);								
					detailData.ctime = Response->news[index].ctime;
					STRCPY_Ex(detailData.stime, Response->news[index].stime);

					TUChar* pTempContent = NULL;
					TUChar pszIntro[1024] = {0};
					TUChar pszNType[8] = {0};

					TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[index].intro);
					TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[index].ntype);					
					Int32 nType = TUString::StrAToI(pszNType);
					pTempContent = GetContentByType(nType, pTempContent, pszIntro);

					if(pTempContent)
					{
						TUString::StrCopy(detailData.pszContent, pTempContent);					
					}

					TOtherDetailForm *pComm1 = new TOtherDetailForm( pApp, detailData);					
					bHandled = TRUE;
					break;
				}
				else if(NewsStatusContCtrlID[i] == nCtrlID)//点击到状态概要
				{
					//显示状态详情
					DetailDataType detailData;
					MemSet(&detailData, 0, sizeof(detailData));

					detailData.nId = Response->news[index].id;
					STRCPY_Ex(detailData.rid, Response->news[index].idString);
					//detailData.nType = Response->news[index].ntype;				
					STRCPY_Ex(detailData.nType, Response->news[index].ntype);				
					STRCPY_Ex(detailData.szFname, Response->news[index].fname);				
					STRCPY_Ex(detailData.szFuid, Response->news[index].fuid);								
					detailData.ctime = Response->news[index].ctime;
					STRCPY_Ex(detailData.stime, Response->news[index].stime);

					TUChar* pTempContent = NULL;
					TUChar pszIntro[1024] = {0};
					TUChar pszNType[8] = {0};

					TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[index].intro);
					TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[index].ntype);					
					Int32 nType = TUString::StrAToI(pszNType);
					pTempContent = GetContentByType(nType, pTempContent, pszIntro);

					if(pTempContent)
					{
						TUString::StrCopy(detailData.pszContent, pTempContent);					
					}

					TOtherDetailForm *pComm1 = new TOtherDetailForm( pApp, detailData);

					bHandled = TRUE;
					break;
				}
				else if(NewsVoteTitleCtrlID[i] == nCtrlID)//点击到投票概要
				{
					//显示投票详情				
					Set_Url_Params(KX_VoteDetail, "vid", Response->news[index].idString);						
					KaiXinAPICommon_Download(KX_VoteDetail, this->GetWindowHwndId());
					bHandled = TRUE;
					break;
				}
				else
				{	
					//转帖
					for(int j = 0; j < KX_News_ITEM_REPASTE_COUNT_MAX; j++ )
					{
						if(NewsRepasteCtrlID[i][j] == nCtrlID)//点击到转帖标题
						{
							//显示转帖详情				
							Set_Url_Params(KX_RepasteDetail, "urpid", Response->news[index].replist[j].id);	
							Set_Url_Params(KX_RepasteDetail, "fuid", Response->news[index].fuid);	
							Set_Url_Params(KX_RepasteDetail, "flag", "1");
							KaiXinAPICommon_Download(KX_RepasteDetail, this->GetWindowHwndId());
							bHandled = TRUE;
							break;
						}
					}

					//缩略图
					for(int j = 0; j < KX_News_ITEM_THUMBNAIL_COUNT_MAX; j++ )
					{
						if(NewsThumbnailCtrlID[i][j] == nCtrlID)//点击到缩略图
						{
							//显示图片详情数据设置
							MemSet(&m_photodata, 0, sizeof(tPhotoDetail));							

							m_photodata.dataFrom = 1; //1: from updatefriendsnews							
							STRCPY_Ex(m_photodata.photouid,Response->news[index].fuid);   //照片所属用户id							
							STRCPY_Ex(m_photodata.fname,Response->news[index].fname);   //照片所属用户名							

							STRCPY_Ex(m_photodata.pid, Response->news[index].imglist[j].pid);
							STRCPY_Ex(m_photodata.title, Response->news[index].imglist[j].title);
							STRCPY_Ex(m_photodata.thumbnail, Response->news[index].imglist[j].thumbnail);
							STRCPY_Ex(m_photodata.large, Response->news[index].imglist[j].large);
							STRCPY_Ex(m_photodata.privacy, Response->news[index].imglist[j].privacy);
							STRCPY_Ex(m_photodata.albumid, Response->news[index].imglist[j].albumid);
							STRCPY_Ex(m_photodata.albumtitle, Response->news[index].imglist[j].albumtitle);
							STRCPY_Ex(m_photodata.picnum, Response->news[index].imglist[j].picnum);
							m_photodata.pos = Response->news[index].imglist[j].pos;
							m_photodata.ctime = Response->news[index].imglist[j].ctime;
							//STRCPY_Ex(m_photodata.ctimeString, Response->photos[i].ctime);	//动态 取回的是整形
							m_photodata.cnum = 0;//动态无该项

							//下载整个专辑数据，便于下个页面上一张 下一张照片切换处理
							Set_Url_Params(KX_AlbumPhotoFromNews, "fuid",Response->news[index].fuid);							
							Set_Url_Params(KX_AlbumPhotoFromNews, "albumid", Response->news[index].imglist[j].albumid);

							KaiXinAPICommon_Download(KX_AlbumPhotoFromNews, this->GetWindowHwndId());
							bHandled = TRUE;
							break;						
						}
					}
				}			
			}
		}
		if(bHandled == TRUE)
		{
			//取消之前选中的
			TRichView* tPreRichView =static_cast< TRichView* >(GetControlPtr(PreSelectRichViewID));
			if(tPreRichView)
			{
				TRectangle rc;

				tPreRichView->GetBounds(&rc);
				tPreRichView->SetSelectionPos(0,0);
				tPreRichView->SetFocusStatus(FALSE);
			}		

			//点击后显示选中
			TRichView* tNewRichView =static_cast< TRichView* >(GetControlPtr(nCtrlID));
			if(tNewRichView)
			{
				TRectangle rc;

				tNewRichView->GetBounds(&rc);
				tNewRichView->SetSelectionPos(0,rc.Width());
				PreSelectRichViewID = nCtrlID;
			}
		}
	}

	return bHandled;
}

//创建标题标签 for Title
Int32 TRecentNewsForm::_SetFormTilte(TApplication * pApp)
{
	char* szRecentNewsFuid = NULL;		
	TUChar pszCaption[64] = {0};
	TUChar pszName[32] = {0};

	szRecentNewsFuid = (char*)malloc(32);
	memset(szRecentNewsFuid, 0, sizeof(32));

	Get_Url_Params(KX_RecentNews, "fuid", &szRecentNewsFuid);			

	if(strcmp(szRecentNewsFuid,KaiXinUserInfo.uid)==0)
	{
		//从profile取realname
		int iRet = eFailed;
		tResponseProfile* tProfileResponse = NULL;
		iRet = KaiXinAPI_JsonParse(KX_Profile, (void **)&tProfileResponse);
		if(iRet == eSucceed)
		{
			TUString::StrUtf8ToStrUnicode(pszName,(Char*)tProfileResponse->realname);
		}

		if(tProfileResponse)
		{
			delete tProfileResponse;
		}
	}
	else
	{
		//从userinfo取
		int iRet = eFailed;
		tResponseGetUserInfos* tUserInfosResponse = NULL;
		iRet = KaiXinAPI_JsonParse(KX_GetUserInfos, (void **)&tUserInfosResponse);
		if(iRet == eSucceed)
		{
			if(tUserInfosResponse->nSize_friends != 0)
			{
				TUString::StrUtf8ToStrUnicode(pszName,(Char*)tUserInfosResponse->friends[0].fname);
			}
		}
		if(tUserInfosResponse)
		{
			delete tUserInfosResponse;
		}
	}

	TUString::StrCat(pszCaption, pszName);			
	TUString::StrCat(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Of));	
	TUString::StrCat(pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_News2));	

	free(szRecentNewsFuid);

	return SetAppTilte(this, 0, pszCaption);
}

Int32 TRecentNewsForm::_SetNewsCoolBarList(TApplication* pApp, KX_NewsShowType ShowType)
{
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;

	//nThumImgIndex = 0;//缩略图下标开始

	if(Response)
	{
		nThumImgIndex = 0;//缩略图下标开始
		m_nNewsItemCount = 0;//CoolbarItem值
		int nIndex = 0;//记录Jason中，news数组下标
		int nCoolMaxItem = (Response->nSize_news < KX_News_ITEM_COUNT_MAX)?Response->nSize_news:KX_News_ITEM_COUNT_MAX;	//cool最大item值
		TBarRow *lpRow = NULL;	
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_RecentNewsForm_RecentNewsCoolBarList));
		if (pCoolBarList)
		{
			//pCoolBarList->SetBounds(RC_LIST_LARGE);		
			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				//lpRowList->EndUpdate(); 
			}
		}

		while( nIndex < nCoolMaxItem)
		{
			//add Item
			TBarListItem* lpItem = NULL;
			if(lpRow)
			{
				if(_IsShow(nIndex,ShowType) == TRUE)
				{
					nItemNewsIndex[m_nNewsItemCount] = nIndex;
					lpItem = lpRow->AppendItem();
					if (lpItem)  
					{
						TFont objFontType;
						TUChar pszFName[32] = {0};
						TUChar pszIntro[1024] = {0}; 				
						TUChar pszContent[256] = {0};
						TUChar pszRepasteTitle[256] = {0};				
						TUChar pszDateTime[32] = {0};				
						TUChar* pDateTime = NULL;
						TUChar pszNType[8] = {0};
						TUChar pszUpNum[8] = {0};					
						Int32 ItemHeight = 0;
						Int32 ItemWidth = 0;				
						TRectangle Rc_Temp;
						TUChar* pTempTitle = NULL;
						TUChar* pTempContent = NULL;						
						TRectangle rect;				
						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);						
						lpItem->SetIndicatorType(itNone);

						Int32 CoolBarDiffTop = rect.Y() - Rc_CoolBarList.Y();//coolbarlist 距界面顶部的值	
						TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[nIndex].ntype);
						Int32 nType = TUString::StrAToI(pszNType);

						//动态类型图标
						Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);								
						const TBitmap * pBmp = TResource::LoadConstBitmap(GetIconIDByType(nType,(char *)Response->news[nIndex].ntypename));
						TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
						TRectangle Rc_Icon(KX_News_TYPE_ICON_X, CoolBarDiffTop + KX_News_TYPE_ICON_Y, KX_News_TYPE_ICON_W, KX_News_TYPE_ICON_H);
						pImage1->SetBounds(&Rc_Icon);
						//pImage1->SetBitmapByResId(GetIconIDByType(TUString::StrAToI(pszNType),(char *)Response->news[nIndex].ntypename));
						pImage1->SetBitmap(pBmp);
						ItemWidth = ItemWidth + KX_News_TYPE_ICON_X + KX_News_TYPE_ICON_W + KX_News_ITEM_W_SPACE;

						TUString::StrUtf8ToStrUnicode(pszUpNum , (const Char *)Response->news[nIndex].upnum);
						if(TUString::StrAToI(pszUpNum) != 0)
						{
							//动态赞图标
							Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
							const TBitmap * pPraiseBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_praise);
							TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
							TRectangle Rc_Icon(ItemWidth, CoolBarDiffTop +KX_News_PRAISE_ICON_Y, KX_News_PRAISE_ICON_W, KX_News_PRAISE_ICON_H);
							pImage1->SetBounds(&Rc_Icon);
							pImage1->SetBitmap(pPraiseBmp);
							pImage1->Show(TRUE);
							ItemWidth = ItemWidth + KX_News_PRAISE_ICON_W + KX_News_ITEM_W_SPACE;
						}

						if(Response->news[nIndex].star == 1)
						{
							//动态机构图标
							Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
							const TBitmap * pStarBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_star);
							TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
							TRectangle Rc_Icon(ItemWidth, CoolBarDiffTop +KX_News_STAR_ICON_Y, KX_News_STAR_ICON_W, KX_News_STAR_ICON_H);
							pImage1->SetBounds(&Rc_Icon);
							pImage1->SetBitmap(pStarBmp);

							ItemWidth = ItemWidth + KX_News_STAR_ICON_W + KX_News_ITEM_W_SPACE;
						}

						//好友姓名
						TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)Response->news[nIndex].fname);
						Int32 nLabelFnameId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						NewsFnameCtrlID[m_nNewsItemCount] = nLabelFnameId;//save fname ctrl ID
						TRichView* pFnameLabel = static_cast<TRichView*>(GetControlPtr(nLabelFnameId));
						TRectangle Rc_FnameLabel(ItemWidth, CoolBarDiffTop + KX_News_FNAME_Y, KX_News_FNAME_W, KX_News_FNAME_H);
						pFnameLabel->SetBounds(&Rc_FnameLabel);
						objFontType = pFnameLabel->GetFont();
						objFontType.Create(FONT_NAME, FONT_NAME);
						pFnameLabel->SetFont(objFontType); 
						pFnameLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 255));
						pFnameLabel->SetColor(CTL_COLOR_TYPE_BACK, LTBLUE);

						pFnameLabel->SetWordWrapAttr(FALSE);
						pFnameLabel->SetTransparent(TRUE);
						pFnameLabel->SetEnabled(TRUE);
						pFnameLabel->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pFnameLabel->SetMaxVisibleLines(1, TRUE);

						pFnameLabel->SetCaption(pszFName,FALSE);
						pFnameLabel->GetBounds(&Rc_Temp);

						ItemWidth = ItemWidth + Rc_Temp.Width()+ KX_News_ITEM_W_SPACE;

						//动态简介		
						if(nType == KX_NewsUploadPhoto || nType == KX_NewsRepaste)
						{
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);						
						}
						else
						{
							if(GetStringIDByType(nType,(char *)Response->news[nIndex].ntypename)!= 0)
							{
								TUString::StrCopy(pszIntro,TResource::LoadConstString(GetStringIDByType(nType,(char *)Response->news[nIndex].ntypename)));		
							}
							else
							{
								TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							}
						}

						//for test
						//TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);

						ItemHeight = KX_News_INTRO_Y;

						Int32 nLabeIntrolId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pIntroLabel = static_cast<TLabel*>(GetControlPtr(nLabeIntrolId));
						pIntroLabel->SetAutoSize(FALSE);
						TRectangle Rc_IntroLabel(ItemWidth, ItemHeight + CoolBarDiffTop, SCR_W-ItemWidth-KX_News_ITEM_W_SPACE, KX_News_INTRO_H);
						pIntroLabel->SetBounds(&Rc_IntroLabel);
						objFontType = pIntroLabel->GetFont();
						objFontType.Create(FONT_CONTENT, FONT_CONTENT);
						pIntroLabel->SetFont(objFontType);
						pIntroLabel->SetCaption(pszIntro,FALSE);
						//pIntroLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB(143,166,177));
						//pIntroLabel->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
						pIntroLabel->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;
						ItemHeight = _AddMoreLabel(lpItem,pIntroLabel,objFontType,pszIntro,ItemHeight,CoolBarDiffTop,Rc_Temp);


						/*CTL_CLASS_RICHVIEW TRichView
						pIntroLabel->SetWordWrapAttr(FALSE);
						pIntroLabel->SetTransparent(TRUE);
						pIntroLabel->SetEnabled(FALSE);
						pIntroLabel->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pIntroLabel->SetMaxVisibleLines(1, TRUE);
						pIntroLabel->Scroll(1,winScrollLeft);
						*/

						//具体的动态标题，内容部分					
						if(nType == KX_NewsVote || nType == KX_NewsPostDiary)
						{					
							//title
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							pTempTitle = GetTitleByType(nType, pTempTitle, pszIntro);
							if( pTempTitle && TUString::StrCompare(TUString::StrTrim(pTempTitle),TUSTR_Kx_NULL) != 0 )
							{
								Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								SaveCtrlIDByType(nType,nTitleId,m_nNewsItemCount);
								TRichView* pTitle = static_cast<TRichView*>(GetControlPtr(nTitleId));
								TRectangle Rc_Content(KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop, KX_News_CONTENT_W, KX_News_CONTENT_H);
								pTitle->SetBounds(&Rc_Content);
								objFontType = pTitle->GetFont();
								objFontType.Create(FONT_CONTENT, FONT_CONTENT);
								pTitle->SetFont(objFontType); 
								pTitle->SetCaption(pTempTitle,FALSE); 				
								pTitle->SetTransparent(TRUE);
								pTitle->SetEnabled(TRUE);

								pTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
								pTitle->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);

								pTitle->SetWordWrapAttr(FALSE);
								pTitle->SetTransparent(TRUE);
								pTitle->SetEnabled(TRUE);
								pTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pTitle->SetMaxVisibleLines(1, TRUE);

								pTitle->GetBounds(&Rc_Temp);
								ShowAsShort(pTitle, pTempTitle,objFontType);

								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;								
							}
						}
						else
						{
#if 0
							Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pTitle = static_cast<TLabel*>(GetControlPtr(nTitleId));
							TRectangle Rc_Content(KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop - (Rc_Temp.Height() + KX_News_ITEM_H_SPACE), KX_News_CONTENT_W, KX_News_CONTENT_H);
							pTitle->SetBounds(&Rc_Content);
							objFontType = pTitle->GetFont();
							objFontType.Create(KX_News_FONT_SIZE_CONTENT, KX_News_FONT_SIZE_CONTENT);
							pTitle->SetFont(objFontType); 
							//pTitle->SetCaption(pTempTitle,FALSE); 				
							pTitle->SetTransparent(TRUE);
							pTitle->SetEnabled(TRUE);

							pTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
							pTitle->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
							pTitle->GetBounds(&Rc_Temp);

							//ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;
#endif

						}

						if(nType == KX_NewsPostDiary)
						{						
							//content
							memset(pszIntro, 0, sizeof(pszIntro));
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							pTempContent = GetContentByType(nType, pTempContent, pszIntro);
							if( pTempContent && TUString::StrCompare(TUString::StrTrim(pTempContent),TUSTR_Kx_NULL) != 0 )
							{
								Int32 nContentId = CtrlAddItemToCoolBarList_Lable(this, lpItem, KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop, KX_News_CONTENT_W, FONT_MIDDLE, pTempContent);
								SaveCtrlIDByType(nType,nContentId,m_nNewsItemCount,1);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));//TRichView
								pContent->GetBounds(&Rc_Temp);
								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;								
							}
						}
						else if(nType == KX_NewsUpdateStatus || nType == KX_NewsMergeRecord)
						{						
							//content
							memset(pszIntro, 0, sizeof(pszIntro));
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							pTempContent = GetContentByType(nType, pTempContent, pszIntro);
							if( pTempContent && TUString::StrCompare(TUString::StrTrim(pTempContent),TUSTR_Kx_NULL) != 0 )
							{
								Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);//CTL_CLASS_RICHVIEW
								SaveCtrlIDByType(nType,nContentId,m_nNewsItemCount,1);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));//TRichView
								TRectangle Rc_Content(KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop, KX_News_CONTENT_W, KX_News_CONTENT_H);
								//pContent->SetAutoSize(FALSE);
								pContent->SetBounds(&Rc_Content);
								objFontType = pContent->GetFont();
								objFontType.Create(FONT_CONTENT, FONT_CONTENT);
								pContent->SetFont(objFontType); 
								//pContent->SetCaption(TUString::StrTrimUnVisible(pTempContent),FALSE);//StrTrim

								//pContent->SetWordWrapAttr(TRUE);
								//pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								//pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);

								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(TRUE);

								pContent->SetWordWrapAttr(FALSE);
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(TRUE);
								pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pContent->SetMaxVisibleLines(1, TRUE);

								pContent->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
								pContent->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
								pContent->GetBounds(&Rc_Temp);

								ShowAsShort(pContent, pTempContent,objFontType);


								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;								
							}
						}
						else if(0)//nType == KX_NewsUpdateStatus || nType == KX_NewsMergeRecord
						{
							//content
							memset(pszIntro, 0, sizeof(pszIntro));
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							pTempContent = GetContentByType(nType, pTempContent, pszIntro);
							if(pTempContent)
							{
								Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								SaveCtrlIDByType(nType,nContentId,m_nNewsItemCount,1);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
								TRectangle Rc_Content(KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop, KX_News_CONTENT_W, KX_News_CONTENT_H);

								pContent->SetBounds(&Rc_Content);
								objFontType = pContent->GetFont();
								objFontType.Create(FONT_CONTENT, FONT_CONTENT);
								pContent->SetFont(objFontType); 

								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(FALSE);
								pContent->SetCaption(pTempContent,FALSE);

								pContent->SetWordWrapAttr(TRUE);
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(TRUE);
								pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);

								pContent->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
								pContent->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
								pContent->GetBounds(&Rc_Temp);

								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;
							}												

						}

						//动态内容部分

						if(Response->news[nIndex].nSize_imglist != 0)
						{
							int i = 0;
							int thumnailCount = (Response->news[nIndex].nSize_imglist<KX_News_ITEM_THUMBNAIL_COUNT_MAX)?Response->news[nIndex].nSize_imglist:KX_News_ITEM_THUMBNAIL_COUNT_MAX;
							for(i = 0; i < thumnailCount; i++)
							{
								KaiXinAPICommon_DownloadPhoto(Response->news[nIndex].imglist[i].thumbnail, this->GetWindowHwndId(), nThumImgIndex );

								//动态类型图片
								nThumbnailImage[nThumImgIndex] = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
								NewsThumbnailCtrlID[m_nNewsItemCount][i] = nThumbnailImage[nThumImgIndex];//save thumbnail ID
								TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[nIndex].ntype);				
								pThumbnailImage[nThumImgIndex] = static_cast<TImage*>(GetControlPtr(nThumbnailImage[nThumImgIndex]));
								TRectangle Rc_ThumbnailImage(KX_News_THUMBNAIL_X + i*(KX_News_THUMBNAIL_W+KX_News_ITEM_H_SPACE),ItemHeight + CoolBarDiffTop, KX_News_THUMBNAIL_W, KX_News_THUMBNAIL_H);
								pThumbnailImage[nThumImgIndex]->SetBounds(&Rc_ThumbnailImage);
								pThumbnailImage[nThumImgIndex]->SetBitmapByResId(APP_KA_ID_BITMAP_Default);
								
								nThumImgIndex++;
							}
							ItemHeight = ItemHeight + KX_News_THUMBNAIL_H + KX_News_ITEM_H_SPACE;				
						}					

						if(Response->news[nIndex].nSize_replist != 0)
						{
							int i = 0;
							int RepasteCountMax = (Response->news[nIndex].nSize_replist < KX_News_ITEM_REPASTE_COUNT_MAX)? Response->news[nIndex].nSize_replist:KX_News_ITEM_REPASTE_COUNT_MAX;//显示转帖数
							for(i = 0; i < RepasteCountMax; i++)
							{
								//动态转帖标题
								TUString::StrUtf8ToStrUnicode(pszRepasteTitle, (const Char *)Response->news[nIndex].replist[i].title);
								Int32 nRepasteTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								NewsRepasteCtrlID[m_nNewsItemCount][i] = nRepasteTitleId;//save repaste ctrl
								TRichView* pRepasteTitle = static_cast<TRichView*>(GetControlPtr(nRepasteTitleId));
								Int32 nRepasteTitleY = ItemHeight + CoolBarDiffTop;
								TRectangle Rc_Content(KX_News_REPASTE_X, nRepasteTitleY, KX_News_REPASTE_W, KX_News_REPASTE_H);
								pRepasteTitle->SetBounds(&Rc_Content);
								objFontType = pRepasteTitle->GetFont();
								objFontType.Create(FONT_CONTENT, FONT_CONTENT);
								pRepasteTitle->SetFont(objFontType); 
								pRepasteTitle->SetCaption(pszRepasteTitle,FALSE); 				
								//pRepasteTitle->SetAutoSize(TRUE);

								pRepasteTitle->SetWordWrapAttr(FALSE);
								pRepasteTitle->SetTransparent(TRUE);
								pRepasteTitle->SetEnabled(TRUE);
								pRepasteTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pRepasteTitle->SetMaxVisibleLines(1, TRUE);

								pRepasteTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
								pRepasteTitle->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);								
								pRepasteTitle->SetTransparent(TRUE);
								pRepasteTitle->SetEnabled(TRUE);

								pRepasteTitle->GetBounds(&Rc_Temp);

								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;
							}
						}

#if 0
						TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)Response->news[nIndex].title);
						Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
						Int32 nContentY = ItemHeight + CoolBarDiffTop;
						TRectangle Rc_Content(KX_News_CONTENT_X, nContentY, KX_News_CONTENT_W, KX_News_CONTENT_H);
						pContent->SetBounds(&Rc_Content);
						objFontType = pContent->GetFont();
						objFontType.Create(KX_News_FONT_SIZE_CONTENT, KX_News_FONT_SIZE_CONTENT);
						pContent->SetFont(objFontType); 
						pContent->SetCaption(pszContent,FALSE);
						pContent->SetCaption(L"content content",FALSE); 				
						pContent->SetWordWrapAttr(TRUE);
						pContent->SetTransparent(TRUE);
						pContent->SetEnabled(FALSE);
						pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pContent->SetFrameWidth(2);//just for test
						pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
						pContent->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_SPACE;
#endif

						//动态日期
						cUnixTime_ConvertUnixTimeToFormatString(Response->news[nIndex].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pDateTime );
						TUString::StrUtf8ToStrUnicode(pszDateTime, (const Char *)Response->news[nIndex].stime);
						Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 0, 0);
						TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
						TRectangle Rc_Time(KX_News_STIME_X, ItemHeight + CoolBarDiffTop, KX_News_STIME_W, KX_News_STIME_H);
						pTime->SetBounds(&Rc_Time);
						objFontType = pTime->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pTime->SetFont(objFontType); 
						//pTime->SetCaption(pDateTime,FALSE);
						pTime->SetCaption(pszDateTime,FALSE);
						pTime->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
						//pTime->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);					
						pTime->GetBounds(&Rc_Temp);
						if(pDateTime) 
						{
							delete[] pDateTime; 
							pDateTime = NULL;
						}

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;


						lpItem->SetHeight(ItemHeight);

					}
				}
			}
			nIndex++;
			m_nNewsItemCount++;
		}
		if (pCoolBarList)
		{
			pCoolBarList->Update();
		}
		lpRowList->EndUpdate();
		//this->DrawWindow();
		this->UpdateWindow(0);
	}

	return TRUE;
}

Boolean TRecentNewsForm::_IsShow(Int32 nIndex,KX_NewsShowType ShowType)
{
	Boolean bShow = FALSE;

	switch(ShowType)
	{
	case KX_NewsShowAll:
		{
			bShow = TRUE;			
			break;
		}
	case KX_NewsShowImportant://重要劢态：照片、日志、记录、状态变更劢态
		{				
			//char *TypeName = GetTypeNameByTypeID(TUString::StrAToI(pszNType));
			if(//(strcmp(KxNewsIcons[KX_NewsUploadPhoto].nTypename,Response->news[nIndex].ntypename)==0)||
				(strcmp(GetTypeNameByTypeID(KX_NewsPostDiary),Response->news[nIndex].ntypename)==0)
				||(strcmp(GetTypeNameByTypeID(KX_NewsMergeRecord),Response->news[nIndex].ntypename)==0)
				||(strcmp(GetTypeNameByTypeID(KX_NewsUpdateStatus),Response->news[nIndex].ntypename)==0)			
				)
			{
				bShow = TRUE;
			}
			break;
		}			
	case KX_NewsShowStar:
		{
			if(Response->news[nIndex].star == 1)
			{
				bShow = TRUE;
			}
			break;
		}
	default:
		{
			bShow = TRUE;
			break;
		}					
	}

	return bShow;
}

void TRecentNewsForm::SaveCtrlIDByType(Int32 nType,Int32 Id, Int32 ItemIndex,Int32 CtlType)//CtlType = 0 代表TitleCtrl，CtlType = 1 代表内容contentCtrl
{

	if(nType >= KX_NewsTypeStart && nType <= KX_NewsTypeEnd)
	{
		switch(nType)
		{
		case KX_NewsPostDiary:
			{
				if(CtlType)
				{
					NewsDiaryContCtrlID[ItemIndex] = Id;
				}
				else
				{
					NewsDiaryTitleCtrlID[ItemIndex] = Id;
				}
				break;
			}
		case KX_NewsUpdateStatus:
			{		
				NewsStatusContCtrlID[ItemIndex] = Id;
				break;
			}
		case KX_NewsMergeRecord:
			{
				NewsRecordCtrlID[ItemIndex] = Id;
				break;
			}
		case KX_NewsVote:
			{
				NewsVoteTitleCtrlID[ItemIndex] = Id;//目前只有title
				break;
			}		
		}
	}
}	

Int32 TRecentNewsForm::_AddMoreLabel(TBarListItem* lpItem, TLabel* pIntroLabel, TFont objFontType,TUChar* pChar,Int32 ItemHeight, Int32 CoolBarDiffTop, TRectangle Rc_Temp)
{
	Int32 nStrLen = 0;
	Int32 nIntroLabelStrLen = 0;
	TUChar pszTemp[128] = {0};
	Int32 nItemHeight = ItemHeight; 

	nStrLen = TUString::StrLen(pChar);									  
	nIntroLabelStrLen = objFontType.WordWrapNoLF(pChar, Rc_Temp.Width());

	if (nIntroLabelStrLen < nStrLen)
	{
		//Add one more label to show
		TUString::StrNCopy(pszTemp,pChar,nIntroLabelStrLen);
		pIntroLabel->SetCaption(pszTemp,FALSE);

		Int32 nLabeIntrolIdM = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
		TLabel* pIntroLabelM = static_cast<TLabel*>(GetControlPtr(nLabeIntrolIdM));
		pIntroLabelM->SetAutoSize(FALSE);
		TRectangle Rc_IntroLabelM(KX_News_REPASTE_X, ItemHeight + CoolBarDiffTop, SCR_W-KX_News_REPASTE_X-KX_News_ITEM_W_SPACE, KX_News_INTRO_H);
		pIntroLabelM->SetBounds(&Rc_IntroLabelM);
		objFontType = pIntroLabelM->GetFont();
		objFontType.Create(FONT_CONTENT, FONT_CONTENT);
		pIntroLabelM->SetFont(objFontType);
		//pIntroLabelM->SetColor(CTL_COLOR_TYPE_FORE, RGB(143,166,177));
		//pIntroLabelM->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN); 					
		pIntroLabelM->SetCaption(pChar+nIntroLabelStrLen,FALSE);
		pIntroLabelM->GetBounds(&Rc_Temp);

		nItemHeight = ItemHeight + KX_News_INTRO_H + KX_News_ITEM_H_SPACE;
		nItemHeight = _AddMoreLabel(lpItem,pIntroLabelM,objFontType,pChar+nIntroLabelStrLen,nItemHeight,CoolBarDiffTop,Rc_Temp);
	}
	else
	{
		//needn't add more label to show
	}

	return nItemHeight;
}

