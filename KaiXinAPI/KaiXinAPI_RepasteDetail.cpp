/*!
* \file	 KaiXinApp_RepasteDetail.cpp
* \author	 huxianxiang@GoZone
* \date	 2010-9-30
* \brief  解析与UI: 转贴信息
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#define KX_REPASTE_DETAIL_VOTE_X			(60)
#define KX_REPASTE_DETAIL_VOTE_Y			(422)
#define KX_REPASTE_DETAIL_VOTE_W			(18)
#define KX_REPASTE_DETAIL_VOTE_H			(21)

#define KX_REPASTE_DETAIL_COMMENT_X			(140)
#define KX_REPASTE_DETAIL_COMMENT_Y			(KX_REPASTE_DETAIL_VOTE_Y)
#define KX_REPASTE_DETAIL_COMMENT_W			(19)
#define KX_REPASTE_DETAIL_COMMENT_H			(25)

#define KX_REPASTE_DETAIL_ACTION_X			(220)
#define KX_REPASTE_DETAIL_ACTION_Y			(KX_REPASTE_DETAIL_VOTE_Y + 4)
#define KX_REPASTE_DETAIL_ACTION_W			(90)
#define KX_REPASTE_DETAIL_ACTION_H			(25)

void* KaiXinAPI_RepasteDetail_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseRepasteDetail*  Response = new tResponseRepasteDetail;
	memset(Response, 0 , sizeof(tResponseRepasteDetail));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->uid, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "surpid");
		if(pTemp0)
		{
			if(pTemp0->valuedouble > 0)
				DoubleToChar(pTemp0->valuedouble, Response->surpid);
			else
				STRCPY_Ex(Response->surpid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "urpid");
		if(pTemp0)
		{
			if(pTemp0->valuedouble > 0)
				DoubleToChar(pTemp0->valuedouble, Response->urpid);
			else		
				STRCPY_Ex(Response->urpid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "suid");
		if(pTemp0)
		{
			if(pTemp0->valuedouble > 0)
				DoubleToChar(pTemp0->valuedouble, Response->suid);
			else			
				STRCPY_Ex(Response->suid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "voteuid");
		if(pTemp0)
		{
			if(pTemp0->valuedouble > 0)
				DoubleToChar(pTemp0->valuedouble, Response->voteuid);
			else			
				STRCPY_Ex(Response->voteuid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "title");
		if(pTemp0)
		{
			STRCPY_Ex(Response->title, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "content");
		if(pTemp0)
		{
			STRCPY_Ex(Response->content, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "rpnum");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->rpnum, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->rpnum, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "vnum");
		if(pTemp0)
		{
			if(pTemp0->valueint > 0)
				sprintf(Response->vnum, "%d", pTemp0->valueint);
			else
				STRCPY_Ex(Response->vnum, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "repasters");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_repasters = nSize1;
			if( nSize1 != 0 )
			{
				Response->repasters = NULL;
				Response->repasters = (RepasteDetail_repasters*) malloc(sizeof( RepasteDetail_repasters ) * nSize1 );
				memset(Response->repasters, 0 , sizeof(RepasteDetail_repasters) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "uid");
				if(pTemp1)
				{
					Response->repasters[i].uid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->repasters[i].fname, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "visitors");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_visitors = nSize1;
			if( nSize1 != 0 )
			{
				Response->visitors = NULL;
				Response->visitors = (RepasteDetail_visitors*) malloc(sizeof( RepasteDetail_visitors ) * nSize1 );
				memset(Response->visitors, 0 , sizeof(RepasteDetail_visitors) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "uid");
				if(pTemp1)
				{
					Response->visitors[i].uid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->visitors[i].fname, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "taglist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_taglist = nSize1;
			if( nSize1 != 0 )
			{
				Response->taglist = NULL;
				Response->taglist = (RepasteDetail_taglist*) malloc(sizeof( RepasteDetail_taglist ) * nSize1 );
				memset(Response->taglist, 0 , sizeof(RepasteDetail_taglist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "id");
				if(pTemp1)
				{
					Response->taglist[i].id = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "name");
				if(pTemp1)
				{
					STRCPY_Ex(Response->taglist[i].name, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "cnum");
		if(pTemp0)
		{
			STRCPY_Ex(Response->cnum, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "newflag");
		if(pTemp0)
		{
			Response->newflag = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "resultlist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_resultlist = nSize1;
			if( nSize1 != 0 )
			{
				Response->resultlist = NULL;
				Response->resultlist = (RepasteDetail_resultlist*) malloc(sizeof( RepasteDetail_resultlist ) * nSize1 );
				memset(Response->resultlist, 0 , sizeof(RepasteDetail_resultlist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "uid");
				if(pTemp1)
				{
					Response->resultlist[i].uid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->resultlist[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "answer");
				if(pTemp1)
				{
					STRCPY_Ex(Response->resultlist[i].answer, pTemp1->valuestring);
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "answerlist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_answerlist = nSize1;
			if( nSize1 != 0 )
			{
				Response->answerlist = NULL;
				Response->answerlist = (RepasteDetail_answerlist*) malloc(sizeof( RepasteDetail_answerlist ) * nSize1 );
				memset(Response->answerlist, 0 , sizeof(RepasteDetail_answerlist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "votepercent");
				if(pTemp1)
				{
					Response->answerlist[i].votepercent = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "votenum");
				if(pTemp1)
				{
					STRCPY_Ex(Response->answerlist[i].votenum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "answer");
				if(pTemp1)
				{
					STRCPY_Ex(Response->answerlist[i].answer, pTemp1->valuestring);
				}
			}
		}
	}
	else
	{
	}
	cJSON_Delete(json);
	return Response;
}

void* KaiXinAPI_PostRepaste_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponsePostRepaste*  Response = new tResponsePostRepaste;
	memset(Response, 0 , sizeof(tResponsePostRepaste));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
	}

	cJSON_Delete(json);
	return Response;
}

// 构造函数
TRepasteDetailForm::TRepasteDetailForm(TApplication* pApp):TWindow(pApp)
{
	m_pWebPanel = NULL;
	//m_pVote = NULL;
	//m_pComment = NULL;
	//m_pRepaste = NULL;
	n_CommentCount = 0;
	Create(APP_KA_ID_RepasteDetail_Form);
}

// 析构函数
TRepasteDetailForm::~TRepasteDetailForm(void)
{
	if (m_pWebPanel)
	{
		//m_pWebPanel->stopLoad();
		m_pWebPanel->close();
		m_pWebPanel = NULL;
	}	
}

// 窗口事件处理
Boolean TRepasteDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			dc.SetBackColor(RGB_COLOR_WHITE);
			dc.EraseRectangle(&rc, 0);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, SCR_H-STATUSBAR_H-BOTTOM_TAB_H, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						
			switch(notifyData.nAccessType)
			{
			case KX_PostRepaste:
				{
					int iRet = eSucceed;
					tResponsePostRepaste* Response = NULL;

					iRet = KaiXinAPI_JsonParse(KX_PostRepaste, (void **)&Response);
					if(iRet == eSucceed)
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_OK);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;

			default:
				break;
			}
			bHandled = TRUE;
		}
		break;
	case MSG_POST_THREAD_NOTIFY:
		{
			bHandled = TRUE;
		}
		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;		
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TRepasteDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	tResponseRepasteDetail* Response = NULL;

	iRet = KaiXinAPI_JsonParse(KX_RepasteDetail, (void **)&Response);
	m_BackBtn = SetAppBackButton(this);	
	_SetFormTilte(pApp);

	if(iRet == 1)
	{
		//m_pVote = new TImage();
		//if(m_pVote->Create(this))
		//{
		//	TRectangle Rc_Vote(KX_REPASTE_DETAIL_VOTE_X, KX_REPASTE_DETAIL_VOTE_Y, KX_REPASTE_DETAIL_VOTE_W, KX_REPASTE_DETAIL_VOTE_H);
		//	m_pVote->SetBounds(&Rc_Vote);
		//	m_pVote->SetBitmap(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_hudong));
		//}

		TUChar TNum[16] = {0};
		TUString::StrUtf8ToStrUnicode(TNum , (const Char *)Response->cnum);
		n_CommentCount = TUString::StrAToI(TNum);

		//:TODO:Show Comment count.

		TMaskButton* pHuDongMaskButton = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_RepasteDetail_Form_RepasteHuDongMaskButton));
		TMaskButton* pCommentMaskButton = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_RepasteDetail_Form_RepasteCommentMaskButton));
		TMaskButton* pRepasteMaskButton = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_RepasteDetail_Form_RepasteRepasteMaskButton));

		const TBitmap * pImgMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button98);
		const TBitmap * pImgSelMask = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_button98_over);

		const TBitmap * pHuDongImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_hudong_btn);
		const TBitmap * pHuDongImgSel = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_hudong_btn_hl);

		const TBitmap * pCommentImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_comment_btn);
		const TBitmap * pCommentImgSel = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_comment_btn_hl);

		const TBitmap * pRepasteImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repaste_btn);
		const TBitmap * pRepasteImgSel = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_repaste_btn_hl);

		if(pHuDongMaskButton)
		{
#if 0		
			pHuDongMaskButton->SetTransparent(TRUE);
			pHuDongMaskButton->SetMaskImage(pImgMask,pImgSelMask,pImgMask);
			pHuDongMaskButton->SetImage(pHuDongImgNormal,20,8); 
			pHuDongMaskButton->SetSelImage(pHuDongImgSel,20,8);	
			pHuDongMaskButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Interactive),45,8);
			pHuDongMaskButton->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
#endif
			//无互动转帖需要隐藏
			if( ( Response->nSize_answerlist == 0 ) && ( Response->nSize_taglist == 0 ) )
				pHuDongMaskButton->Hide(TRUE);
		}
#if 0		
		if(pCommentMaskButton)
		{
			pCommentMaskButton->SetTransparent(TRUE);
			pCommentMaskButton->SetMaskImage(pImgMask,pImgSelMask,pImgMask);
			pCommentMaskButton->SetImage(pCommentImgNormal,20,8); 
			pCommentMaskButton->SetSelImage(pCommentImgSel,20,8);	
			pCommentMaskButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendComment),45,8);
			pCommentMaskButton->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
		}
		if(pRepasteMaskButton)
		{
			pRepasteMaskButton->SetTransparent(TRUE);
			pRepasteMaskButton->SetMaskImage(pImgMask,pImgSelMask,pImgMask);
			pRepasteMaskButton->SetImage(pRepasteImgNormal,20,8); 
			pRepasteMaskButton->SetSelImage(pRepasteImgSel,20,8);	
			pRepasteMaskButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Repaste),45,8);
			pRepasteMaskButton->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
		}		
#endif
		MakeHtmlFile(KX_RepasteDetail, Response->content);

		TRectangle WebRet;
		GetBounds( &WebRet);
		Int32 TopLeftX = 5;
		Int32 TopLeftY = TITLEBAR_H + 4;
		Int32 TopHeigh = SCR_H - STATUSBAR_H - TITLEBAR_H - BOTTOM_TAB_H - 4*2;
		Int32 TopWidth = SCR_W - 5*2;
		WebRet.SetX(TopLeftX);
		WebRet.SetY(TopLeftY);
		WebRet.SetHeight(TopHeigh);
		WebRet.SetWidth(TopWidth);

		m_pWebPanel = TBrowser::TWebPanel::create(this, WebRet, NULL);

		TUChar* pszFilePath = GetHtmlFileUrl(KX_RepasteDetail);
		if(pszFilePath != NULL)
		{
			m_pWebPanel->loadUrl(pszFilePath);
			delete pszFilePath;
			pszFilePath = NULL;
		}
	}

	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

Int32 TRepasteDetailForm::_SetFormTilte(TApplication * pApp)
{
	int iRet = eFailed;
	TUChar pszCaption[64] = {0};
	TUChar pszName[32];
	char* szUid = NULL;
	char* szFuid = NULL;		

	szUid = (char*)malloc(32);
	szFuid = (char*)malloc(32);
	memset(szUid, 0, sizeof(32));
	memset(szFuid, 0, sizeof(32));

	Get_Url_Params(KX_RepasteDetail, "uid", &szUid);			
	Get_Url_Params(KX_RepasteDetail, "fuid", &szFuid);

	if(strcmp(szUid, szFuid)==0)
	{
		TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Me));
	}
	else
	{
		Int32 Fuid = 0, i = 0;
		TUChar TUCharFuid[32];
		tResponseGetUserInfos* Response = NULL;
		TUString::StrUtf8ToStrUnicode(TUCharFuid,(const Char *)szFuid);
		Fuid = TUString::StrAToI(TUCharFuid);
		iRet = KaiXinAPI_JsonParse(KX_GetUserInfos, (void **)&Response);
		if(iRet == eSucceed)
		{
			for(i = 0; i<Response->nSize_friends; i++)
			{
				if((Int32)Response->friends[i].fuid == Fuid)
				{
					TUString::StrUtf8ToStrUnicode(pszName , (const Char *)Response->friends[i].fname);
					TUString::StrCat (pszCaption, pszName);
					break;
				}
			}
			if(i >= Response->nSize_friends)
			{
				TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
			}
		}
		else
		{
			TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_Friend));
		}

		if( Response )
		{
			delete Response;	
		}
	}
	TUString::StrCat (pszCaption, TResource::LoadConstString(APP_KA_ID_STRING_SRepaste));
	SetAppTilte(this,0,pszCaption);
	//this->SetTitleEx(pszCaption, TRUE);
	free(szUid);
	free(szFuid);
	return iRet;
}

// 关闭窗口时，保存设置信息
Boolean TRepasteDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TRepasteDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(nCtrlID ==  APP_KA_ID_RepasteDetail_Form_RepasteHuDongMaskButton )/*"互动"*/
	{
		int iRet = eFailed;
		tResponseRepasteDetail* Response = NULL;
		iRet = KaiXinAPI_JsonParse(KX_RepasteDetail, (void **)&Response);
		if(iRet == 1)
		{
			if( Response->nSize_answerlist > 0 )
			{
				//:TODO: 固定标签模式
				Set_Url_Params(KX_RefreshVote, "flag", "0");
				KaiXinAPICommon_Download(KX_RefreshVote, this->GetWindowHwndId());
			}
			else if( Response->nSize_taglist > 0 )
			{
				//:TODO:互动标签模式
				Set_Url_Params(KX_RefreshTag, "flag", "0");
				KaiXinAPICommon_Download(KX_RefreshTag, this->GetWindowHwndId());
			}
			else
			{
				//无互动
			}
		}
		if( Response )
		{
			delete Response;	
		}
		bHandled = TRUE;
	}
	//else if( m_pComment != NULL && nCtrlID == m_pComment->GetId() && n_CommentCount > 0)
	else if(nCtrlID == APP_KA_ID_RepasteDetail_Form_RepasteCommentMaskButton)/*"评论"*/
	{
		int iRet = eFailed;
		tResponseRepasteDetail* Response = NULL;
		iRet = KaiXinAPI_JsonParse(KX_RepasteDetail, (void **)&Response);
		if(iRet == 1)
		{
			Set_Url_Params(KX_ReceivedAnObjectComments, "fuid", (char*)Response->suid);
			Set_Url_Params(KX_ReceivedAnObjectComments, "id", (char*)Response->surpid);		
			Set_Url_Params(KX_ReceivedAnObjectComments, "type", (char*)"1088");		

			KaiXinAPICommon_Download(KX_ReceivedRepasteComments, this->GetWindowHwndId());
		}
		if( Response )
		{
			delete Response;	
		}

		bHandled = TRUE;
	}
	else if(nCtrlID == APP_KA_ID_RepasteDetail_Form_RepasteRepasteMaskButton )/*"转帖"*/
	{
		int iRet = eFailed;
		tResponseRepasteDetail* Response = NULL;
		iRet = KaiXinAPI_JsonParse(KX_RepasteDetail, (void **)&Response);
		if(iRet == 1)
		{
			Set_Url_Params(KX_PostRepaste, "fuid", Response->suid); 	
			Set_Url_Params(KX_PostRepaste, "urpid", Response->surpid); 	
			Set_Url_Params(KX_PostRepaste, "reptype", "");

			KaiXinAPICommon_Download(KX_PostRepaste, this->GetWindowHwndId());	
		}
		if( Response )
		{
			delete Response;	
		}

		bHandled = TRUE;
	}
	else
	{

	}

	return bHandled;
}