/*!
* \file	 KaiXinApp_RepasteIndex.cpp
* \author	 huxianxiang@GoZone
* \date	
* \brief  解析与UI: 转贴列表
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#if(LCD_SIZE == LCD_HVGA )
#define ITEM_LINE_SPACE		(8)
#define ITEM_TITLE_FONT		(FONT_NORMAL)
#define ITEM_TIME_FONT		(FONT_SMALL)
#define ITEM_H				(ITEM_LINE_SPACE + ITEM_TITLE_FONT + ITEM_LINE_SPACE + ITEM_TIME_FONT + ITEM_LINE_SPACE*2)

#elif(LCD_SIZE == LCD_WVGA )
#define ITEM_LINE_SPACE		(12)
#define ITEM_TITLE_FONT		(FONT_NORMAL)
#define ITEM_TIME_FONT		(FONT_SMALL)
#define ITEM_H				(ITEM_LINE_SPACE + ITEM_TITLE_FONT + ITEM_LINE_SPACE + ITEM_TIME_FONT + ITEM_LINE_SPACE*2)

#endif

#define ITEM_TITLE_X			(10)
#define ITEM_TITLE_Y			(ITEM_LINE_SPACE)
#define ITEM_TITLE_W			(SCR_W - 40)

#define ITEM_TIME_X			(ITEM_TITLE_X)
#define ITEM_TIME_Y			(ITEM_TITLE_Y + ITEM_TITLE_FONT + ITEM_LINE_SPACE)
#define ITEM_TIME_W		(ITEM_TITLE_W)


#define KX_REPASTE_MORE_TAGVALUE			(0xabcd)
void* KaiXinAPI_RepasteIndex_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseRepasteIndex*  Response = new tResponseRepasteIndex;
	memset(Response, 0 , sizeof(tResponseRepasteIndex));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "total");
		if(pTemp0)
		{
			STRCPY_Ex(Response->szTotal, pTemp0->valuestring);
			Response->total = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "replists");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_replists = nSize1;
			if( nSize1 != 0 )
			{
				Response->replists = NULL;
				Response->replists = (RepasteIndex_replists*) malloc(sizeof( RepasteIndex_replists ) * nSize1 );
				memset(Response->replists, 0 , sizeof(RepasteIndex_replists) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "id");
				if(pTemp1)
				{
					if(pTemp1->valuedouble > 0)
						DoubleToChar(pTemp1->valuedouble, Response->replists[i].id);
					else
						STRCPY_Ex(Response->replists[i].id, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "title");
				if(pTemp1)
				{
					STRCPY_Ex(Response->replists[i].title, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					Response->replists[i].ctime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "strctime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->replists[i].strctime, pTemp1->valuestring);
				}
			}
		}
	}
	cJSON_Delete(json);
	return Response;
}

// 构造函数
TRepasteIndexForm::TRepasteIndexForm(TApplication* pApp):TWindow(pApp)
{
	_TRepasteIndexForm_Init(pApp);
	Create(APP_KA_ID_CommonCoolBarListForm);
}

// 析构函数
TRepasteIndexForm::~TRepasteIndexForm(void)
{

}

// 窗口事件处理
Boolean TRepasteIndexForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			dc.SetBackColor(RGB_COLOR_WHITE);
			dc.EraseRectangle(&rc, 0);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);

		}
		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;	
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
				case KX_RepasteIndexMore:
				{
					tResponseRepasteIndex* Response = NULL;
					KaiXinAPI_JsonParse(KX_RepasteIndexMore, (void **)&Response);
					if(Response != NULL)
					{
						_UpdateCoolBarList(pApp, Response);

						delete Response;
						Response = NULL;
					}					
				}
			}
		}
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TRepasteIndexForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet =0, nIndex = 0;
	tResponseRepasteIndex* Response = NULL;

	m_BackBtn = SetAppBackButton(this);	
	SetAppTilte(this,APP_KA_ID_STRING_Repaste);

	TBarRowList* 	lpRowList = NULL;
	TBarRow* 		lpRow = NULL;
	TCoolBarList* 	pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList));
	if(pCoolBarList == NULL)
		return FALSE;
		
	lpRowList = pCoolBarList->Rows();
	if(lpRowList == NULL)
		return FALSE;
	
	//add row
	lpRowList->BeginUpdate();
	lpRowList->Clear();
	lpRow = lpRowList->AppendRow();									
	lpRowList->EndUpdate(); 

	if(lpRow == NULL)
		return FALSE;


	iRet = KaiXinAPI_JsonParse(KX_RepasteIndex, (void **)&Response);
	if(Response == NULL)
		return FALSE;

	_UpdateCoolBarList(pApp, Response);

	if( Response )
	{
		delete Response;	
	}

	return TRUE;
}

Boolean TRepasteIndexForm::_UpdateCoolBarList(TApplication* pApp, tResponseRepasteIndex* Response)
{
	TBarRowList *lpRowList = NULL;
	TBarRow *lpRow = NULL;
	TBarListItem* lpItem = NULL;
		
	TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList));//ShowCoolList(ShowType)
	if(pCoolBarList == NULL)
		{
		return FALSE;
		}
	//背景设置为白色底色
	pCoolBarList->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, RGB_COLOR_WHITE);
	
	lpRowList = pCoolBarList->Rows();
	if (lpRowList == NULL)
		{
		return FALSE;
		}
	
	lpRowList->BeginUpdate();
	lpRow = lpRowList->FirstRow();
	if(lpRow == NULL)
	{
	return FALSE;
	}

	//如果列表不为空,则说明更新更多,先删除上一个更多按钮
	{
		TBarListItem* lpItem = NULL;
		lpItem = lpRow->LastItem();
		if(lpItem)
		{
			lpItem->Delete(FALSE);
		}
	}
	
	for(int i=0; i<Response->nSize_replists; i++)
	{
		//如果个数超过这直接返回
		if(m_ItemCount >= KX_REPASTE_COUNT_MAX)
			break;
		
		//add Item
		lpItem = lpRow->AppendItem();
		if (lpItem)
		{
			TUChar pszTitle[32+256] = {0};	
			TUChar* pszDateTime = NULL;

			lpItem->SetCaption(NULL);
			lpItem->SetTitle(NULL);
			lpItem->SetIndicatorType(itDefault);

			TUString::StrUtf8ToStrUnicode(pszTitle , (const Char *)Response->replists[i].title);
			CtrlAddItemToCoolBarList_Lable(this, lpItem, ITEM_TITLE_X, ITEM_TITLE_Y, ITEM_TITLE_W, ITEM_TITLE_FONT, pszTitle);

			cUnixTime_ConvertUnixTimeToFormatString(Response->replists[i].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
			CtrlAddItemToCoolBarList_Lable(this, lpItem, ITEM_TIME_X, ITEM_TIME_Y, ITEM_TIME_W, ITEM_TIME_FONT, pszDateTime, RGB_COLOR_GRAY);
			if(pszDateTime) 
			{
				delete[] pszDateTime;
				pszDateTime = NULL;
			}
			lpItem->SetHeight(ITEM_H);

			lpItem->SetTagValue(m_ItemCount);
			STRCPY_Ex(gItemData[m_ItemCount].id, Response->replists[i].id);

			m_ItemCount ++;
		}
	}

	//显示More
	//容错,服务器返回的值有时是int,有时是string
	int nTotalItem = 0;
	if(strlen(Response->szTotal) > 0)
		nTotalItem = atoi(Response->szTotal);
	else
		nTotalItem = Response->total;
		
	if(Response->nSize_replists < nTotalItem)
	{
		lpItem = lpRow->AppendItem();
		lpItem->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_More));
		lpItem->SetTagValue(KX_REPASTE_MORE_TAGVALUE);
	}
	
	lpRowList->EndUpdate();
	
	if (pCoolBarList)
	{
		pCoolBarList->Update();
	}
	this->UpdateWindow(0);

	return TRUE;
}

Boolean TRepasteIndexForm::_TRepasteIndexForm_Init(TApplication* pApp)
{
	memset(&gItemData, 0, sizeof(gItemData));

	m_ItemCount = 0;
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TRepasteIndexForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TRepasteIndexForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if( nCtrlID == APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList)
	{
		TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
		if( pRow->GetIndex() == 0 )	//First Row
		{
			char* szFuid = NULL;		
			szFuid = (char*)malloc(32);
			memset(szFuid, 0, sizeof(32));

			TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
			Int32 ItemIndex = 0;
			ItemIndex = pItem->GetTagValue();
			if(ItemIndex == KX_REPASTE_MORE_TAGVALUE)
			{
				Set_Url_Params(KX_RepasteIndexMore, "lasturpid", gItemData[m_ItemCount-1].id);//最后一个记录的ID
				KaiXinAPICommon_Download(KX_RepasteIndexMore, this->GetWindowHwndId());				
			}
			else
			{
				Set_Url_Params(KX_RepasteDetail, "urpid", (char *)gItemData[ItemIndex].id);
				Get_Url_Params(KX_RepasteIndex, "fuid", &szFuid);	
				Set_Url_Params(KX_RepasteDetail, "fuid", szFuid);	
				Set_Url_Params(KX_RepasteDetail, "flag", "1");
				KaiXinAPICommon_Download(KX_RepasteDetail, this->GetWindowHwndId());	
			}
			bHandled = TRUE;
			free(szFuid);
		}						
	}

	return bHandled;
}
