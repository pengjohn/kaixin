/*!
* \file	 KaiXinApp_Repaste_Vote.cpp
* \author	 huxianxiang@GoZone
* \date	 2010-10-6
* \brief  解析与UI: 转贴的评论投票
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"


#if(LCD_SIZE == LCD_HVGA )
#define KAIXIN_REPASTE_VOTE_TAG_MAX_WIDTH	(90)
#define KAIXIN_REPASTE_VOTE_TAG_HEIGHT		(24)
#define REPASTE_TAG_OFFSETX	(2)
#define REPASTE_TAG_OFFSETY	(2)
#elif(LCD_SIZE == LCD_WVGA )
#define KAIXIN_REPASTE_VOTE_TAG_MAX_WIDTH	(160)
#define KAIXIN_REPASTE_VOTE_TAG_HEIGHT		(30)
#define REPASTE_TAG_OFFSETX	(3)
#define REPASTE_TAG_OFFSETY	(3)
#endif



//:TODO:
/*标签颜色表*/
static ColorRefType Repaste_tag_Clolor[KAIXIN_REPASTE_VOTE_TAG_MAX_NUM] =
{
	RGB(231, 85, 85),
	RGB(213, 81, 81),
	RGB(195, 78, 78),
	RGB(177, 74, 74),
	RGB(159, 71, 71),
	RGB(141, 68, 68),
	RGB(123, 65, 65),
	RGB(118, 118, 118),
	RGB(132, 132, 132),
	RGB(145, 145, 145),
	RGB(159, 159, 159),
	RGB(172, 172, 172),
	RGB(187, 187, 187),
	RGB(200, 200, 200),
	RGB(200, 200, 200),
};

void* KaiXinAPI_PostVote_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponsePostVote*  Response = new tResponsePostVote;
	memset(Response, 0 , sizeof(tResponsePostVote));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "repaste");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_repaste = nSize1;
			if( nSize1 != 0 )
			{
				Response->repaste = NULL;
				Response->repaste = (PostVote_repaste*) malloc(sizeof( PostVote_repaste ) * nSize1 );
				memset(Response->repaste, 0 , sizeof(PostVote_repaste) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "ret");
				if(pTemp1)
				{
					Response->repaste[i].ret = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "uid");
				if(pTemp1)
				{
					Response->repaste[i].uid = pTemp1->valueint;
				}
			}
		}
	}
	else
	{
		pTemp0 = cJSON_GetObjectItem(json, "errno");
		if(pTemp0)
		{
			Response->ErrorNo = pTemp0->valueint;
		}

		pTemp0 = cJSON_GetObjectItem(json, "error");
		if(pTemp0)
		{
			STRCPY_Ex(Response->ErrorInfo, pTemp0->valuestring);
		}
	}
	cJSON_Delete(json);
	return Response;
}

// 构造函数
TRepaste_VoteForm::TRepaste_VoteForm(TApplication* pApp):TWindow(pApp)
{
	VoteType = KX_REPASTE_VOTE_TYPE_LIST;
	nAPIHandle = KX_RefreshVote;
	Create(APP_KA_ID_Repaste_Vote_Form);
}

TRepaste_VoteForm::TRepaste_VoteForm(TApplication* pApp, RepasteVoteType nType, Boolean bNew):TWindow(pApp)
{
	VoteType = nType;
	switch(nType)
	{
	case KX_REPASTE_VOTE_TYPE_LIST:
		nAPIHandle = KX_RefreshVote;
		Create(APP_KA_ID_Repaste_Vote_Form);
		if(bNew == TRUE)
			this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
		else
			this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);
		break;

	case KX_REPASTE_VOTE_TYPE_TAG:
		nAPIHandle = KX_RefreshTag;
		Create(APP_KA_ID_Repaste_Vote_tag_Form);
		if(bNew == TRUE)
			this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_DEFAULT, TG3_WINDOW_MOVIE_MODE_DEFAULT);
		else
			this->SetWindowMovieMode(TG3_WINDOW_MOVIE_MODE_NONE, TG3_WINDOW_MOVIE_MODE_DEFAULT);

		break;

	default:
		break;
	}	
}

// 析构函数
TRepaste_VoteForm::~TRepaste_VoteForm(void)
{

}

// 窗口事件处理
Boolean TRepaste_VoteForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-68, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PostRepastesVote:
				{
					int iRet = eFailed;
					tResponsePostVote* Response = NULL;
					TUChar pszInfo[128] = {0};
					iRet = KaiXinAPI_JsonParse(KX_PostRepastesVote, (void **)&Response);
					if(Response->ret == 1)
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Post_OK),TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_OK);
						Set_Url_Params(nAPIHandle, "flag", "0");
						KaiXinAPICommon_Download(nAPIHandle, this->GetWindowHwndId());
					}
					else
					{
						TUString::StrUtf8ToStrUnicode(pszInfo, (const Char *)Response->ErrorInfo);
						pApp->MessageBox(pszInfo,TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_OK);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;
			case KX_PostTag:
				{
					int iRet = eFailed;
					tResponsePostVote* Response = NULL;
					TUChar pszInfo[128] = {0};
					iRet = KaiXinAPI_JsonParse(KX_PostTag, (void **)&Response);
					if(Response->ret == 1)
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Post_OK),TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_OK);
						Set_Url_Params(nAPIHandle, "flag", "0");
						KaiXinAPICommon_Download(nAPIHandle, this->GetWindowHwndId());
					}
					else
					{
						TUString::StrUtf8ToStrUnicode(pszInfo, (const Char *)Response->ErrorInfo);
						pApp->MessageBox(pszInfo,TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_OK);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;					
			default:
				break;
			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == NewTagEdit)
			{
				int iRet = eFailed;
				tResponseRepasteDetail* Response = NULL;

				iRet = KaiXinAPI_JsonParse(nAPIHandle, (void **)&Response);
				if(iRet == 1)
				{
					Set_Url_Params(KX_PostTag, "urpid", Response->urpid);
					Set_Url_Params(KX_PostTag, "suid", Response->suid);
					Set_Url_Params(KX_PostTag, "tagid", (char*)"");//发表新的标签，tagid  置空
					Set_Url_Params(KX_PostTag, "tag", (char*)notifyData.PostMsgData.newTagdata.pszTag);
					Int32 nMsgRet = 0;
					nMsgRet =  pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Notify),TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_YESNOCANCEL);
					if(nMsgRet == 0)
					{
						Set_Url_Params(KX_PostTag, "repflag", "1");
						KaiXinAPICommon_Download(KX_PostTag, this->GetWindowHwndId());
					}
					else if(nMsgRet == 1)
					{
						Set_Url_Params(KX_PostTag, "repflag", "0");
						KaiXinAPICommon_Download(KX_PostTag, this->GetWindowHwndId());
					}
					
				}
				if( Response )
				{
					delete Response;
				}
			}	
			bHandled = TRUE;
		}
		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TRepaste_VoteForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	Int32 iRet = eFailed;

	m_BackBtn = SetAppBackButton(this);	
	SetAppTilte(this,APP_KA_ID_STRING_RepasteVote);

	for(int i=0;i<KAIXIN_REPASTE_VOTE_TAG_MAX_NUM;i++)
	{
		pTagCtrl[i] = NULL;
		nTagCtrlID[i] = 0;
		nTagID[i] = 0;
	}

	nTagCount = 0;

	switch(VoteType)
	{
	case KX_REPASTE_VOTE_TYPE_LIST:
		iRet = _InitVoteForm(pApp);
		break;

	case KX_REPASTE_VOTE_TYPE_TAG:
		//nNewTagBtn = SetAppWriteButton(this);//没有发表新标签API了
		iRet = _InitTagForm(pApp);
		break;

	default:
		break;
	}

	if( iRet == eSucceed )
	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}	
}

Boolean TRepaste_VoteForm::TRepaste_APIInit(TApplication* pApp)
{

	return TRUE;
}

Int32 TRepaste_VoteForm::_InitVoteForm(TApplication * pApp)
{
	Int32 iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	tResponseRepasteDetail* Response = NULL;

	iRet = KaiXinAPI_JsonParse(nAPIHandle, (void **)&Response);

	if(iRet == 1)
	{
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_Repaste_Vote_Form_Repaste_Vote_CoolBarList));
		if (pCoolBarList)
		{
			TBarListItem* lpItem = NULL;

			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate(); 

				//add Item
				if(lpRow)
				{
					//:TODO:Add Subject info
					TUChar MsgInfo[32];
					lpRow->SetCaptionFont(miniFont);
					TUString::StrPrintF(MsgInfo, TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Count),Response->nSize_repasters);
					lpRow->SetCaption(MsgInfo);					

					for(int i=0; i < Response->nSize_answerlist; i++)
					{
						TFont objFontType;
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;
						TUChar pszInfo[32] = {0};
						TUChar pszVoteNum[16] = {0};

						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);                       
							lpItem->SetIndicatorType(itNone);
							ItemHeight = rect.Y() - Rc_CoolBarList.Y() + 10;

							TUString::StrUtf8ToStrUnicode(pszInfo, (const Char *)Response->answerlist[i].answer);
							Int32 nAnswerId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pAnswer = static_cast<TLabel*>(GetControlPtr(nAnswerId));
							TRectangle Rc_Answer(10, ItemHeight, SCR_W - 40, 20);
							pAnswer->SetBounds(&Rc_Answer);
							objFontType = pAnswer->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pAnswer->SetFont(objFontType); 
							pAnswer->SetCaption(pszInfo,FALSE);
							pAnswer->SetTransparent(TRUE);
							pAnswer->SetEnabled(FALSE);
							ItemHeight = ItemHeight + 22;

							Int32 nProgressId = lpItem->AddCtrl(CTL_CLASS_PROGRESSBAR, 20, 5);
							TProgressBar* pProgress = static_cast<TProgressBar*>(GetControlPtr(nProgressId));
							TRectangle Rc_Progress(10, ItemHeight, (SCR_W*3)/4, 10);
							pProgress->SetBounds(&Rc_Progress);
							pProgress->SetSmooth(TRUE, TRUE);
							pProgress->SetTransparent(TRUE);
							pProgress->SetEnabled(FALSE);
							pProgress->SetParams((const Int32)Response->answerlist[i].votepercent, 0, 100, TRUE);

							TUString::StrUtf8ToStrUnicode(pszVoteNum, (const Char *)Response->answerlist[i].votenum);
							TUString::StrPrintF(MsgInfo, TUSTR_Kx_Progress_Percent,pszVoteNum,Response->answerlist[i].votepercent);
							Int32 nPercentId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pPercent = static_cast<TLabel*>(GetControlPtr(nPercentId));
							TRectangle Rc_Percent((SCR_W*3)/4 + 20, ItemHeight - 3, 100, 20);
							pPercent->SetBounds(&Rc_Percent);
							objFontType = pPercent->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pPercent->SetFont(objFontType);
							pPercent->SetTransparent(TRUE);
							pPercent->SetEnabled(FALSE);
							pPercent->SetCaption(MsgInfo,FALSE);

							ItemHeight = ItemHeight + 10;
							lpItem->SetHeight(55);
						}
					}
				}

				//好友观点
				lpRowList->BeginUpdate();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate();
				//add Item
				if(lpRow)
				{
					TUChar MsgInfo[32]={0};
					lpRow->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_FriendAnswer));
					lpRow->SetCaptionFont(miniFont);

					for(int i=0; i < Response->nSize_resultlist; i++)
					{
						TFont objFontType;
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;
						TUChar pszName[32] = {0};
						TUChar pszAnswer[32] = {0};

						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);                       
							lpItem->SetIndicatorType(itNone);
							ItemHeight = rect.Y() - Rc_CoolBarList.Y() + 10;

							TUString::StrUtf8ToStrUnicode(pszName, (const Char *)Response->resultlist[i].fname);
							Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
							TRectangle Rc_Name(10, ItemHeight, TUString::StrLen(pszName)*FONT_OTHER_INFO, 15);
							pName->SetBounds(&Rc_Name);
							objFontType = pName->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pName->SetFont(objFontType);
							pName->SetColor(CTL_COLOR_TYPE_FORE,BLUE);
							pName->SetCaption(pszName,FALSE);

							TUString::StrUtf8ToStrUnicode(pszAnswer, (const Char *)Response->resultlist[i].answer);
							TUString::StrPrintF(MsgInfo, TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Answer_Info),pszAnswer);
							Int32 nAnswerId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pAnswer = static_cast<TLabel*>(GetControlPtr(nAnswerId));
							TRectangle Rc_Answer(10 + TUString::StrLen(pszName)* FONT_OTHER_INFO, ItemHeight, SCR_W - 40 - TUString::StrLen(pszName)*FONT_OTHER_INFO, 15);
							pAnswer->SetBounds(&Rc_Answer);
							objFontType = pAnswer->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pAnswer->SetFont(objFontType);
							pAnswer->SetTransparent(TRUE);
							pAnswer->SetEnabled(FALSE);
							pAnswer->SetCaption(MsgInfo,FALSE);

							lpItem->SetHeight(COOLBAR_LIST_HEIGHT);
						}
					}
				}

			}
		}
	}

	if( Response )
	{
		delete Response;	
	}
	return iRet;
}

Int32 TRepaste_VoteForm::_InitTagForm(TApplication * pApp)
{
	Int32 iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	tResponseRepasteDetail* Response = NULL;

	iRet = KaiXinAPI_JsonParse(nAPIHandle, (void **)&Response);

	if(iRet == 1)
	{
		TUChar MsgInfo[32] = {0};
		TLabel* m_label = NULL;
		int tagheight = 0;
		Int32 VoteCount = 0;
		TUChar TUCharVoteCount[32];
		TUString::StrUtf8ToStrUnicode(TUCharVoteCount,(const Char *)Response->rpnum);
		VoteCount = TUString::StrAToI(TUCharVoteCount);
		TUString::StrPrintF(MsgInfo, TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Count),VoteCount);

		TPanel* pVotePanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_Repaste_Vote_tag_Form_Repaste_Vote_tag_Panel));
		m_label = new TLabel;		
		if(m_label->Create(pVotePanel))
		{
			TFont objFontType;
			TRectangle obLabelRec(20,10,200,30);			
			m_label->SetBounds(&obLabelRec);
			m_label->SetAutoSize(TRUE);
			m_label->SetEnabled(FALSE);
			objFontType = m_label->GetFont();
			objFontType.Create(FONT_NAME, FONT_NAME);
			m_label->SetFont(objFontType);
			m_label->SetCaption(MsgInfo,FALSE);	
			m_label->Show(TRUE);
			tagheight = tagheight + 40;
		}

		int tag_x = 15;
		int tag_y = 0;
		int tag_w = KAIXIN_REPASTE_VOTE_TAG_MAX_WIDTH;
		int i = 0;
		for(i=0; i < Response->nSize_taglist && i < KAIXIN_REPASTE_VOTE_TAG_MAX_NUM; i++)
		{
			//show tag
			TRichView* m_Tag = NULL;
			tag_y = tagheight;
			tag_w = KAIXIN_REPASTE_VOTE_TAG_MAX_WIDTH;
			TRectangle Rc_Tag(tag_x,tag_y,tag_w,KAIXIN_REPASTE_VOTE_TAG_HEIGHT);
			m_Tag = new TRichView;
			if(m_Tag->Create(pVotePanel))
			{
				TFont objFontType;
				Int32 nLen = 0;
				//		Coord nW = 0;
				//Int32 nLineCount = 0;
				TUChar pszTag[128+1] = {0};
				pTagCtrl[i] = (TCtrl*)m_Tag;
				nTagCtrlID[i] = m_Tag->GetId();
				nTagID[i] = Response->taglist[i].id;
				//m_Tag->SetBounds(&Rc_Tag);
				objFontType = m_Tag->GetFont();
				objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
				m_Tag->SetFont(objFontType);
				m_Tag->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_WHITE);
				
				TUString::StrUtf8ToStrUnicode(pszTag, (const Char *)Response->taglist[i].name);
				//m_Tag->SetCaption(pszTag,FALSE);
				//tag_w = objFontType.CharsWidth(pszTag,TUString::StrLen(pszTag));

				tag_w = GetShowAllStringWidth(pszTag, objFontType);
					
				//nLineCount = m_Tag->GetLinesCount();
				//m_Tag->SetMaxVisibleLines(1, TRUE);

				tag_w += 30;
				Rc_Tag.SetWidth(tag_w);

				//如果超出范围,则换行
				if( tag_x + tag_w > (SCR_W - 20) )
				{
					tag_x = 15;
					tagheight = tagheight + KAIXIN_REPASTE_VOTE_TAG_HEIGHT + REPASTE_TAG_OFFSETY;
					tag_y = tagheight;
					Rc_Tag.SetX(tag_x);
					Rc_Tag.SetY(tag_y);
				}
					
				m_Tag->SetBounds(&Rc_Tag);
				m_Tag->SetCaption(pszTag, FALSE);
				//m_Tag->SetBorderStyle(bsSingle, TRUE);
				//m_Tag->SetFrameWidth(1);
				m_Tag->SetEnabled(TRUE);
				m_Tag->SetColor(CTL_COLOR_TYPE_BACK, Repaste_tag_Clolor[i]);
				m_Tag->SetColor(CTL_COLOR_TYPE_SELECTED_BACK, Repaste_tag_Clolor[i]);
				m_Tag->SetColor(CTL_COLOR_TYPE_FOCUS_BACK, Repaste_tag_Clolor[i]);
				m_Tag->SetWordWrapAttr(FALSE);
				m_Tag->SetScrollBarMode(CTL_SCL_MODE_NONE);
				m_Tag->Show(TRUE);
				nTagCount++;
				tag_x = tag_x + tag_w + REPASTE_TAG_OFFSETX;

			}
		}

		tagheight = tagheight + KAIXIN_REPASTE_VOTE_TAG_HEIGHT + 5;

		//Show Friend tag
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_Repaste_Vote_tag_Form_Repaste_Vote_tag_CoolBarList));
		if (pCoolBarList)
		{
			TBarListItem* lpItem = NULL;

			TRectangle obBarListRec(10,tagheight,SCR_W-10*2,46);
			pCoolBarList->SetBounds(&obBarListRec);
			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				//好友观点
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate();
				//add Item
				if(lpRow)
				{
					TUChar MsgInfo[32]={0};
					lpRow->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_FriendAnswer));
					lpRow->SetCaptionFont(miniFont);

					for(int i=0; i < Response->nSize_resultlist; i++)
					{
						TFont objFontType;
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;
						TUChar pszName[32] = {0};
						TUChar pszAnswer[32] = {0};

						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);                       
							lpItem->SetIndicatorType(itNone);
							lpItem->SetEnabled(FALSE);
							
							ItemHeight = rect.Y() - Rc_CoolBarList.Y() + 10;

							TUString::StrUtf8ToStrUnicode(pszName, (const Char *)Response->resultlist[i].fname);
							Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
							TRectangle Rc_Name(10, ItemHeight, TUString::StrLen(pszName)*FONT_OTHER_INFO, 15);
							pName->SetBounds(&Rc_Name);
							objFontType = pName->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pName->SetFont(objFontType);
							pName->SetColor(CTL_COLOR_TYPE_FORE,BLUE);
							pName->SetCaption(pszName,FALSE);

							TUString::StrUtf8ToStrUnicode(pszAnswer, (const Char *)Response->resultlist[i].answer);
							TUString::StrPrintF(MsgInfo, TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Answer_Info),pszAnswer);
							Int32 nAnswerId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pAnswer = static_cast<TLabel*>(GetControlPtr(nAnswerId));
							TRectangle Rc_Answer(10 + TUString::StrLen(pszName)*FONT_OTHER_INFO, ItemHeight, SCR_W - 40 - TUString::StrLen(pszName)*FONT_OTHER_INFO, 15);
							pAnswer->SetBounds(&Rc_Answer);
							objFontType = pAnswer->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pAnswer->SetFont(objFontType);
							pAnswer->SetTransparent(TRUE);
							pAnswer->SetEnabled(FALSE);
							pAnswer->SetCaption(MsgInfo,FALSE);

							lpItem->SetHeight(COOLBAR_LIST_HEIGHT);
						}
					}
				}

			}
		}
	}

	if( Response )
	{
		delete Response;	
	}
	return iRet;
}

// 关闭窗口时，保存设置信息
Boolean TRepaste_VoteForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TRepaste_VoteForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	/*发表新标签*/
	if( pEvent->sParam1 == nNewTagBtn )
	{
		PostNotifyMsgDataType in_msgData;
		MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
		in_msgData.nCtrlId = 0;
		in_msgData.nHwndId = this->GetWindowHwndId();
		in_msgData.nEditType = NewTagEdit;
		TAppEditForm *pNewtag = new TAppEditForm( pApp, in_msgData);
		bHandled = TRUE;
		return bHandled;
	}

	switch(pEvent->sParam1)
	{
		/*转帖互动*/
	case APP_KA_ID_Repaste_Vote_Form_Repaste_Vote_CoolBarList:
		{ 
			TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
			switch( pRow->GetIndex() ) 
			{ 
			case 0: //投票互动
				{
					int iRet = eFailed;
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int VoteIndex = pItem->GetIndex()+1;

					tResponseRepasteDetail* Response = NULL;
					iRet = KaiXinAPI_JsonParse(nAPIHandle, (void **)&Response);
					if(iRet == 1)
					{
						TUChar pszAnswernum[32]={0};
						Char pAnswernum[32]={0};

						TUString::StrIToH( pszAnswernum, VoteIndex);
						TUString::StrUnicodeToStrUtf8( pAnswernum, pszAnswernum);

						Set_Url_Params(KX_PostRepastesVote, "urpid", Response->urpid);
						Set_Url_Params(KX_PostRepastesVote, "voteuid", Response->voteuid);
						Set_Url_Params(KX_PostRepastesVote, "suid", Response->suid);
						Set_Url_Params(KX_PostRepastesVote, "surpid", Response->surpid);
						Set_Url_Params(KX_PostRepastesVote, "answernum", (char*)pAnswernum);

						Int32 nMsgRet = 0;
						nMsgRet =  pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Notify),TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_YESNOCANCEL);
						if(nMsgRet == 0)
						{
							Set_Url_Params(KX_PostRepastesVote, "repflag", "1");
							KaiXinAPICommon_Download(KX_PostRepastesVote, this->GetWindowHwndId());
						}
						else if(nMsgRet == 1)
						{
							Set_Url_Params(KX_PostRepastesVote, "repflag", "0");
							KaiXinAPICommon_Download(KX_PostRepastesVote, this->GetWindowHwndId());
						}
					}
					if( Response )
					{
						delete Response;	
					}
					bHandled = TRUE;
				} 
				break;

			case 1://好友观点
				{
					int iRet = eFailed;
					TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
					int ResultIndex = pItem->GetIndex();

					tResponseRepasteDetail* Response = NULL;
					iRet = KaiXinAPI_JsonParse(nAPIHandle, (void **)&Response);
					if(iRet == 1)
					{
						//:TODO:点击好友的名字
						//Response->resultlist[ResultIndex].uid

					}
					if( Response )
					{
						delete Response;	
					}
					bHandled = TRUE;
				}
				break;

			default:
				break;
			} 
			bHandled = TRUE; 
		} 
		break;

	default:
		{
			if( VoteType == KX_REPASTE_VOTE_TYPE_TAG )
			{
				for(int i=0;i<nTagCount;i++)
				{
					if(nTagCtrlID[i] == pEvent->sParam1)
					{
						int iRet = eFailed; 

						tResponseRepasteDetail* Response = NULL;
						iRet = KaiXinAPI_JsonParse(nAPIHandle, (void **)&Response);
						if(iRet == 1)
						{
							TUChar pszAnswernum[32]={0};
							Char pAnswernum[32]={0};

							TUString::StrIToA( pszAnswernum, Response->taglist[i].id);
							TUString::StrUnicodeToStrUtf8( pAnswernum, pszAnswernum);

							Set_Url_Params(KX_PostTag, "urpid", Response->surpid);
							Set_Url_Params(KX_PostTag, "suid", Response->suid);
							Set_Url_Params(KX_PostTag, "tagid", (char*)pAnswernum);
							Set_Url_Params(KX_PostTag, "tag", "");

							Int32 nMsgRet = 0;
							nMsgRet =  pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Notify),TResource::LoadConstString(APP_KA_ID_STRING_Repaste),WMB_YESNOCANCEL);
							if(nMsgRet == 0)
							{
								Set_Url_Params(KX_PostTag, "repflag", "1");
								KaiXinAPICommon_Download(KX_PostTag, this->GetWindowHwndId());
							}
							else if(nMsgRet == 1)
							{
								Set_Url_Params(KX_PostTag, "repflag", "0");
								KaiXinAPICommon_Download(KX_PostTag, this->GetWindowHwndId());
							}
						}
						if( Response )
						{
							delete Response;	
						}
						bHandled = TRUE;
					}
				} 
			}
		}
		break;
	}

	return bHandled;
}
