/*!
* \file	 KaiXinApp_SystemMessages.cpp
* \author	 huxianxiang@GoZone
* \date	 2010-9-27
* \brief  解析与UI: 系统信息
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#define KX_SYSMSGS_ITEM_WIDGET_SPACE	(5)
#define KX_SYSMSGS_ITEM_LINE_SPACE		(2)

#define KX_SYSMSGS_ITEM_ICON_X			(10)
#define KX_SYSMSGS_ITEM_ICON_Y			(5)
#define KX_SYSMSGS_ITEM_ICON_W			(15)
#define KX_SYSMSGS_ITEM_ICON_H			(16)

#define KX_SYSMSGS_ITEM_TITLE_X			(KX_SYSMSGS_ITEM_ICON_X + KX_SYSMSGS_ITEM_ICON_W + KX_SYSMSGS_ITEM_WIDGET_SPACE)
#define KX_SYSMSGS_ITEM_TITLE_Y			(KX_SYSMSGS_ITEM_ICON_Y)
#define KX_SYSMSGS_ITEM_TITLE_W			(SCR_W/6)
#define KX_SYSMSGS_ITEM_TITLE_H			(FONT_MENU_ITEM)

#define KX_SYSMSGS_ITEM_TIME_X			(180)
#define KX_SYSMSGS_ITEM_TIME_Y			(KX_SYSMSGS_ITEM_ICON_Y)
#define KX_SYSMSGS_ITEM_TIME_W			(SCR_W/6)
#define KX_SYSMSGS_ITEM_TIME_H			(FONT_CONTENT_DETAIL)

#define KX_SYSMSGS_ITEM_LOGO_X			(KX_SYSMSGS_ITEM_ICON_X)
#define KX_SYSMSGS_ITEM_LOGO_Y			(KX_SYSMSGS_ITEM_ICON_Y + KX_SYSMSGS_ITEM_ICON_H + KX_SYSMSGS_ITEM_WIDGET_SPACE )
#define KX_SYSMSGS_ITEM_LOGO_W			(50)
#define KX_SYSMSGS_ITEM_LOGO_H			(50)

#define KX_SYSMSGS_ITEM_CONTENT_X		(KX_SYSMSGS_ITEM_ICON_X)
#define KX_SYSMSGS_ITEM_CONTENT_Y		(KX_SYSMSGS_ITEM_LOGO_Y)
#define KX_SYSMSGS_ITEM_CONTENT_W		(SCR_W - 40)
#define KX_SYSMSGS_ITEM_CONTENT_H		(40)

#define KX_SYSMSGS_ITEM_ACTIONS_X		(100)
#define KX_SYSMSGS_ITEM_ACTIONS_Y		(KX_SYSMSGS_ITEM_CONTENT_Y + KX_SYSMSGS_ITEM_CONTENT_H + KX_SYSMSGS_ITEM_WIDGET_SPACE )
#define KX_SYSMSGS_ITEM_ACTIONS_W		(SCR_W/4)
#define KX_SYSMSGS_ITEM_ACTIONS_H		(BUTTON_H)

#define KX_SYSMSGS_ITEM_RESULT_X		(KX_SYSMSGS_ITEM_ICON_X)
#define KX_SYSMSGS_ITEM_RESULT_Y		(KX_SYSMSGS_ITEM_LOGO_Y + KX_SYSMSGS_ITEM_LOGO_H + KX_SYSMSGS_ITEM_WIDGET_SPACE )
#define KX_SYSMSGS_ITEM_RESULT_W		(SCR_W - 40)
#define KX_SYSMSGS_ITEM_RESULT_H		(30)

#define KX_SYSMSGS_ITEM_DEFAULT_H		(100)
#define KX_SYSMSGS_FONT_SIZE_TITLE		(12)
#define KX_SYSMSGS_FONT_SIZE_TIME		(12)
#define KX_SYSMSGS_FONT_SIZE_CONTENT	(12)
#define KX_SYSMSGS_FONT_SIZE_ACTION		(12)
#define KX_SYSMSGS_FONT_SIZE_RESULT		(12)

void* KaiXinAPI_FriendRequest_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp;
	tResponseFriendRequest*  Response = new tResponseFriendRequest;
	memset(Response, 0 , sizeof(tResponseFriendRequest));

	json = cJSON_Parse(text);

	pTemp = cJSON_GetObjectItem(json,"ret");
	if (pTemp)
	{
		Response->ret = pTemp->valueint;	
	}

	if(Response->ret == 1)
	{
		pTemp = cJSON_GetObjectItem(json, "uid");
		if(pTemp)
		{
			Response->uid = pTemp->valueint;
		}
	}
	else
	{
		//
	}
	cJSON_Delete(json);
	return Response;
}

void* KaiXinAPI_SystemMessages_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseSystemMessages*  Response = new tResponseSystemMessages;
	memset(Response, 0 , sizeof(tResponseSystemMessages));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "n");
		if(pTemp0)
		{
			Response->nNum = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "more");
		if(pTemp0)
		{
			Response->More = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "sysmsgs");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_Sysmsgs = nSize1;
			if( nSize1 != 0 )
			{
				Response->Sysmsgs = NULL;
				Response->Sysmsgs = (SystemMessages_Sysmsgs*) malloc(sizeof( SystemMessages_Sysmsgs ) * nSize1 );
				memset(Response->Sysmsgs, 0 , sizeof(SystemMessages_Sysmsgs) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					STRCPY_Ex(Response->Sysmsgs[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->Sysmsgs[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "appid");
				if(pTemp1)
				{
					Response->Sysmsgs[i].appid = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "real_name");
				if(pTemp1)
				{
					STRCPY_Ex(Response->Sysmsgs[i].real_name, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "msgtype");
				if(pTemp1)
				{
					STRCPY_Ex(Response->Sysmsgs[i].msgtype, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "content");
				if(pTemp1)
				{
					STRCPY_Ex(Response->Sysmsgs[i].content, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "smid");
				if(pTemp1)
				{
					STRCPY_Ex(Response->Sysmsgs[i].smid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "action");
				if(pTemp1)
				{
					Response->Sysmsgs[i].actions = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "result");
				if(pTemp1)
				{
					Response->Sysmsgs[i].result = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					Response->Sysmsgs[i].ctime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "strctime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->Sysmsgs[i].strctime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "id");
				if(pTemp1)
				{
					Response->Sysmsgs[i].id = pTemp1->valueint;
				}

			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TSystemMessagesForm::TSystemMessagesForm(TApplication* pApp):TWindow(pApp)
{
	for(int i=0; i<KX_SYSMSGS_ITEM_COUNT_MAX; i++)
	{
		pBmp[i] = NULL;	
		pLogo[i] = NULL;
		pLogoID[i] = 0;
		ActionButID1[i] = 0;
		ActionButID2[i] = 0;
		ResultID[i] = 0;
		pType[i] = 0;
	}
	memset(pUid, 0 , sizeof(pUid));
	memset(Smid, 0 , sizeof(Smid));
	memset(pActionURL, 0 , sizeof(pActionURL));
	if(KaiXinUserInfo.NoticeCount[NOTICE_TYPE_SYS_MESSAGE] > 0)
		bNeedRefresh = TRUE;
	else
		bNeedRefresh = FALSE;
	Create(APP_KA_ID_CommonCoolBarListForm);
}

// 析构函数
TSystemMessagesForm::~TSystemMessagesForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<KX_SYSMSGS_ITEM_COUNT_MAX; i++)
	{
		if( pBmp[i] != NULL)
		{
			pBmp[i]->Destroy();
			pBmp[i] = NULL; 								
		}
	}

	//返回刷新消息中心
	if(bNeedRefresh)
	{
		KaiXinAPICommon_Download(KX_MessageCenter, 0);
	}
}

// 窗口事件处理
Boolean TSystemMessagesForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			this->GetBounds(&rcBack);

			dc.SetBackColor(RGB_COLOR_WHITE);
			dc.EraseRectangle(&rc, 0);
			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W, GUI_API_STYLE_ALIGNMENT_LEFT);

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
		}
		break;
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					if( pBmp[notifyData.nParam] != NULL)
					{
						pBmp[notifyData.nParam]->Destroy();
						pBmp[notifyData.nParam] = NULL; 								
					}
					pBmp[notifyData.nParam] = LoadImgByPath(notifyData.pszFilePath);

					if(pBmp[notifyData.nParam])
					{
						Int32 nIndex =0;
						nIndex = notifyData.nParam;
						if(nIndex < ItemCount)
						{
							TImage* pImage = static_cast<TImage*>(GetControlPtr(pLogoID[nIndex]));
							if(pImage)
							{
								pImage->SetBitmap(pBmp[notifyData.nParam]);
							}
						}	
					}
				}
				break;
			case KX_SendBirthdayGift:
				{
					int iRet = eFailed;
					tResponseSendBirthdayGift* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_SendBirthdayGift, (void **)&Response);
					if(Response->ret == 1)
					{
						TButton* pActionBtn2 = static_cast<TButton*>(GetControlPtr(ActionButID2[nActionIndex]));
						TRichView* pResult = static_cast<TRichView*>(GetControlPtr(ResultID[nActionIndex]));
						pActionBtn2->Hide(TRUE);
						pResult->Show(TRUE);
					}
					else
					{
						TUChar pszError[128] = {0};
						TButton* pActionBtn2 = static_cast<TButton*>(GetControlPtr(ActionButID2[nActionIndex]));
						TRichView* pResult = static_cast<TRichView*>(GetControlPtr(ResultID[nActionIndex]));
						TUString::StrUtf8ToStrUnicode(pszError, (const Char*)Response->ErrorInfo);
						if(TUString::StrLen(pszError) >0 )
						{
							pResult->SetCaption(pszError,FALSE);
						}
						pActionBtn2->Hide(TRUE);
						pResult->Show(TRUE);
					}
					if( Response )
					{
						delete Response;	
					}
				}
				break;

			case KX_AcceptFriendRequest:
				{
					int iRet = eFailed;
					tResponseFriendRequest* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_AcceptFriendRequest, (void **)&Response);
					if(iRet == 1)
					{
						TButton* pActionBtn1 = static_cast<TButton*>(GetControlPtr(ActionButID1[nActionIndex]));
						TButton* pActionBtn2 = static_cast<TButton*>(GetControlPtr(ActionButID2[nActionIndex]));
						TRichView* pResult = static_cast<TRichView*>(GetControlPtr(ResultID[nActionIndex]));
						pActionBtn1->Hide(TRUE);
						pActionBtn2->Hide(TRUE);
						pResult->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Accept_OK),FALSE);
						pResult->Show(TRUE);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;

			case KX_RefuseFriendRequest:
				{
					int iRet = eFailed;
					tResponseSendBirthdayGift* Response = NULL;
					iRet = KaiXinAPI_JsonParse(KX_RefuseFriendRequest, (void **)&Response);
					if(Response->ret == 1)
					{
						TButton* pActionBtn1 = static_cast<TButton*>(GetControlPtr(ActionButID1[nActionIndex]));
						TButton* pActionBtn2 = static_cast<TButton*>(GetControlPtr(ActionButID2[nActionIndex]));
						TRichView* pResult = static_cast<TRichView*>(GetControlPtr(ResultID[nActionIndex]));
						pActionBtn1->Hide(TRUE);
						pActionBtn2->Hide(TRUE);
						pResult->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Refuse_OK),FALSE);
						pResult->Show(TRUE);
					}

					if( Response )
					{
						delete Response;	
					}
				}
				break;

			default:
				break;
			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			break;
		}
		break;	
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TSystemMessagesForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	tResponseSystemMessages* Response = NULL;


	m_BackBtn = SetAppBackButton(this);
	SetAppTilte(this,APP_KA_ID_STRING_SystemMessage);//系统消息

	iRet = KaiXinAPI_JsonParse(KX_SystemMessage, (void **)&Response);
	if(iRet == 1)
	{
		ItemCount = 0;
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_CommonCoolBarListForm_CommonCoolBarList));
		if (pCoolBarList)
		{
			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate(); 
			}
		}

		while( nIndex < Response->nSize_Sysmsgs)
		{
			//add Item
			TBarListItem* lpItem = NULL;
			if(lpRow)
			{
				lpItem = lpRow->AppendItem();
				if (lpItem)  
				{
					TFont objFontType;
					TUChar pszMsgType[32] = {0};
					TUChar pszContent[256] = {0};
					TUChar* pszTemp = NULL;
					TUChar* pszDateTime = NULL;
					TUChar* pszMsgTypeTemp = NULL;
					Int32 ItemHeight = 0;

					TRectangle rect;
					lpItem->GetBounds(rect);
					lpItem->SetCaption(NULL);                       
					lpItem->SetIndicatorType(itNone);

					STRCPY_Ex(pUid[nIndex], Response->Sysmsgs[nIndex].fuid);
					STRCPY_Ex(Smid[nIndex], Response->Sysmsgs[nIndex].smid);

					Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
					TImage* pImage = static_cast<TImage*>(GetControlPtr(nIconId));
					TRectangle Rc_Icon(KX_SYSMSGS_ITEM_ICON_X, rect.Y() - Rc_CoolBarList.Y() + KX_SYSMSGS_ITEM_ICON_Y, KX_SYSMSGS_ITEM_ICON_W, KX_SYSMSGS_ITEM_ICON_H);
					pImage->SetBounds(&Rc_Icon);
					pImage->SetBitmapByResId(APP_KA_ID_BITMAP_Default_StstemMsgs_Icon);

					TUString::StrUtf8ToStrUnicode(pszMsgType , (const Char *)Response->Sysmsgs[nIndex].msgtype);
					Int32 nLabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
					TLabel* pLabel = static_cast<TLabel*>(GetControlPtr(nLabelId));
					TRectangle Rc_Label(KX_SYSMSGS_ITEM_TITLE_X, rect.Y() - Rc_CoolBarList.Y() + KX_SYSMSGS_ITEM_TITLE_Y, KX_SYSMSGS_ITEM_TITLE_W, KX_SYSMSGS_ITEM_TITLE_H);
					pLabel->SetBounds(&Rc_Label);
					objFontType = pLabel->GetFont();
					objFontType.Create(FONT_MENU_ITEM, FONT_MENU_ITEM);
					pLabel->SetFont(objFontType); 
					pLabel->SetCaption(pszMsgType,FALSE);

					cUnixTime_ConvertUnixTimeToFormatString(Response->Sysmsgs[nIndex].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
					Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 0, 0);
					TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
					TRectangle Rc_Time(KX_SYSMSGS_ITEM_TIME_X, rect.Y() - Rc_CoolBarList.Y() + KX_SYSMSGS_ITEM_TIME_Y, KX_SYSMSGS_ITEM_TIME_W, KX_SYSMSGS_ITEM_TIME_H);
					pTime->SetBounds(&Rc_Time);
					objFontType = pTime->GetFont();
					objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
					pTime->SetFont(objFontType); 
					pTime->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
					pTime->SetCaption(pszDateTime,FALSE);
					if(pszDateTime) 
					{
						delete[] pszDateTime; 
						pszDateTime = NULL;
					}

					ItemHeight = ItemHeight + KX_SYSMSGS_ITEM_TITLE_Y + KX_SYSMSGS_ITEM_TITLE_H + KX_SYSMSGS_ITEM_WIDGET_SPACE;

					TRectangle Rc_Temp;
					TUChar* pTemp = NULL;

					if( TUString::StrCompare(pszMsgType, TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Type_Fri)) == 0 )
					{
						pType[nIndex] = KX_SYSTEM_MESSAGE_FRIEND;

						Int32 nLogoId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
						TImage* pUserLogo = static_cast<TImage*>(GetControlPtr(nLogoId));
						pLogoID[nIndex] = nLogoId;
						pLogo[nIndex] = pUserLogo;
						TRectangle Rc_Logo(KX_SYSMSGS_ITEM_LOGO_X, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_SYSMSGS_ITEM_LOGO_W, KX_SYSMSGS_ITEM_LOGO_H);
						pUserLogo->SetBounds(&Rc_Logo);
						pUserLogo->SetBitmapByResId(APP_KA_ID_BITMAP_Default);
						KaiXinAPICommon_DownloadPhoto(Response->Sysmsgs[nIndex].flogo, this->GetWindowHwndId(), nIndex );

						TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)Response->Sysmsgs[nIndex].content);
						pszTemp = TUString::StrTrimUnVisible(pszContent);
						Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
						TRectangle Rc_Content(KX_SYSMSGS_ITEM_CONTENT_X + KX_SYSMSGS_ITEM_LOGO_X + KX_SYSMSGS_ITEM_LOGO_W + KX_SYSMSGS_ITEM_WIDGET_SPACE, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_SYSMSGS_ITEM_CONTENT_W - ( KX_SYSMSGS_ITEM_LOGO_X + KX_SYSMSGS_ITEM_LOGO_W + KX_SYSMSGS_ITEM_WIDGET_SPACE ), KX_SYSMSGS_ITEM_CONTENT_H);
						pContent->SetBounds(&Rc_Content);
						objFontType = pContent->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pContent->SetFont(objFontType);
						//pTemp = TUString::StrRChr(pszTemp,(TUChar)L'”');	//pengjohn debug
						if( TUString::StrRChr(pszTemp,(TUChar)0x201C) > TUString::StrRChr(pszTemp,(TUChar)0x201D) )
						{
							pTemp = TUString::StrRChr(pszTemp,(TUChar)0x201C);
						}
						else
						{
							pTemp = TUString::StrRChr(pszTemp,(TUChar)0x201D);
						}
						if( pTemp && TUString::StrLen(pTemp)>2)
						{
							pTemp = pTemp + 2;
							*pTemp = '\0';
						}							
						pContent->SetCaption(pszTemp,FALSE);
						pContent->SetWordWrapAttr(TRUE);
						pContent->SetTransparent(TRUE);
						pContent->SetEnabled(FALSE);
						pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
						pContent->GetBounds(&Rc_Temp);
						Int32 Button_Y = 0;
						if( Rc_Temp.Height()> KX_SYSMSGS_ITEM_LOGO_H )
						{
							ItemHeight = ItemHeight + Rc_Temp.Height() + KX_SYSMSGS_ITEM_WIDGET_SPACE;
							Button_Y = ItemHeight;
						}
						else
						{
							Button_Y = ItemHeight + Rc_Temp.Height() + KX_SYSMSGS_ITEM_WIDGET_SPACE;
							ItemHeight = ItemHeight + KX_SYSMSGS_ITEM_LOGO_H + KX_SYSMSGS_ITEM_WIDGET_SPACE;							
						}

						if( Response->Sysmsgs[nIndex].actions == 0 )
						{
							TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)Response->Sysmsgs[nIndex].content);
							pszTemp = TUString::StrTrimUnVisible(pszContent);
							Int32 nResultId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pResult = static_cast<TRichView*>(GetControlPtr(nResultId));
							TRectangle Rc_Result(KX_SYSMSGS_ITEM_RESULT_X, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_SYSMSGS_ITEM_RESULT_W, KX_SYSMSGS_ITEM_RESULT_H);
							pResult->SetBounds(&Rc_Result);
							pResult->SetBorderStyle(bsSingle, TRUE);
							pResult->SetFrameWidth(1);
							pResult->SetEnabled(FALSE);
							//	pResult->SetColor(CTL_FRAME_COLOR,RGB(255, 186, 67)); 
							pResult->SetColor(CTL_COLOR_TYPE_BACK, RGB(253, 255, 206));
							objFontType = pResult->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pResult->SetFont(objFontType); 

							//pTemp = TUString::StrRChr(pszTemp,(TUChar)L'”');	//pengjohn debug
							if( TUString::StrRChr(pszTemp,(TUChar)0x201C) > TUString::StrRChr(pszTemp,(TUChar)0x201D) )
							{
								pTemp = TUString::StrRChr(pszTemp,(TUChar)0x201C);	//pengjohn debug
							}
							else
							{
								pTemp = TUString::StrRChr(pszTemp,(TUChar)0x201D);	//pengjohn debug
							}

							if( pTemp && TUString::StrLen(pTemp)>2)
							{
								pResult->SetCaption(pTemp+2,FALSE);
							}
							else
							{
								pResult->Hide(TRUE);
							}
							pResult->SetWordWrapAttr(TRUE);
							pResult->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pResult->SetMaxVisibleLines(pResult->GetLinesCount(), TRUE);
							pResult->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + KX_SYSMSGS_ITEM_WIDGET_SPACE;

						}
						else
						{
							Int32 nActionAgreeId = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
							TButton* pActionAgree = static_cast<TButton*>(GetControlPtr(nActionAgreeId));
							TRectangle Rc_ActionAgree(KX_SYSMSGS_ITEM_ACTIONS_X, rect.Y() - Rc_CoolBarList.Y() + Button_Y, KX_SYSMSGS_ITEM_ACTIONS_W, KX_SYSMSGS_ITEM_ACTIONS_H);
							pActionAgree->SetBounds(&Rc_ActionAgree);
							objFontType = pActionAgree->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pActionAgree->SetFont(objFontType);
							pActionAgree->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Agree),FALSE);
							ActionButID1[nIndex] = nActionAgreeId;

							Int32 nActionRejectId = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
							TButton* pActionReject = static_cast<TButton*>(GetControlPtr(nActionRejectId));
							TRectangle Rc_ActionReject(KX_SYSMSGS_ITEM_ACTIONS_X + KX_SYSMSGS_ITEM_ACTIONS_W + 20, rect.Y() - Rc_CoolBarList.Y() + Button_Y, KX_SYSMSGS_ITEM_ACTIONS_W, KX_SYSMSGS_ITEM_ACTIONS_H);
							pActionReject->SetBounds(&Rc_ActionReject);
							objFontType = pActionReject->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pActionReject->SetFont(objFontType);
							pActionReject->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Refuse),FALSE);
							ActionButID2[nIndex] = nActionRejectId;

							pContent->GetBounds(&Rc_Temp);
							if( Rc_Temp.Height() < KX_SYSMSGS_ITEM_LOGO_H )
							{
								Button_Y = Button_Y - Rc_Temp.Height() + KX_SYSMSGS_ITEM_LOGO_H;
							}

							Int32 nActionResultId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pActionResult = static_cast<TRichView*>(GetControlPtr(nActionResultId));
							TRectangle Rc_ActionResult(KX_SYSMSGS_ITEM_RESULT_X, rect.Y() - Rc_CoolBarList.Y() + Button_Y, KX_SYSMSGS_ITEM_RESULT_W, KX_SYSMSGS_ITEM_ACTIONS_H);
							pActionResult->SetBounds(&Rc_ActionResult);
							objFontType = pActionResult->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pActionResult->SetFont(objFontType);						
							pActionResult->SetBorderStyle(bsSingle, TRUE);
							pActionResult->SetFrameWidth(1);
							pActionResult->SetEnabled(FALSE);
							//	pActionResult->SetColor(CTL_FRAME_COLOR,RGB(255, 186, 67)); 
							pActionResult->SetColor(CTL_COLOR_TYPE_BACK, RGB(253, 255, 206));
							pActionResult->SetWordWrapAttr(TRUE);
							pActionResult->SetScrollBarMode(CTL_SCL_MODE_NONE);
							//	pActionResult->SetMaxVisibleLines(pGiftSent->GetLinesCount(), TRUE);
							pActionResult->Hide(TRUE);
							pActionResult->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + KX_SYSMSGS_ITEM_WIDGET_SPACE;

							ResultID[nIndex] = nActionResultId;

						}

					}
					else if( TUString::StrCompare(pszMsgType, TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Type_Birth)) == 0 )
					{
						pType[nIndex] = KX_SYSTEM_MESSAGE_BIRTHDAY;

						TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)Response->Sysmsgs[nIndex].content);
						pszTemp = TUString::StrTrimUnVisible(pszContent);
						Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
						TRectangle Rc_Content(KX_SYSMSGS_ITEM_CONTENT_X, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_SYSMSGS_ITEM_CONTENT_W, KX_SYSMSGS_ITEM_CONTENT_H);
						pContent->SetBounds(&Rc_Content);
						pContent->SetWordWrapAttr(TRUE);
						objFontType = pContent->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pContent->SetFont(objFontType); 
						pContent->SetCaption(pszTemp,FALSE);
						pContent->SetWordWrapAttr(TRUE);
						pContent->SetTransparent(TRUE);
						pContent->SetEnabled(FALSE);
						pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
						pContent->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_SYSMSGS_ITEM_WIDGET_SPACE;

						//:TODO:
						if(TUString::StrStr((const TUChar*)pszTemp, TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_GiftSentHim)) == NULL
							&& TUString::StrStr((const TUChar*)pszTemp, TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_GiftSentShe)) == NULL)
						{
							Int32 nActionGiftId = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
							TButton* pActionGift = static_cast<TButton*>(GetControlPtr(nActionGiftId));
							TRectangle Rc_ActionGift(KX_SYSMSGS_ITEM_ACTIONS_X + KX_SYSMSGS_ITEM_ACTIONS_W + 20, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_SYSMSGS_ITEM_ACTIONS_W, KX_SYSMSGS_ITEM_ACTIONS_H);
							pActionGift->SetBounds(&Rc_ActionGift);
							objFontType = pActionGift->GetFont();
							objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
							pActionGift->SetFont(objFontType);
							pActionGift->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_Gift),FALSE);

							ActionButID2[nIndex] = nActionGiftId;
						}

						Int32 nGiftSentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pGiftSent = static_cast<TRichView*>(GetControlPtr(nGiftSentId));
						TRectangle Rc_GiftSent(KX_SYSMSGS_ITEM_RESULT_X, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_SYSMSGS_ITEM_RESULT_W, KX_SYSMSGS_ITEM_ACTIONS_H);
						pGiftSent->SetBounds(&Rc_GiftSent);
						objFontType = pGiftSent->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pGiftSent->SetFont(objFontType);						
						pGiftSent->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_SysMsgs_GiftSentHim),FALSE);
						pGiftSent->SetBorderStyle(bsSingle, TRUE);
						pGiftSent->SetFrameWidth(1);
						pGiftSent->SetEnabled(FALSE);
						//	pGiftSent->SetColor(CTL_FRAME_COLOR,RGB(255, 186, 67)); 
						pGiftSent->SetColor(CTL_COLOR_TYPE_BACK, RGB(253, 255, 206));
						pGiftSent->SetWordWrapAttr(TRUE);
						pGiftSent->SetScrollBarMode(CTL_SCL_MODE_NONE);
						//	pGiftSent->SetMaxVisibleLines(pGiftSent->GetLinesCount(), TRUE);
						pGiftSent->Hide(TRUE);
						pGiftSent->GetBounds(&Rc_Temp);

						ResultID[nIndex] = nGiftSentId;
						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_SYSMSGS_ITEM_WIDGET_SPACE;
						//					ItemHeight = ItemHeight + KX_SYSMSGS_ITEM_ACTIONS_H + KX_SYSMSGS_ITEM_WIDGET_SPACE;
					}
					else
					{
						//非生日提醒和好友请求，均认为是系统消息
						pType[nIndex] = KX_SYSTEM_MESSAGE_SYSTEM;

						TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)Response->Sysmsgs[nIndex].content);
						pszTemp = TUString::StrTrimUnVisible(pszContent);
						Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
						TRectangle Rc_Content(KX_SYSMSGS_ITEM_CONTENT_X, rect.Y() - Rc_CoolBarList.Y() + ItemHeight, KX_SYSMSGS_ITEM_CONTENT_W, KX_SYSMSGS_ITEM_CONTENT_H);
						pContent->SetBounds(&Rc_Content);
						objFontType = pContent->GetFont();
						objFontType.Create(FONT_CONTENT_DETAIL, FONT_CONTENT_DETAIL);
						pContent->SetFont(objFontType); 
						pContent->SetTransparent(TRUE);
						pContent->SetEnabled(FALSE);
						pContent->SetCaption(pszTemp,FALSE);
						pContent->SetWordWrapAttr(TRUE);
						pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
						pContent->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_SYSMSGS_ITEM_WIDGET_SPACE;

					}

					lpItem->SetHeight(ItemHeight);
				}
			}
			nIndex++;
			ItemCount++;
		}
	}

	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TSystemMessagesForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TSystemMessagesForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;
	Int32 nCtrlID = pEvent->sParam1;
	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(nCtrlID)
	{
		for(int i=0; i<KX_SYSMSGS_ITEM_COUNT_MAX; i++)
		{
			if( pType[i] == KX_SYSTEM_MESSAGE_BIRTHDAY && ActionButID2[i] == nCtrlID )
			{
				Set_Url_Params(KX_SendBirthdayGift, "fuid", pUid[i]);
				Set_Url_Params(KX_SendBirthdayGift, "msg", "");
				Set_Url_Params(KX_SendBirthdayGift, "smid", Smid[i]);
				Set_Url_Params(KX_SendBirthdayGift, "quiet", "1");
				nActionIndex = i;
				KaiXinAPICommon_Download(KX_SendBirthdayGift, this->GetWindowHwndId());
				break;
			}
			else if( pType[i] == KX_SYSTEM_MESSAGE_FRIEND && ( ActionButID1[i] == nCtrlID || ActionButID2[i] == nCtrlID ))
			{
				if(ActionButID1[i] == nCtrlID)
				{
					//Accept
					Set_Url_Params(KX_AcceptFriendRequest, "fuid", pUid[i]);
					Set_Url_Params(KX_AcceptFriendRequest, "smid", Smid[i]);
					nActionIndex = i;
					KaiXinAPICommon_Download(KX_AcceptFriendRequest, this->GetWindowHwndId());
				}
				else
				{
					//Refuse
					Set_Url_Params(KX_RefuseFriendRequest, "smid", Smid[i]);
					nActionIndex = i;
					KaiXinAPICommon_Download(KX_RefuseFriendRequest, this->GetWindowHwndId());
				}
				break;
			}
			else
			{

			}
		}
	}
	return bHandled;
}