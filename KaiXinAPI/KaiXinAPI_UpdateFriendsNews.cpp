/*!
* \file	 KaiXinApp_UpdateFriendsNews.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 更新好友动态
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

#include "TCOM_FileBrowser_Interface.h"
#include "TCOM_FileBrowser_IIDs.h"     // 此头文件整个项目中仅能包含一次
#include "TCOM_DigitalCamera_DataType.h"
#include "TCOM_DigitalCamera_IIDs.h"



#if(LCD_SIZE == LCD_HVGA )
//For popup menu
#define MENU_X				(100)
#define MENU_Y				(200)
#define MENU_WIDTH			(96)
#define MENU_HEIGHT			(120)

#define MENU_ITEM_HEIGHT	(40) //菜单每个item高度
#define MENU_ITEM_SPACE_X	(10) 
#define MENU_ITEM_SPACE_Y	(10) 
#define MENU_ITEM_FONT		(14) 

//动态空间间间隙
#define KX_News_ITEM_W_SPACE	(4)
#define KX_News_ITEM_H_SPACE	(5)

#define KX_News_THUMBNAIL_W			(50)
#define KX_News_THUMBNAIL_H			(50)

#define KX_News_FNAME_W			(50)
#elif(LCD_SIZE == LCD_WVGA )
//For popup menu
#define MENU_X				(150)
#define MENU_Y				(300)
#define MENU_WIDTH			(120)
#define MENU_HEIGHT		(180)

#define MENU_ITEM_HEIGHT	(60) //菜单每个item高度
#define MENU_ITEM_SPACE_X	(10) 
#define MENU_ITEM_SPACE_Y	(20) 
#define MENU_ITEM_FONT		(14) 

//动态空间间间隙
#define KX_News_ITEM_W_SPACE	(6)
#define KX_News_ITEM_H_SPACE	(8)

#define KX_News_THUMBNAIL_W			(75)
#define KX_News_THUMBNAIL_H			(75)

#define KX_News_FNAME_W			(75)
#endif

//动态每行间隔
#define KX_News_ITEM_LINE_SPACE		(2)


//动态类型图标坐标
#define KX_News_TYPE_ICON_X			(10)
#define KX_News_TYPE_ICON_Y			(5)
#define KX_News_TYPE_ICON_W			(16)
#define KX_News_TYPE_ICON_H			(16)

//动态赞图标坐标
#define KX_News_PRAISE_ICON_X			(26)//根据获取到的数据会变动
#define KX_News_PRAISE_ICON_Y			(5)
#define KX_News_PRAISE_ICON_W			(15)
#define KX_News_PRAISE_ICON_H			(15)

//动态机构图标坐标
#define KX_News_STAR_ICON_X			(45)//根据获取到的数据会变动
#define KX_News_STAR_ICON_Y			(5)
#define KX_News_STAR_ICON_W			(10)
#define KX_News_STAR_ICON_H			(12)


//动态好友姓名坐标
#define KX_News_FNAME_X			(KX_News_TYPE_ICON_X + KX_News_TYPE_ICON_W + KX_News_ITEM_W_SPACE)//根据获取到的数据会变动
#define KX_News_FNAME_Y			(2)//KX_News_TYPE_ICON_Y因为是richview 那么间隔会太大，所以改成2
#define KX_News_FNAME_H			(FONT_NAME)

//动态简介内容坐标
#define KX_News_INTRO_X			(KX_News_FNAME_X + KX_News_FNAME_W + KX_News_ITEM_W_SPACE)//根据获取到的数据会变动
#define KX_News_INTRO_Y			(KX_News_TYPE_ICON_Y)
#define KX_News_INTRO_W			(50)
#define KX_News_INTRO_H			(FONT_CONTENT)

//动态内容坐标
#define KX_News_CONTENT_X		(20)
#define KX_News_CONTENT_Y		(KX_News_TYPE_ICON_Y+KX_News_TYPE_ICON_H+KX_News_ITEM_H_SPACE)
#define KX_News_CONTENT_W		(SCR_W-KX_News_CONTENT_X-KX_News_ITEM_W_SPACE)
#define KX_News_CONTENT_H		(FONT_CONTENT)

//动态缩略图片宽高

#define KX_News_THUMBNAIL_X			(10)
#define KX_News_THUMBNAIL_Y			(KX_News_TYPE_ICON_Y+KX_News_TYPE_ICON_H+KX_News_ITEM_H_SPACE)



//动态转帖坐标
#define KX_News_REPASTE_X			(20)
#define KX_News_REPASTE_Y			(KX_News_TYPE_ICON_Y+KX_News_TYPE_ICON_H+KX_News_ITEM_H_SPACE)//根据获取到的数据会变动
#define KX_News_REPASTE_W			(SCR_W-KX_News_REPASTE_X-KX_News_ITEM_W_SPACE)
#define KX_News_REPASTE_H			(FONT_CONTENT)

//动态时间坐标
#define KX_News_STIME_X			(KX_News_CONTENT_X)
#define KX_News_STIME_Y			(KX_News_CONTENT_Y + KX_News_CONTENT_H+KX_News_ITEM_H_SPACE)
#define KX_News_STIME_W			(50)
#define KX_News_STIME_H			(FONT_OTHER_INFO)

//动态默认行高
#define KX_News_ITEM_DEFAULT_H		(100)

//动态各项字体
#define KX_News_FONT_SIZE_FNAME		(14)
#define KX_News_FONT_SIZE_INTRO	(14)
#define KX_News_FONT_SIZE_CONTENT	(14)
#define KX_News_FONT_SIZE_STIME		(12)
#define KX_News_FONT_SIZE_STATUS	(16)

sKxNewsIcon KxNewsIcons[] =
{
	{KX_NewsTypeStart, "", APP_KA_ID_BITMAP_movementdefault,0},//默认图标ID
	{KX_NewsUploadPhoto,"uploadphoto",APP_KA_ID_BITMAP_picture,0},
	{KX_NewsPostDiary, "postdiary", APP_KA_ID_BITMAP_diary,APP_KA_ID_STRING_NewsPostDiary},
	{KX_NewsUpdateStatus,"updatestatus",APP_KA_ID_BITMAP_movement,APP_KA_ID_STRING_NewsUpdateStatus},
	{KX_NewsRepaste,"merge_repaste",APP_KA_ID_BITMAP_repase,APP_KA_ID_STRING_NewsRepaste},		
	{KX_NewsVote, "merge_vote", APP_KA_ID_BITMAP_vote,APP_KA_ID_STRING_NewsVote},
	{KX_NewsMergeRecord,"merge_record",APP_KA_ID_BITMAP_recordmovement,APP_KA_ID_STRING_NewsRecord},
	{KX_NewsUpdateLogo, "", APP_KA_ID_BITMAP_movement,0},
	{KX_NewsUpdateInfo,"",APP_KA_ID_BITMAP_movement,0},

	{KX_NewsPraise,"",APP_KA_ID_BITMAP_praise,0},		
	//more to add here		
};

sKxNewsMenuItem	NewsMenuItem[] = 
{
	{KX_NewsMenuUploadPhoto,APP_KA_ID_STRING_UploadPhotos,APP_KA_ID_BITMAP_picture},
	{KX_NewsMenuPostDiary, APP_KA_ID_STRING_WriteDiary, APP_KA_ID_BITMAP_diary},
	{KX_NewsMenuWriteRecord,APP_KA_ID_STRING_WriteRecords,APP_KA_ID_BITMAP_recordmovement},

	//more to add here		
};	
Int32 GetIconIDByType(Int32 nType, char *nTypeName)
{
	Int32 IconID = APP_KA_ID_BITMAP_movementdefault;//default icon ID

	if(nType >= KX_NewsTypeStart && nType <= KX_NewsTypeEnd)
	{
		if(nType != KX_NewsTypeStart)
		{
			//根据ntype 查找对应的结构体
			for(int i=0; i<ARR_SIZE(KxNewsIcons);i++)
			{
				if(KxNewsIcons[i].nType == nType)
				{
					IconID = KxNewsIcons[i].nIconID;
					break;
				}
			}	
		}
		else
		{
			//根据ntypename 查找对应的结构体
			for(int i=0; i<ARR_SIZE(KxNewsIcons);i++)
			{
				if(strcmp(KxNewsIcons[i].nTypename,nTypeName)==0)
				{
					IconID = KxNewsIcons[i].nIconID;
					break;
				}
			}
		}
	}

	return IconID;
}

Int32 GetStringIDByType(Int32 nType, char *nTypeName)
{
	Int32 StringID = 0;//default StringID

	if(nType >= KX_NewsTypeStart && nType <= KX_NewsTypeEnd)
	{
		if(nType != KX_NewsTypeStart)
		{
			//根据ntype 查找对应的结构体
			for(int i=0; i<ARR_SIZE(KxNewsIcons);i++)
			{
				if(KxNewsIcons[i].nType == nType)
				{
					StringID = KxNewsIcons[i].nStringID;
					break;
				}
			}	
		}
		else
		{
			//根据ntypename 查找对应的结构体
			for(int i=0; i<ARR_SIZE(KxNewsIcons);i++)
			{
				if(strcmp(KxNewsIcons[i].nTypename,nTypeName)==0)
				{
					StringID = KxNewsIcons[i].nStringID;
					break;
				}
			}
		}
	}

	return StringID;
}

char* GetTypeNameByTypeID(Int32 nType)
{	
	if(nType >= KX_NewsTypeStart && nType <= KX_NewsTypeEnd)
	{
		//根据ntype 查找对应的结构体
		for(int i=0; i<ARR_SIZE(KxNewsIcons);i++)
		{
			if(KxNewsIcons[i].nType == nType)
			{
				return KxNewsIcons[i].nTypename;
				break;
			}
		}		
	}

	return NULL;
}
TUChar * GetContentByType(Int32 nType, TUChar * pDest, const TUChar * pSrcStr)
{
	TUChar* pTemp = pDest;
	Int32 tempLen = 0;
	TUChar sChr[1]={'\n'};
	switch(nType)
	{
	case KX_NewsPostDiary:
		{
			//pTemp = TUString::StrChr(pSrcStr,(TUChar)L'”');//第一个双引号出现的位置的右边的字串//pengjohn debug
			pTemp = TUString::StrChr(pSrcStr,(TUChar)0x201D);//第一个双引号出现的位置的右边的字串

			tempLen = 1;//TUString::StrLen(L'”');
			if( pTemp && TUString::StrLen(pTemp)>tempLen)
			{
				pDest = pTemp + tempLen;//第二个引号后面的部分为日记内容
			}
			break;
		}
	case KX_NewsUpdateStatus:
		{		
			pTemp = TUString::StrChr(pSrcStr,sChr[0]);//TResource::LoadConstString(APP_KA_ID_STRING_NewsUpdateStatus//关键字出现的位置的右边的字串
			//tempLen = sizeof(sChr[0]);//2//TUString::StrLen(TResource::LoadConstString(APP_KA_ID_STRING_NewsUpdateStatus));
			tempLen = 1;
			if( pTemp && TUString::StrLen(pTemp)>tempLen)
			{
				pDest = pTemp + tempLen;//关键字后面的部分为更新状态
			}			
			break;
		}
	case KX_NewsMergeRecord:
		{
			pTemp = TUString::StrChr(pSrcStr,sChr[0]);//TResource::LoadConstString(APP_KA_ID_STRING_NewsRecord)//关键字出现的位置的右边的字串
			//tempLen = sizeof(sChr[0]);//2;//TUString::StrLen(TResource::LoadConstString(APP_KA_ID_STRING_NewsRecord));
			tempLen = 1;
			if( pTemp && TUString::StrLen(pTemp)>tempLen)
			{
				pDest = pTemp + tempLen;//关键字后面的部分为更新内容
			}
			else
			{
				//开心网调整过api
				pDest = (TUChar*)pSrcStr;
			}
			break;
		}

	}
	if(pDest)
	{
		return TUString::StrTrim(pDest);
	}
	else
	{
		return pDest;
	}

}
TUChar * GetTitleByType(Int32 nType, TUChar * pDest, const TUChar * pSrcStr)
{
	TUChar* pTemp = pDest;
	TUChar* pTemp2 = pDest;	
	Int32 tempLen = 0;

	switch(nType)
	{
	case KX_NewsPostDiary://双引号之间为日记标题
		{
			//pTemp = TUString::StrChr(pSrcStr,(TUChar)L'“');//第一个双引号出现的位置的右边的字串//pengjohn debug
			pTemp = TUString::StrChr(pSrcStr,(TUChar)0x201C);//第一个双引号出现的位置的右边的字串

			tempLen = 2;//TUString::StrLen(L'”');
			if( pTemp && TUString::StrLen(pTemp)>tempLen)
			{
				//pTemp2 = TUString::StrChr(pSrcStr,(TUChar)L'”');	//pengjohn debug
				pTemp2 = TUString::StrChr(pSrcStr,(TUChar)0x201D);

				tempLen = TUString::StrLen(pTemp)-TUString::StrLen(pTemp2);
				if( pTemp && TUString::StrLen(pTemp)>tempLen +1)
				{
					pDest = pTemp+1;
					pTemp = pDest + tempLen-1;
					*pTemp = '\0';
				}
			}
			break;
		}
	case KX_NewsVote://关键字之后 再加一个空格后面是投票标题
		{
			pTemp = TUString::StrStr(pSrcStr,TResource::LoadConstString(APP_KA_ID_STRING_NewsVote));//关键字出现的位置的右边的字串
			tempLen = TUString::StrLen(TResource::LoadConstString(APP_KA_ID_STRING_NewsVote))+1;//TUString::StrLen(L' ');
			if( pTemp && TUString::StrLen(pTemp)>tempLen)
			{
				pDest = pTemp + tempLen;//关键字后面的部分为更新内容
			}
			break;
		}	
	}	

	if(pDest)
	{
		return TUString::StrTrim(pDest);
	}
	else
	{
		return pDest;
	}
}

void* KaiXinAPI_UpdateFriendsNews_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseUpdateFriendsNews*  Response = new tResponseUpdateFriendsNews;
	memset(Response, 0 , sizeof(tResponseUpdateFriendsNews));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			STRCPY_Ex(Response->uid, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "news");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_news = nSize1;
			if( nSize1 != 0 )
			{
				Response->news = NULL;
				Response->news = (UpdateFriendsNews_news*) malloc(sizeof( UpdateFriendsNews_news ) * nSize1 );
				memset(Response->news, 0 , sizeof(UpdateFriendsNews_news) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "fuid");
				if(pTemp1)
				{
					if(pTemp1->valueint >0)
						sprintf(Response->news[i].fuid, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->news[i].fuid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "flogo");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].flogo, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ntype");
				if(pTemp1)
				{
					if(pTemp1->valueint > 0)
						sprintf(Response->news[i].ntype, "%d", pTemp1->valueint);
					else
						STRCPY_Ex(Response->news[i].ntype, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ntypename");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].ntypename, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "intro");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].intro, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					Response->news[i].ctime = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "stime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].stime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "thumbnail");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].thumbnail, pTemp1->valuestring);
				}

				//somenews type the id return as int, but sometime return as string(e.g: vote) 
				pTemp1 = cJSON_GetObjectItem(Item1, "id");
				if(pTemp1)
				{
					Response->news[i].id = pTemp1->valuedouble;
				}			
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].idString, pTemp1->valuestring);
				}
				
				pTemp1 = cJSON_GetObjectItem(Item1, "star");
				if(pTemp1)
				{
					Response->news[i].star = pTemp1->valueint;
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "cnum");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].cnum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "upnum");
				if(pTemp1)
				{
					STRCPY_Ex(Response->news[i].upnum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "imglist");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->news[i].nSize_imglist = nSize2;
					if( nSize2 != 0 )
					{
						Response->news[i].imglist = NULL;
						Response->news[i].imglist = (UpdateFriendsNews_imglist*) malloc(sizeof( UpdateFriendsNews_imglist ) * nSize2 );
						memset(Response->news[i].imglist, 0 , sizeof(UpdateFriendsNews_imglist) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "pid");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].pid, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "title");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].title, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "thumbnail");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].thumbnail, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "large");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].large, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "privacy");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].privacy, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "albumid");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].albumid, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "albumtitle");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].albumtitle, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "picnum");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].imglist[j].picnum, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "pos");
						if(pTemp2)
						{
							Response->news[i].imglist[j].pos = pTemp2->valueint;
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "ctime");
						if(pTemp2)
						{
							Response->news[i].imglist[j].ctime = pTemp2->valueint;
						}

					}
				}				

				pTemp1 = cJSON_GetObjectItem(Item1, "replist");
				if(pTemp1)
				{
					int nSize2 = 0, j = 0;
					nSize2 = cJSON_GetArraySize(pTemp1);
					Response->news[i].nSize_replist = nSize2;
					if( nSize2 != 0 )
					{
						Response->news[i].replist = NULL;
						Response->news[i].replist = (UpdateFriendsNews_replist*) malloc(sizeof( UpdateFriendsNews_replist ) * nSize2 );
						memset(Response->news[i].replist, 0 , sizeof(UpdateFriendsNews_replist) * nSize2 );
					}
					for ( j = 0; j < nSize2; j++ )
					{
						cJSON *Item2 = NULL, *pTemp2 = NULL;
						Item2 = cJSON_GetArrayItem(pTemp1,j);
						pTemp2 = cJSON_GetObjectItem(Item2, "id");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].replist[j].id, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "title");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].replist[j].title, pTemp2->valuestring);
						}
						pTemp2 = cJSON_GetObjectItem(Item2, "type");
						if(pTemp2)
						{
							STRCPY_Ex(Response->news[i].replist[j].type, pTemp2->valuestring);
						}

					}
				}
			}
		}

	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}


// 构造函数
TUpdateFriendsNewsForm::TUpdateFriendsNewsForm(TApplication* pApp, KX_NewsShowType nShowType):TWindow(pApp)
{
	Response = NULL;

	//use to save buttons ID
	m_nNewsBtnID = 0;//动态
	m_nFriendsBtnID = 0;//好友
	m_nInfosBtnID = 0;//我的地盘
	m_nAppsBtnID = 0;//组件
	m_nMoreBtnID = 0;//更多

	m_nNewsItemCount = 0;

	nThumImgIndex = 0;
	MemSet(&m_photodata, 0, sizeof(tPhotoDetail));

	pUserImageBmp = NULL;

	for(int i=0; i<KX_News_THUMBNAIL_TOTAL_COUNT_MAX; i++)
	{
		pThumbnailBmp[i] = NULL;	
	}

	PreSelectRichViewID = 0;

	m_ShowType = nShowType;
	Create(APP_KA_ID_UpdateFriendsNewsForm);

}

// 析构函数
TUpdateFriendsNewsForm::~TUpdateFriendsNewsForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	if(Response)
	{
		delete Response;
	}

	if( pUserImageBmp != NULL)
	{
		pUserImageBmp->Destroy();
		pUserImageBmp = NULL; 								
	}

	for(int i=0; i<KX_News_THUMBNAIL_TOTAL_COUNT_MAX; i++)
	{
		if( pThumbnailBmp[i] != NULL)
		{
			pThumbnailBmp[i]->Destroy();
			pThumbnailBmp[i] = NULL; 								
		}
	}

}

// 窗口事件处理
Boolean TUpdateFriendsNewsForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch( pEvent->eType )
	{
	case EVENT_WinInit:
		{
			// Do initialization here
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSetFocus:
		{
			bHandled = _OnCtrlFocusEvent(pApp, pEvent);
		}
		break;	
	case EVENT_CtrlKillFocus:
		{
			bHandled = _OnCtrlKillFocusEvent(pApp, pEvent);
		}
		break;			
	case EVENT_CtrlSelect:
		{

			// 处理控件点击事件或响应事件
			bHandled = _OnCtrlSelectEvent( pApp, pEvent );

		}
		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_ExitBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;				
		// 菜单子项的处理。
	case EVENT_PopupMenuSelect:
		{
			//below codes just for test
			pApp->MessageBox((TUChar*)L"Menu Select", (TUChar*)L"Menu",WMB_OK);
			bHandled = TRUE;
			break;
		}
	case EVENT_PenDown:
		{
			//如果点击在菜单上，则进入相对应的项并且重刷窗口
			if(IsTherePoPMenu == TRUE)
			{
				TRectangle MenuRect(MENU_X, MENU_Y, MENU_WIDTH, MENU_HEIGHT);

				if(MenuRect.IsInRect(pEvent->sParam1, pEvent->sParam2))//为真表明点在了menu上
				{
					_DoMenuItem(pApp, pEvent);
					this->DrawWindow();
					IsTherePoPMenu = FALSE;	
					bHandled = TRUE;
				}
				else //有弹出菜单但是没有点击在菜单上
				{
					//Fix bug 3666: 菜单应该消失
					this->DrawWindow();//重画窗口 菜单消失
					IsTherePoPMenu = FALSE; 
					bHandled = TRUE;
#if 0
					TRectangle NewsRect;
					TPanel *pFriendsNewsTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsPanel)); 
					pFriendsNewsTPanel->GetBounds(&NewsRect);

					//点在了动态内容上
					if(NewsRect.IsInRect(pEvent->sParam1, pEvent->sParam2))
					{
						//不做处理	
						bHandled = TRUE;
					}
#endif
				}
			}
			else
			{
#if 0
				//点击新控件前先去掉以前选中
				TRichView* OldSelectedRichView = (TRichView*)this->GetFocusControl();
				if(OldSelectedRichView)
				{
					OldSelectedRichView->SetSelectionPos(0,0);
				}
#endif
			}
			break;
		}
	case EVENT_ListPreDraw:
		{
			bHandled = _OnLstPreDrawEvent(pApp, pEvent);
		}
		break;

	case EVENT_CoolBarListPreDraw:
		{
			bHandled = _OnCoolBarListPreDraw(pApp, pEvent); 			   
		}
		break;
		
	case EVENT_WinClose:
		{
			// Do uninitialization here
		}
		break;
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			dc.SetBackColor(RGB_COLOR_FORM_BACKGROUND);
			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Selections_Bg), 0, TITLEBAR_H, SCR_W,GUI_API_STYLE_ALIGNMENT_LEFT);

			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;

	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{	
					//下载完后跟新缩略图图标
					if(notifyData.nParam == KX_News_USER_IMAGE_INDEX)
					{
						if( pUserImageBmp != NULL)
						{
							pUserImageBmp->Destroy();
							pUserImageBmp = NULL;								
						}
						pUserImageBmp = LoadImgByPath(notifyData.pszFilePath);

						if(pUserImageBmp)
						{

						}						
					}
					else if(notifyData.nParam < KX_News_THUMBNAIL_TOTAL_COUNT_MAX)
					{
#if 0	
						if( pThumbnailBmp[notifyData.nParam] != NULL)
						{
							pThumbnailBmp[notifyData.nParam]->Destroy();
							pThumbnailBmp[notifyData.nParam] = NULL;								
						}
						pThumbnailBmp[notifyData.nParam] = LoadImgByPath(notifyData.pszFilePath);

						if(pThumbnailBmp[notifyData.nParam])
						{
							TImage* pTImage;

							pTImage = static_cast< TImage* >(this->GetControlPtr(this->nThumbnailImage[notifyData.nParam]));
							if(pTImage)
							{
								pTImage->SetBitmap(pThumbnailBmp[notifyData.nParam]);
								pTImage->Draw();
							}
						}	
#endif
#if 1
						//下载完后跟新缩略图图标
						TBitmap* pDownLoadBitmap = NULL;
						pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);//test.png//(L"/My_Projects/App_KaiXin/Res/Photos/but_refresh1.png")

						if(pDownLoadBitmap)
						{
							TImage* pTImage;

							pTImage = static_cast< TImage* >(this->GetControlPtr(this->nThumbnailImage[notifyData.nParam]));
							if(pTImage)
							{	
								TRectangle rc;
								pTImage->GetBounds(&rc);

								if( pThumbnailBmp[notifyData.nParam] != NULL)
								{
									pThumbnailBmp[notifyData.nParam]->Destroy();
									pThumbnailBmp[notifyData.nParam] = NULL;								
								}
#if 0
								Int32 pdx = KX_News_THUMBNAIL_W;
								Int32 pdy = KX_News_THUMBNAIL_H;
								
								Image_ScaleXY(pDownLoadBitmap->GetWidth(), pDownLoadBitmap->GetHeight(), &pdx , &pdy);

								TRectangle Rc_Content(0, 0, 0, 0);
								pTImage->GetBounds(&Rc_Content);
								Rc_Content.SetWidth(pdx);
								Rc_Content.SetHeight(pdy);
								pTImage->SetBounds(&Rc_Content);
#endif								
								pThumbnailBmp[notifyData.nParam] = TBitmap::Create(KX_News_THUMBNAIL_W, KX_News_THUMBNAIL_H, pDownLoadBitmap->GetDepth());
								pThumbnailBmp[notifyData.nParam]->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
								pTImage->SetBitmap(pThumbnailBmp[notifyData.nParam]);
								pTImage->Draw();
							}
							pDownLoadBitmap->Destroy();
							pDownLoadBitmap = NULL;
						}						
#endif																
					}							

					break;
				}
			case KX_PostDiary:
			case KX_WriteRecord:				
				{
					pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);
					break;
				}
			case KX_AlbumPhotoFromNews:				
				{
					//下载完毕之后，转到照片详情界面
					TPhotoDetailForm *pComm1 = new TPhotoDetailForm( pApp, m_photodata);
					break;
				}
			case KX_UploadPhoto:
				{
					pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_PhotoUploadSuccess),TResource::LoadConstString(APP_KA_ID_STRING_UploadPhotos),WMB_OK); 					
					break;
				}
			case KX_UpdateStatus:
				{
					if(KaiXinAPI_JsonParse_bSuccess(KX_UpdateStatus))
					{
						KaiXinAPICommon_Download(KX_GetStatus, this->GetWindowHwndId());
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK); 
					}					
					else
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Fail),TResource::LoadConstString(APP_KA_ID_STRING_Publish),WMB_OK);	
					}
					break;
				}
			case KX_GetStatus:						
				{
					//更新状态显示
					int iRet = eFailed;
					tResponseGetStatus* StatusResponse = NULL;
					iRet = KaiXinAPI_JsonParse(KX_GetStatus, (void **)&StatusResponse);
					if(iRet)
					{
						TFont objFontType;				
						TUChar pszStatus[1024] = {0};	
						TRichView *pNewsStatus = static_cast<TRichView*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsStatus));

						if(pNewsStatus)
						{
							//先保存个人状态
							STRCPY_Ex(KaiXinUserInfo.status, StatusResponse->note);						
							TUString::StrUtf8ToStrUnicode(pszStatus, (Char*)StatusResponse->note);
							objFontType = pNewsStatus->GetFont();
							objFontType.Create(FONT_CONTENT, FONT_CONTENT);
							pNewsStatus->SetFont(objFontType);			
							pNewsStatus->SetWordWrapAttr(TRUE);
							pNewsStatus->SetTransparent(TRUE);
							pNewsStatus->SetEnabled(TRUE);
							pNewsStatus->SetScrollBarMode(CTL_SCL_MODE_NONE);

							ShowAsShort(pNewsStatus, pszStatus, objFontType);
						}	
					}
					if(StatusResponse)
					{
						delete StatusResponse;
						StatusResponse = NULL;
					}
					break;
				}
			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == StatusUpdateEdit)
			{
				Set_Url_Params(KX_UpdateStatus, "state", (char*)notifyData.PostMsgData.statusupdatedata.pszStateContent);					
				KaiXinAPICommon_Download(KX_UpdateStatus, this->GetWindowHwndId());		
			}
			else if(notifyData.nEditType == NewDiaryEdit)
			{
				Set_Url_Params(KX_PostDiary, "title", (char*)notifyData.PostMsgData.diarydata.pszEditTitle);
				Set_Url_Params(KX_PostDiary, "content", (char*)notifyData.PostMsgData.diarydata.pszEditContent);				

				KaiXinAPICommon_Download(KX_PostDiary, this->GetWindowHwndId()); 			
			}
			else	 if(notifyData.nEditType == NewRecordEdit)
			{
				Set_Url_Params(KX_WriteRecord, "privacy", "0");
				Set_Url_Params(KX_WriteRecord, "reccont", (char*)notifyData.PostMsgData.recorddata.pszRecordContent);					

				KaiXinAPICommon_Download(KX_WriteRecord, this->GetWindowHwndId());				
			}
			
			bHandled = TRUE;
			break;
		}

	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}
	return bHandled;

}


// 窗口初始化
Boolean TUpdateFriendsNewsForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	//init login form
	int iRet = eFailed;
	iRet = KaiXinAPI_JsonParse(KX_UpdateFriendsNews, (void **)&this->Response);
	m_ExitBtn = SetAppExitButton(this);

	SetAppTilte(this,APP_KA_ID_STRING_FriendsNews);	
	_CreateSelectionButtons(pApp);
	_CreateTabButtons(pApp);	
	
	if(iRet == eSucceed)
	{
		IsTherePoPMenu = FALSE;
		SetAppTilte(this,APP_KA_ID_STRING_FriendsNews);
		_SetDataToCtrls(pApp);
		_SetNewsCoolBarList(pApp, m_ShowType);
		_ChangeBtnImage(m_ShowType);
	}

	return TRUE;
}


// 关闭窗口时，保存设置信息
Boolean TUpdateFriendsNewsForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}

Boolean TUpdateFriendsNewsForm::_OnCoolCtrlSelected(TApplication * pApp, Int32 nCtrlID)
{
	Boolean bHandled = FALSE;
	if(nCtrlID)
	{
		for(int i=0; i<KX_News_ITEM_COUNT_MAX; i++)
		{
			if(this->Response)
			{				
				int index = nItemNewsIndex[i];
				TUChar pszTUCharId[32];
				Char pszId[32];				 

				if( NewsFnameCtrlID[i] == nCtrlID )//点击到好友姓名
				{					
					Set_Url_Params(KX_GetUserInfos, "uids", Response->news[index].fuid);
					KaiXinAPICommon_Download(KX_GetUserInfos, this->GetWindowHwndId());

					bHandled = TRUE;
					break;
				}
				else if(NewsDiaryTitleCtrlID[i] == nCtrlID || NewsDiaryContCtrlID[i] == nCtrlID)//点击到日记标题或者概要
				{	
					TUString::StrI64ToA(pszTUCharId,(Int64)Response->news[index].id);					
					TUString::StrUnicodeToStrUtf8(pszId, pszTUCharId);				
					Set_Url_Params(KX_DiaryDetail, "did", (char*)pszId);	
					Set_Url_Params(KX_DiaryDetail, "fuid", Response->news[index].fuid);	

					KaiXinAPICommon_Download(KX_DiaryDetail, this->GetWindowHwndId());
					bHandled = TRUE;
					break;
				}
				else if(NewsRecordCtrlID[i] == nCtrlID)//点击到记录概要
				{
					//显示记录详情
					DetailDataType detailData;
					MemSet(&detailData, 0, sizeof(detailData));

					detailData.nId = Response->news[index].id;
					STRCPY_Ex(detailData.rid, Response->news[index].idString);
					//detailData.nType = Response->news[index].ntype;				
					STRCPY_Ex(detailData.nType, Response->news[index].ntype);				
					STRCPY_Ex(detailData.szFname, Response->news[index].fname);				
					STRCPY_Ex(detailData.szFuid, Response->news[index].fuid);								
					detailData.ctime = Response->news[index].ctime;
					STRCPY_Ex(detailData.stime, Response->news[index].stime);

					TUChar* pTempContent = NULL;
					TUChar pszIntro[1024] = {0};
					TUChar pszNType[8] = {0};

					TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[index].intro);
					TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[index].ntype);					
					Int32 nType = TUString::StrAToI(pszNType);
					pTempContent = GetContentByType(nType, pTempContent, pszIntro);
					if(pTempContent)
					{
						TUString::StrCopy(detailData.pszContent, pTempContent);
					}

					TOtherDetailForm *pComm1 = new TOtherDetailForm( pApp, detailData);					
					bHandled = TRUE;
					break;
				}
				else if(NewsStatusContCtrlID[i] == nCtrlID)//点击到状态概要
				{
					//显示状态详情
					DetailDataType detailData;
					MemSet(&detailData, 0, sizeof(detailData));

					detailData.nId = Response->news[index].id;
					//detailData.nType = Response->news[index].ntype;				
					STRCPY_Ex(detailData.nType, Response->news[index].ntype);				
					STRCPY_Ex(detailData.szFname, Response->news[index].fname);				
					STRCPY_Ex(detailData.szFuid, Response->news[index].fuid);								
					detailData.ctime = Response->news[index].ctime;
					STRCPY_Ex(detailData.stime, Response->news[index].stime);

					TUChar* pTempContent = NULL;
					TUChar pszIntro[1024] = {0};
					TUChar pszNType[8] = {0};

					TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[index].intro);
					TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[index].ntype);					
					Int32 nType = TUString::StrAToI(pszNType);
					pTempContent = GetContentByType(nType, pTempContent, pszIntro);
					if(pTempContent)
					{
						TUString::StrCopy(detailData.pszContent, pTempContent);					
					}

					TOtherDetailForm *pComm1 = new TOtherDetailForm( pApp, detailData);
					bHandled = TRUE;
					break;
				}
				else if(NewsVoteTitleCtrlID[i] == nCtrlID)//点击到投票概要
				{
					//显示投票详情				
					Set_Url_Params(KX_VoteDetail, "vid", Response->news[index].idString);						
					KaiXinAPICommon_Download(KX_VoteDetail, this->GetWindowHwndId());
					bHandled = TRUE;
					break;
				}
				else
				{	
					//转帖
					for(int j = 0; j < KX_News_ITEM_REPASTE_COUNT_MAX; j++ )
					{
						if(NewsRepasteCtrlID[i][j] == nCtrlID)//点击到转帖标题
						{
							//显示转帖详情				
							Set_Url_Params(KX_RepasteDetail, "urpid", Response->news[index].replist[j].id);	
							Set_Url_Params(KX_RepasteDetail, "fuid", Response->news[index].fuid);	
							Set_Url_Params(KX_RepasteDetail, "flag", "1");
							KaiXinAPICommon_Download(KX_RepasteDetail, this->GetWindowHwndId());
							bHandled = TRUE;
							break;
						}
					}

					//缩略图
					for(int j = 0; j < KX_News_ITEM_THUMBNAIL_COUNT_MAX; j++ )
					{
						if(NewsThumbnailCtrlID[i][j] == nCtrlID)//点击到缩略图
						{
							//显示图片详情数据设置
							MemSet(&m_photodata, 0, sizeof(tPhotoDetail));							

							m_photodata.dataFrom = 1; //1: from updatefriendsnews							
							STRCPY_Ex(m_photodata.photouid,Response->news[index].fuid);   //照片所属用户id							
							STRCPY_Ex(m_photodata.fname,Response->news[index].fname);   //照片所属用户名							

							STRCPY_Ex(m_photodata.pid, Response->news[index].imglist[j].pid);
							STRCPY_Ex(m_photodata.title, Response->news[index].imglist[j].title);
							STRCPY_Ex(m_photodata.thumbnail, Response->news[index].imglist[j].thumbnail);
							STRCPY_Ex(m_photodata.large, Response->news[index].imglist[j].large);
							STRCPY_Ex(m_photodata.privacy, Response->news[index].imglist[j].privacy);
							STRCPY_Ex(m_photodata.albumid, Response->news[index].imglist[j].albumid);
							STRCPY_Ex(m_photodata.albumtitle, Response->news[index].imglist[j].albumtitle);
							STRCPY_Ex(m_photodata.picnum, Response->news[index].imglist[j].picnum);
							m_photodata.pos = Response->news[index].imglist[j].pos;
							m_photodata.ctime = Response->news[index].imglist[j].ctime;
							//STRCPY_Ex(m_photodata.ctimeString, Response->photos[i].ctime);	//动态 取回的是整形
							m_photodata.cnum = 0;//动态无该项

							//下载整个专辑数据，便于下个页面上一张 下一张照片切换处理
							Set_Url_Params(KX_AlbumPhotoFromNews, "fuid",Response->news[index].fuid);							
							Set_Url_Params(KX_AlbumPhotoFromNews, "albumid", Response->news[index].imglist[j].albumid);

							KaiXinAPICommon_Download(KX_AlbumPhotoFromNews, this->GetWindowHwndId());
							bHandled = TRUE;
							break;						
						}
					}
				}			
			}
		}
#if 0
		if(bHandled == TRUE)
		{
			//取消之前选中的
			TRichView* tPreRichView =static_cast< TRichView* >(GetControlPtr(PreSelectRichViewID));
			if(tPreRichView)
			{
				TRectangle rc;

				tPreRichView->GetBounds(&rc);
				tPreRichView->SetSelectionPos(0,0);
				tPreRichView->SetFocusStatus(FALSE);
			}		

			//点击后显示选中
			TRichView* tNewRichView =static_cast< TRichView* >(GetControlPtr(nCtrlID));
			if(tNewRichView)
			{
				TRectangle rc;

				tNewRichView->GetBounds(&rc);
				tNewRichView->SetSelectionPos(0,rc.Width());
				PreSelectRichViewID = nCtrlID;
			}
		}
#endif		
	}
	return bHandled;
}

// 控件点击事件处理
Boolean TUpdateFriendsNewsForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean 	bHandled = FALSE;
	SS_GTID			gtidMain;
	SS_GetCurrentGTID(&gtidMain);

	Int32 nSelectedCtrlID = pEvent->sParam1;

	//点击到动态里面的控件
	bHandled = _OnCoolCtrlSelected(pApp, nSelectedCtrlID);

	if(!bHandled)
	{
		if(pEvent->sParam1 == this->m_nNewsBtnID)//动态
		{
			//如果原先就有窗口 要先删除掉 或者怎样，有待研究
			//KaiXinAPICommon_Download(KX_UpdateFriendsNews, this->GetWindowHwndId());
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == this->m_nFriendsBtnID)//好友
		{
			KaiXinAPICommon_Download(KX_FriendList, this->GetWindowHwndId());
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == this->m_nInfosBtnID)//我的地盘
		{
			KaiXinAPICommon_Download(KX_Profile, this->GetWindowHwndId());
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == this->m_nAppsBtnID)//组件
		{
			App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_APPLIST, NULL, 0, 0, 0);			
			//KaiXinAPICommon_Download(KX_ApplicationList, this->GetWindowHwndId());
			bHandled = TRUE;
		}	
		else if(pEvent->sParam1 == this->m_nMoreBtnID)//更多
		{
			//TMoreForm *pComm = new TMoreForm( pApp );

			App_PostMessageEx(&gtidMain, MSG_SWITCHFORM_MORE, NULL, 0, 0, 0);			
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == m_ExitBtn)//退出
		{
			App_PostMessageEx(&gtidMain, MSG_EXIT, NULL, 0, 0, 0);	
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == m_nAllBtnID)//全部
		{
			//_ChangeBtnImage(KX_NewsShowAll);
			m_ShowType = KX_NewsShowAll;
			_SetNewsCoolBarList(pApp,KX_NewsShowAll);
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == m_nImportantBtnID)//重要
		{
			//_ChangeBtnImage(KX_NewsShowImportant);
			m_ShowType = KX_NewsShowImportant;
			_SetNewsCoolBarList(pApp,KX_NewsShowImportant);	
			bHandled = TRUE;
		}
		else if(pEvent->sParam1 == m_nStarBtnID)//机构
		{
			//_ChangeBtnImage(KX_NewsShowStar);
			m_ShowType = KX_NewsShowStar;
			_SetNewsCoolBarList(pApp,KX_NewsShowStar);
			bHandled = TRUE;
		}
		else
		{
			switch(pEvent->sParam1)
			{	
			case APP_KA_ID_UpdateFriendsNewsForm_NewsHeadMaskBtn://点击用户头像，进入我的地盘
				{
					KaiXinAPICommon_Download(KX_Profile, this->GetWindowHwndId());
					bHandled = TRUE;
					break;
				}		
			case APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsStatus:
				{
					PostNotifyMsgDataType in_msgData;
					//TUChar pszStateContent[1024];

					MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));
					//memset(pszStateContent, 0, sizeof(pszStateContent));		

					in_msgData.nCtrlId = 0;
					in_msgData.nHwndId = this->GetWindowHwndId();
					in_msgData.nEditType = StatusUpdateEdit;

					//content
					//STRCPY_Ex(in_msgData.PostMsgData.statusupdatedata.pszStateContent,KaiXinUserInfo.status);
					TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);

					bHandled = TRUE;
					break;
				}
			case APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsRefreshBtn://刷新按钮
				{
					KaiXinAPICommon_Download(KX_UpdateFriendsNews, this->GetWindowHwndId(), 0, m_ShowType);
					bHandled = TRUE;
					break;
				}
			case APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsWriteBtn://写按钮
				{
#if 0
					// 弹出对话框相关定义。
					TPopupMenu popMenu;
					Int32 nIndex = 0;
					// 创建菜单。
					popMenu.Create(this,0,NULL);
					// 创建菜单项。 	
					popMenu.AddItem(nIndex ++, L"MenuItem1",MENU_ITEM_1);
					popMenu.AddItem(nIndex ++, L"MenuItem2", MENU_ITEM_2);

					// 随机位置显示菜单。
					popMenu.Show();
#endif
					if(IsTherePoPMenu == TRUE)//已经有popmenu，则刷屏，取消popup，否则画popmenu
					{
						this->DrawWindow();
						IsTherePoPMenu = FALSE;
					}
					else
					{
						_DrawPopMenu(pApp); 
					}
					bHandled = TRUE;
					break;
				}
			case 1://APP_KA_ID_UpdateFriendsNewsForm_AllNewsCoolBarList
				{
					TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
					switch( pRow->GetIndex() ) 
					{ 
					case 0: 
						{ 
							TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
							int ItemIndex = pItem->GetIndex();

							//need more codes here ?
						}
					}
					bHandled = TRUE;
					break;
				}
			default:
				break;		
			}
		}
	}

	return bHandled;
}

Boolean TUpdateFriendsNewsForm::_OnCtrlFocusEvent(TApplication* pApp, EventType* pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	
	if(pEvent->sParam1 == m_nAllBtnID)//全部
	{
		_ChangeBtnImage(KX_NewsShowAll);
		bHandled = TRUE;
		return bHandled;
	}
	else if(pEvent->sParam1 == m_nImportantBtnID)//重要
	{
		_ChangeBtnImage(KX_NewsShowImportant);
		bHandled = TRUE;
		return bHandled;
	}
	else if(pEvent->sParam1 == m_nStarBtnID)//机构
	{
		_ChangeBtnImage(KX_NewsShowStar);
		bHandled = TRUE;
		return bHandled;
	}

	for(int i=0; i<KX_News_ITEM_COUNT_MAX; i++)
	{			
		if( NewsFnameCtrlID[i] == nCtrlID )//点击到好友姓名
		{					
			bHandled = TRUE;
			break;
		}
		else if(NewsDiaryTitleCtrlID[i] == nCtrlID || NewsDiaryContCtrlID[i] == nCtrlID)//点击到日记标题或者概要
		{	
			bHandled = TRUE;
			break;
		}
		else if(NewsRecordCtrlID[i] == nCtrlID)//点击到记录概要
		{				
			bHandled = TRUE;
			break;
		}
		else if(NewsStatusContCtrlID[i] == nCtrlID)//点击到状态概要
		{
			bHandled = TRUE;
			break;
		}
		else if(NewsVoteTitleCtrlID[i] == nCtrlID)//点击到投票概要
		{
			bHandled = TRUE;
			break;
		}
		else
		{	
			//转帖
			for(int j = 0; j < KX_News_ITEM_REPASTE_COUNT_MAX; j++ )
			{
				if(NewsRepasteCtrlID[i][j] == nCtrlID)//点击到转帖标题
				{
					bHandled = TRUE;
					break;
				}
			}

			if(bHandled == TRUE)
				break;
		}
	}

	if(bHandled == TRUE)
	{
		//点击后显示选中
		TRichView* tNewRichView =static_cast< TRichView* >(GetControlPtr(nCtrlID));
		if(tNewRichView)
		{
			TRectangle rc;

			tNewRichView->GetBounds(&rc);
			tNewRichView->SetSelectionPos(0,rc.Width());
			PreSelectRichViewID = nCtrlID;
		}	
	}

	return bHandled;
}

Boolean TUpdateFriendsNewsForm::_OnCtrlKillFocusEvent(TApplication* pApp, EventType* pEvent)
{
	Boolean bHandled = FALSE;
	Int32 nCtrlID = pEvent->sParam1;
	
	for(int i=0; i<KX_News_ITEM_COUNT_MAX; i++)
	{			
		if( NewsFnameCtrlID[i] == nCtrlID )//点击到好友姓名
		{					
			bHandled = TRUE;
			break;
		}
		else if(NewsDiaryTitleCtrlID[i] == nCtrlID || NewsDiaryContCtrlID[i] == nCtrlID)//点击到日记标题或者概要
		{	
			bHandled = TRUE;
			break;
		}
		else if(NewsRecordCtrlID[i] == nCtrlID)//点击到记录概要
		{				
			bHandled = TRUE;
			break;
		}
		else if(NewsStatusContCtrlID[i] == nCtrlID)//点击到状态概要
		{
			bHandled = TRUE;
			break;
		}
		else if(NewsVoteTitleCtrlID[i] == nCtrlID)//点击到投票概要
		{
			bHandled = TRUE;
			break;
		}
		else
		{	
			//转帖
			for(int j = 0; j < KX_News_ITEM_REPASTE_COUNT_MAX; j++ )
			{
				if(NewsRepasteCtrlID[i][j] == nCtrlID)//点击到转帖标题
				{
					bHandled = TRUE;
					break;
				}
			}

			if(bHandled == TRUE)
				break;
		}
	}

	if(bHandled == TRUE)
	{
		//点击后显示选中
		TRichView* tNewRichView =static_cast< TRichView* >(GetControlPtr(nCtrlID));
		if(tNewRichView)
		{
			TRectangle rc;

			tNewRichView->GetBounds(&rc);
			tNewRichView->SetSelectionPos(0,0);
			tNewRichView->SetFocusStatus(FALSE);
		}	
	}
	return bHandled;
}
void TUpdateFriendsNewsForm::_SetDataToCtrls(TApplication* pApp)
{

	TFont objFontType;				
	TUChar pszStatus[KAIXIN_STATUS_LENTH] = {0};
	TUChar pszLogoPath[256] = {0};	
	TUChar szDateTime[128] = {0};	
	TRectangle Rc_Temp;
	TRectangle rect;

	TRichView *pNewsStatus = static_cast<TRichView*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsStatus));
	TRichView* pUpdateNewsTime = static_cast<TRichView*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsUpdateTime));		
	TMaskButton* pUserHeadBtn = static_cast<TMaskButton*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_NewsHeadMaskBtn));

	if(this->Response)
	{
		if(pNewsStatus)
		{
			//Rc_Temp.SetRect(68, 116, 240, 24);
			//pNewsStatus->SetBounds(&Rc_Temp);
			TUString::StrUtf8ToStrUnicode(pszStatus, (Char*)KaiXinUserInfo.status);
			objFontType = pNewsStatus->GetFont();
			objFontType.Create(FONT_CONTENT, FONT_CONTENT);
			pNewsStatus->SetFont(objFontType); 			
			pNewsStatus->SetWordWrapAttr(TRUE);
			pNewsStatus->SetTransparent(TRUE);
			pNewsStatus->SetEnabled(TRUE);
			pNewsStatus->SetScrollBarMode(CTL_SCL_MODE_NONE);

			ShowAsShort(pNewsStatus, pszStatus, objFontType);
		}
		if(pUpdateNewsTime)
		{
			TUChar sUpdateTime[128] = {0};			

			objFontType = pUpdateNewsTime->GetFont();
			objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
			pUpdateNewsTime->SetFont(objFontType); 
			TUString::StrCat(sUpdateTime,TResource::LoadConstString(APP_KA_ID_STRING_RecentlyUpdateTime));
			TUString::StrCat(sUpdateTime,TUSTR_Kx_Empty_Cell);

			TUChar* pszDateTime = NULL;			
			DateTimeType dtP = {0}; 
			TimGetLocalDateTime(&dtP);

			TUChar* 		pFormatStr = NULL;			
			pFormatStr = (TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_UTimeFormat_YY_MM_DD_HH_MM);
			pszDateTime = new TUChar[64];
			memset(pszDateTime, 0 , sizeof(TUChar) * 64 );
			TUString::StrPrintF( pszDateTime, pFormatStr, dtP.year, dtP.month, dtP.day, dtP.hour/10, dtP.hour%10, dtP.minute/10, dtP.minute%10 );
				
			TUString::StrCat(sUpdateTime,pszDateTime);
			if(pszDateTime) 
			{
				delete[] pszDateTime;
				pszDateTime = NULL;
			}

			pUpdateNewsTime->SetCaption(sUpdateTime,FALSE);
			pUpdateNewsTime->SetTransparent(TRUE);
			pUpdateNewsTime->SetEnabled(FALSE);
			pUpdateNewsTime->SetScrollBarMode(CTL_SCL_MODE_NONE);	
		}		
		if(pUserHeadBtn)
		{
			TBitmap* pDownLoadBitmap = NULL;
			TRectangle rc;
			TUString::StrUtf8ToStrUnicode(pszLogoPath, (Char*)KaiXinUserInfo.logoPath);
			if( pUserImageBmp != NULL)
			{
				pUserImageBmp->Destroy();
				pUserImageBmp = NULL;								
			}
			pDownLoadBitmap = LoadImgByPath(pszLogoPath);

			pUserHeadBtn->GetBounds(&rc);
			pUserHeadBtn->SetCaption(TUSTR_Kx_NULL,0,0);
			pUserHeadBtn->SetEnabled(TRUE);
			if(pDownLoadBitmap != NULL)
			{
				//图片缩放
				pUserImageBmp = TBitmap::Create(PHOTO_W, PHOTO_H, pDownLoadBitmap->GetDepth());
				pUserImageBmp->QuickZoom(pDownLoadBitmap, TRUE, TRUE,RGBA(0,0,0,255));
								
				pUserHeadBtn->SetImage(pUserImageBmp,(rc.Width()-pUserImageBmp->GetWidth())/2, (rc.Height()-pUserImageBmp->GetHeight())/2);			

				//释放图片
				pDownLoadBitmap->Destroy();
				pDownLoadBitmap = NULL; 				
			}
			else
			{
				const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
				pUserHeadBtn->GetBounds(&rc);
				pUserHeadBtn->SetEnabled(FALSE);
				pUserHeadBtn->SetCaption(TUSTR_Kx_NULL,0,0);
				pUserHeadBtn->SetImage(pBmp,(rc.Width()-pBmp->GetWidth())/2, (rc.Height()-pBmp->GetHeight())/2);						
			}
		}
	}
}

Int32 TUpdateFriendsNewsForm::_SetNewsCoolBarList(TApplication* pApp, KX_NewsShowType ShowType)
{
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;

	//nThumImgIndex = 0;//缩略图下标开始
	MemSet(NewsFnameCtrlID, 0, sizeof(NewsFnameCtrlID) );
	//Record content Ctrls
	MemSet(NewsRecordCtrlID, 0, sizeof(NewsRecordCtrlID) );
	//Diary title Ctrls
	MemSet(NewsDiaryTitleCtrlID, 0, sizeof(NewsDiaryTitleCtrlID) );
	//Diary content Ctrls
	MemSet(NewsDiaryContCtrlID, 0, sizeof(NewsDiaryContCtrlID) );
	//Vote title Ctrls
	MemSet(NewsVoteTitleCtrlID, 0, sizeof(NewsVoteTitleCtrlID) );
	//Status content Ctrls
	MemSet(NewsStatusContCtrlID, 0, sizeof(NewsStatusContCtrlID) );
	//Repaste Ctrls
	MemSet(NewsRepasteCtrlID, 0, sizeof(NewsRepasteCtrlID) );
	//Thumbnail Ctrls
	MemSet(NewsThumbnailCtrlID, 0, sizeof(NewsThumbnailCtrlID) );

	if(Response)
	{
		nThumImgIndex = 0;//缩略图下标开始
		m_nNewsItemCount = 0;//CoolbarItem值
		int nIndex = 0;//记录Jason中，news数组下标
		int nCoolMaxItem = (Response->nSize_news < KX_News_ITEM_COUNT_MAX)?Response->nSize_news:KX_News_ITEM_COUNT_MAX;	//cool最大item值
		TBarRow *lpRow = NULL;

		TPanel* pPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_AllFriendsNewsCoolPanel));
		pPanel->SetOrigin(0, 0);

		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_AllNewsCoolBarList));//ShowCoolList(ShowType)
		if (pCoolBarList)
		{
			pCoolBarList->SetBounds(RC_LIST_LARGE);	
			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				//lpRowList->EndUpdate(); 
			}
		}

		while( nIndex < nCoolMaxItem)
		{			
			//add Item
			TBarListItem* lpItem = NULL;
			if(lpRow)
			{
				if(_IsShow(nIndex,ShowType) == TRUE)
				{
					nItemNewsIndex[m_nNewsItemCount] = nIndex;
					lpItem = lpRow->AppendItem();
					if (lpItem)  
					{
						TFont objFontType;
						TUChar pszFName[32] = {0};
						TUChar pszIntro[1024] = {0}; 				
						TUChar pszContent[256] = {0};
						TUChar pszRepasteTitle[256] = {0};				
						TUChar pszDateTime[32] = {0};				
						TUChar* pDateTime = NULL;
						TUChar pszNType[8] = {0};
						TUChar pszUpNum[8] = {0};					
						Int32 ItemHeight = 0;
						Int32 ItemWidth = 0;				
						TRectangle Rc_Temp;
						TUChar* pTempTitle = NULL;
						TUChar* pTempContent = NULL;						
						TRectangle rect;				
						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);						
						lpItem->SetIndicatorType(itNone);

						Int32 CoolBarDiffTop = rect.Y() - Rc_CoolBarList.Y();//coolbarlist 距界面顶部的值	
						TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[nIndex].ntype);
						Int32 nType = TUString::StrAToI(pszNType);

						//动态类型图标
						Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);								
						const TBitmap * pBmp = TResource::LoadConstBitmap(GetIconIDByType(nType,(char *)Response->news[nIndex].ntypename));
						TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
						TRectangle Rc_Icon(KX_News_TYPE_ICON_X, CoolBarDiffTop + KX_News_TYPE_ICON_Y, KX_News_TYPE_ICON_W, KX_News_TYPE_ICON_H);
						pImage1->SetBounds(&Rc_Icon);
						//pImage1->SetBitmapByResId(GetIconIDByType(TUString::StrAToI(pszNType),(char *)Response->news[nIndex].ntypename));
						pImage1->SetBitmap(pBmp);
						ItemWidth = ItemWidth + KX_News_TYPE_ICON_X + KX_News_TYPE_ICON_W + KX_News_ITEM_W_SPACE;

						TUString::StrUtf8ToStrUnicode(pszUpNum , (const Char *)Response->news[nIndex].upnum);
						if(TUString::StrAToI(pszUpNum) != 0)
						{
							//动态赞图标
							Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
							const TBitmap * pPraiseBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_praise);
							TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
							TRectangle Rc_Icon(ItemWidth, CoolBarDiffTop +KX_News_PRAISE_ICON_Y, KX_News_PRAISE_ICON_W, KX_News_PRAISE_ICON_H);
							pImage1->SetBounds(&Rc_Icon);
							pImage1->SetBitmap(pPraiseBmp);
							pImage1->Show(TRUE);
							ItemWidth = ItemWidth + KX_News_PRAISE_ICON_W + KX_News_ITEM_W_SPACE;
						}

						if(Response->news[nIndex].star == 1)
						{
							//动态机构图标
							Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
							const TBitmap * pStarBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_star);
							TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
							TRectangle Rc_Icon(ItemWidth, CoolBarDiffTop +KX_News_STAR_ICON_Y, KX_News_STAR_ICON_W, KX_News_STAR_ICON_H);
							pImage1->SetBounds(&Rc_Icon);
							pImage1->SetBitmap(pStarBmp);

							ItemWidth = ItemWidth + KX_News_STAR_ICON_W + KX_News_ITEM_W_SPACE;
						}

						//好友姓名
						TUString::StrUtf8ToStrUnicode(pszFName , (const Char *)Response->news[nIndex].fname);
						Int32 nLabelFnameId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						NewsFnameCtrlID[m_nNewsItemCount] = nLabelFnameId;//save fname ctrl ID
						TRichView* pFnameLabel = static_cast<TRichView*>(GetControlPtr(nLabelFnameId));
						TRectangle Rc_FnameLabel(ItemWidth, CoolBarDiffTop + KX_News_FNAME_Y, KX_News_FNAME_W, KX_News_FNAME_H);
						pFnameLabel->SetBounds(&Rc_FnameLabel);
						objFontType = pFnameLabel->GetFont();
						objFontType.Create(FONT_NAME, FONT_NAME);
						pFnameLabel->SetFont(objFontType); 
						pFnameLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 255));
						pFnameLabel->SetColor(CTL_COLOR_TYPE_BACK, LTBLUE);

						pFnameLabel->SetWordWrapAttr(FALSE);
						pFnameLabel->SetTransparent(TRUE);
						pFnameLabel->SetEnabled(TRUE);
						pFnameLabel->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pFnameLabel->SetMaxVisibleLines(1, TRUE);

						pFnameLabel->SetCaption(pszFName,FALSE);
						pFnameLabel->GetBounds(&Rc_Temp);

						ItemWidth = ItemWidth + Rc_Temp.Width()+ KX_News_ITEM_W_SPACE;

						//动态简介		
						if(nType == KX_NewsUploadPhoto || nType == KX_NewsRepaste)
						{
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);						
						}
						else
						{
							if(GetStringIDByType(nType,(char *)Response->news[nIndex].ntypename)!= 0)
							{
								TUString::StrCopy(pszIntro,TResource::LoadConstString(GetStringIDByType(nType,(char *)Response->news[nIndex].ntypename)));		
							}
							else
							{
								TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							}
						}

						//for test
						//TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);

						ItemHeight = KX_News_INTRO_Y;

						Int32 nLabeIntrolId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pIntroLabel = static_cast<TLabel*>(GetControlPtr(nLabeIntrolId));
						pIntroLabel->SetAutoSize(FALSE);
						TRectangle Rc_IntroLabel(ItemWidth, ItemHeight + CoolBarDiffTop, SCR_W-ItemWidth-KX_News_ITEM_W_SPACE, KX_News_INTRO_H+KX_News_ITEM_H_SPACE);
						pIntroLabel->SetBounds(&Rc_IntroLabel);
						objFontType = pIntroLabel->GetFont();
						objFontType.Create(FONT_CONTENT, FONT_CONTENT);
						pIntroLabel->SetFont(objFontType);
						pIntroLabel->SetCaption(pszIntro,FALSE);
						//pIntroLabel->SetColor(CTL_COLOR_TYPE_FORE, RGB(143,166,177));
						//pIntroLabel->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
						pIntroLabel->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;
						ItemHeight = _AddMoreLabel(lpItem,pIntroLabel,objFontType,pszIntro,ItemHeight,CoolBarDiffTop,Rc_Temp);


						/*CTL_CLASS_RICHVIEW TRichView
						pIntroLabel->SetWordWrapAttr(FALSE);
						pIntroLabel->SetTransparent(TRUE);
						pIntroLabel->SetEnabled(FALSE);
						pIntroLabel->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pIntroLabel->SetMaxVisibleLines(1, TRUE);
						pIntroLabel->Scroll(1,winScrollLeft);
						*/

						//具体的动态标题，内容部分					
						if(nType == KX_NewsVote || nType == KX_NewsPostDiary)
						{					
							//title
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							pTempTitle = GetTitleByType(nType, pTempTitle, pszIntro);
							if( pTempTitle && TUString::StrCompare(TUString::StrTrim(pTempTitle),TUSTR_Kx_NULL) != 0 )
							{
								Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								SaveCtrlIDByType(nType,nTitleId,m_nNewsItemCount);
								TRichView* pTitle = static_cast<TRichView*>(GetControlPtr(nTitleId));
								TRectangle Rc_Content(KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop, KX_News_CONTENT_W, KX_News_CONTENT_H);
								pTitle->SetBounds(&Rc_Content);
								objFontType = pTitle->GetFont();
								objFontType.Create(FONT_CONTENT, FONT_CONTENT);
								pTitle->SetFont(objFontType); 
								pTitle->SetCaption(pTempTitle,FALSE); 				
								pTitle->SetTransparent(TRUE);
								pTitle->SetEnabled(TRUE);

								pTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
								pTitle->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);

								pTitle->SetWordWrapAttr(FALSE);
								pTitle->SetTransparent(TRUE);
								pTitle->SetEnabled(TRUE);
								pTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pTitle->SetMaxVisibleLines(1, TRUE);

								pTitle->GetBounds(&Rc_Temp);
								ShowAsShort(pTitle, pTempTitle,objFontType);

								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;								
							}
						}
						else
						{
#if 0
							Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pTitle = static_cast<TLabel*>(GetControlPtr(nTitleId));
							TRectangle Rc_Content(KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop - (Rc_Temp.Height() + KX_News_ITEM_H_SPACE), KX_News_CONTENT_W, KX_News_CONTENT_H);
							pTitle->SetBounds(&Rc_Content);
							objFontType = pTitle->GetFont();
							objFontType.Create(KX_News_FONT_SIZE_CONTENT, KX_News_FONT_SIZE_CONTENT);
							pTitle->SetFont(objFontType); 
							//pTitle->SetCaption(pTempTitle,FALSE); 				
							pTitle->SetTransparent(TRUE);
							pTitle->SetEnabled(TRUE);

							pTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
							pTitle->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
							pTitle->GetBounds(&Rc_Temp);

							//ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;
#endif

						}

						if(nType == KX_NewsPostDiary)
						{						
							//content
							memset(pszIntro, 0, sizeof(pszIntro));
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							pTempContent = GetContentByType(nType, pTempContent, pszIntro);
							if( pTempContent && TUString::StrCompare(TUString::StrTrim(pTempContent),TUSTR_Kx_NULL) != 0 )
							{
								Int32 nContentId = CtrlAddItemToCoolBarList_Lable(this, lpItem, KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop, KX_News_CONTENT_W, FONT_MIDDLE, pTempContent);
								SaveCtrlIDByType(nType,nContentId,m_nNewsItemCount,1);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));//TRichView
								pContent->GetBounds(&Rc_Temp);
								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;								
							}
						}
						else if(nType == KX_NewsUpdateStatus || nType == KX_NewsMergeRecord)
						{						
							//content
							memset(pszIntro, 0, sizeof(pszIntro));
							TUString::StrUtf8ToStrUnicode(pszIntro , (const Char *)Response->news[nIndex].intro);
							pTempContent = GetContentByType(nType, pTempContent, pszIntro);
							if( pTempContent && TUString::StrCompare(TUString::StrTrim(pTempContent),TUSTR_Kx_NULL) != 0 )
							{
								Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);//CTL_CLASS_RICHVIEW
								SaveCtrlIDByType(nType,nContentId,m_nNewsItemCount,1);
								TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));//TRichView
								TRectangle Rc_Content(KX_News_CONTENT_X, ItemHeight + CoolBarDiffTop, KX_News_CONTENT_W, KX_News_CONTENT_H);
								//pContent->SetAutoSize(FALSE);
								pContent->SetBounds(&Rc_Content);
								objFontType = pContent->GetFont();
								objFontType.Create(FONT_CONTENT, FONT_CONTENT);
								pContent->SetFont(objFontType); 
								//pContent->SetCaption(TUString::StrTrimUnVisible(pTempContent),FALSE);//StrTrim

								//pContent->SetWordWrapAttr(TRUE);
								//pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								//pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);

								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(TRUE);

								pContent->SetWordWrapAttr(FALSE);
								pContent->SetTransparent(TRUE);
								pContent->SetEnabled(TRUE);
								pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pContent->SetMaxVisibleLines(1, TRUE);

								pContent->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
								pContent->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);
								pContent->GetBounds(&Rc_Temp);

								ShowAsShort(pContent, pTempContent,objFontType);


								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;								
							}
						}


						//动态内容部分

						if(Response->news[nIndex].nSize_imglist != 0)
						{
							int i = 0;
							int thumnailCount = (Response->news[nIndex].nSize_imglist<KX_News_ITEM_THUMBNAIL_COUNT_MAX)?Response->news[nIndex].nSize_imglist:KX_News_ITEM_THUMBNAIL_COUNT_MAX;
							for(i = 0; i < thumnailCount; i++)
							{
								KaiXinAPICommon_DownloadPhoto(Response->news[nIndex].imglist[i].thumbnail, this->GetWindowHwndId(), nThumImgIndex );

								//动态类型图片
								nThumbnailImage[nThumImgIndex] = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);
								NewsThumbnailCtrlID[m_nNewsItemCount][i] = nThumbnailImage[nThumImgIndex];//save thumbnail ID
								TUString::StrUtf8ToStrUnicode(pszNType , (const Char *)Response->news[nIndex].ntype);				
								pThumbnailImage[nThumImgIndex] = static_cast<TImage*>(GetControlPtr(nThumbnailImage[nThumImgIndex]));
								TRectangle Rc_ThumbnailImage(KX_News_THUMBNAIL_X + i*(KX_News_THUMBNAIL_W+KX_News_ITEM_H_SPACE),ItemHeight + CoolBarDiffTop, KX_News_THUMBNAIL_W, KX_News_THUMBNAIL_H);
								pThumbnailImage[nThumImgIndex]->SetBounds(&Rc_ThumbnailImage);
								pThumbnailImage[nThumImgIndex]->SetBitmapByResId(APP_KA_ID_BITMAP_Default);

								nThumImgIndex++;
							}
							ItemHeight = ItemHeight + KX_News_THUMBNAIL_H + KX_News_ITEM_H_SPACE;				
						}					

						if(Response->news[nIndex].nSize_replist != 0)
						{
							int i = 0;
							int RepasteCountMax = (Response->news[nIndex].nSize_replist < KX_News_ITEM_REPASTE_COUNT_MAX)? Response->news[nIndex].nSize_replist:KX_News_ITEM_REPASTE_COUNT_MAX;//显示转帖数
							for(i = 0; i < RepasteCountMax; i++)
							{
								//动态转帖标题
								TUString::StrUtf8ToStrUnicode(pszRepasteTitle, (const Char *)Response->news[nIndex].replist[i].title);
								Int32 nRepasteTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
								NewsRepasteCtrlID[m_nNewsItemCount][i] = nRepasteTitleId;//save repaste ctrl
								TRichView* pRepasteTitle = static_cast<TRichView*>(GetControlPtr(nRepasteTitleId));
								Int32 nRepasteTitleY = ItemHeight + CoolBarDiffTop;
								TRectangle Rc_Content(KX_News_REPASTE_X, nRepasteTitleY, KX_News_REPASTE_W, KX_News_REPASTE_H);
								pRepasteTitle->SetBounds(&Rc_Content);
								objFontType = pRepasteTitle->GetFont();
								objFontType.Create(FONT_CONTENT, FONT_CONTENT);
								pRepasteTitle->SetFont(objFontType); 
								pRepasteTitle->SetCaption(pszRepasteTitle,FALSE); 				
								//pRepasteTitle->SetAutoSize(TRUE);

								pRepasteTitle->SetWordWrapAttr(FALSE);
								pRepasteTitle->SetTransparent(TRUE);
								pRepasteTitle->SetEnabled(TRUE);
								pRepasteTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
								pRepasteTitle->SetMaxVisibleLines(1, TRUE);

								pRepasteTitle->SetColor(CTL_COLOR_TYPE_FORE, RGB(132,165,189));
								pRepasteTitle->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);								
								pRepasteTitle->SetTransparent(TRUE);
								pRepasteTitle->SetEnabled(TRUE);

								pRepasteTitle->GetBounds(&Rc_Temp);

								ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;
							}
						}

#if 0
						TUString::StrUtf8ToStrUnicode(pszContent, (const Char *)Response->news[nIndex].title);
						Int32 nContentId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pContent = static_cast<TRichView*>(GetControlPtr(nContentId));
						Int32 nContentY = ItemHeight + CoolBarDiffTop;
						TRectangle Rc_Content(KX_News_CONTENT_X, nContentY, KX_News_CONTENT_W, KX_News_CONTENT_H);
						pContent->SetBounds(&Rc_Content);
						objFontType = pContent->GetFont();
						objFontType.Create(KX_News_FONT_SIZE_CONTENT, KX_News_FONT_SIZE_CONTENT);
						pContent->SetFont(objFontType); 
						pContent->SetCaption(pszContent,FALSE);
						pContent->SetCaption(L"content content",FALSE); 				
						pContent->SetWordWrapAttr(TRUE);
						pContent->SetTransparent(TRUE);
						pContent->SetEnabled(FALSE);
						pContent->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pContent->SetFrameWidth(2);//just for test
						pContent->SetMaxVisibleLines(pContent->GetLinesCount(), TRUE);
						pContent->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_SPACE;
#endif

						//动态日期
						cUnixTime_ConvertUnixTimeToFormatString(Response->news[nIndex].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pDateTime );
						TUString::StrUtf8ToStrUnicode(pszDateTime, (const Char *)Response->news[nIndex].stime);
						Int32 nTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 0, 0);
						TLabel* pTime = static_cast<TLabel*>(GetControlPtr(nTimeId));
						TRectangle Rc_Time(KX_News_STIME_X, ItemHeight + CoolBarDiffTop, KX_News_STIME_W, KX_News_STIME_H);
						pTime->SetBounds(&Rc_Time);
						objFontType = pTime->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pTime->SetFont(objFontType); 
						//pTime->SetCaption(pDateTime,FALSE);
						pTime->SetCaption(pszDateTime,FALSE);
						pTime->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
						//pTime->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN);					
						pTime->GetBounds(&Rc_Temp);
						if(pDateTime) 
						{
							delete[] pDateTime; 
							pDateTime = NULL;
						}

						ItemHeight = ItemHeight + Rc_Temp.Height() + KX_News_ITEM_H_SPACE;


						lpItem->SetHeight(ItemHeight);

					}
				}
			}
			nIndex++;
			m_nNewsItemCount++;
		}
		lpRowList->EndUpdate();

		if (pCoolBarList)
		{
			pCoolBarList->Update();
		}

		//this->DrawWindow();
		this->UpdateWindow(0);
	}

	return TRUE;
}

//创建页面下方Selection Button部分，必须有3个成员变量来保存ButtonID, 
/*
Int32 m_nAllBtnID;//全部
Int32 m_nImportantBtnID;//重要
Int32 m_nStarBtnID;//机构

*/
#if(LCD_SIZE == LCD_HVGA )
#define SELECTION_BUTTON_X		(1)
#define SELECTION_CAPTION_Y		(12)
#elif(LCD_SIZE == LCD_WVGA )
#define SELECTION_BUTTON_X		(0)
#define SELECTION_CAPTION_Y		(18)
#endif
#define SELECTION_BUTTON_Y		(TITLEBAR_H)
#define SELECTION_BUTTON_W	((SCR_W-SELECTION_BUTTON_X*2)/3)
#define SELECTION_BUTTON_H		(TOP_TAB_H)

Int32 TUpdateFriendsNewsForm::_CreateSelectionButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(100,50,150,30); //初始(left, top, w, h)
	TFont tFont(stdFont);
	Int32 CaptionX = 0;

	//use to selection buttons ID
	m_nAllBtnID = 0;//全部
	m_nImportantBtnID = 0;//重要
	m_nStarBtnID = 0;//机构

	//创建3个页面对应的按钮
	const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Selections_Normal_Bg);//APP_KA_ID_BITMAP_news
	const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Selections_Selected_Bg);
	
	//全部
	//当前list为全部，所以图标都是选中图片			
	obBtnRec.SetRect(SELECTION_BUTTON_X, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);

	TMaskButton* pAllBtn =new TMaskButton;
	if(pAllBtn->Create(this))
	{
		pAllBtn->SetBounds(&obBtnRec); 	
		m_nAllBtnID = pAllBtn->GetId();//save button ID
		//pAllBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pAllBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(TOP_TAB_H-pImgDown->GetHeight())/2); 
		pAllBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(TOP_TAB_H-pImgDown->GetHeight())/2);
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_AllNews), tFont))/2;
		pAllBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_AllNews),CaptionX, SELECTION_CAPTION_Y);
		pAllBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
		//SetFocus(m_nAllBtnID);//不要highlight到头像
	}
	else
	{
		bnRetCod ++;
	}

	//重要	
	obBtnRec.SetRect(SELECTION_BUTTON_X+SELECTION_BUTTON_W, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);

	TMaskButton* pImportantBtn =new TMaskButton;;
	if(pImportantBtn->Create(this))
	{
		pImportantBtn->SetBounds(&obBtnRec);		
		m_nImportantBtnID = pImportantBtn->GetId();//save button ID
		//pImportantBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pImportantBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(TOP_TAB_H-pImgNormal->GetHeight())/2);	
		pImportantBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(TOP_TAB_H-pImgDown->GetHeight())/2);
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_AllNews), tFont))/2;
		pImportantBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_ImportantNews),CaptionX, SELECTION_CAPTION_Y);
		pImportantBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	else
	{
		bnRetCod ++;
	}


	//机构
	obBtnRec.SetRect(SELECTION_BUTTON_X+SELECTION_BUTTON_W*2, SELECTION_BUTTON_Y, SELECTION_BUTTON_W, SELECTION_BUTTON_H);
	TMaskButton* pStarBtn =new TMaskButton;;
	if(pStarBtn->Create(this))
	{
		pStarBtn->SetBounds(&obBtnRec);		
		m_nStarBtnID = pStarBtn->GetId();//save button ID
		//pStarBtn->SetMaskImage(pImgNormal,pImgNormal,pImgNormal);
		pStarBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(TOP_TAB_H-pImgNormal->GetHeight())/2);	
		pStarBtn->SetSelImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(TOP_TAB_H-pImgDown->GetHeight())/2);		
		CaptionX = (SELECTION_BUTTON_W - GetShowAllStringWidth((TUChar*)TResource::LoadConstString(APP_KA_ID_STRING_AllNews), tFont))/2;
		pStarBtn->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_StarNews),CaptionX, SELECTION_CAPTION_Y);
		pStarBtn->SetColor(RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE,RGB_COLOR_WHITE);
	}
	else
	{
		bnRetCod ++;
	}

	return bnRetCod;
}

Int32 TUpdateFriendsNewsForm::_ChangeBtnImage(KX_NewsShowType ShowType)
{	
	TMaskButton* pAllBtn = static_cast<TMaskButton*>(GetControlPtr(m_nAllBtnID));
	TMaskButton* pImportantBtn = static_cast<TMaskButton*>(GetControlPtr(m_nImportantBtnID));
	TMaskButton* pStarBtn = static_cast<TMaskButton*>(GetControlPtr(m_nStarBtnID));

	const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Selections_Normal_Bg);//APP_KA_ID_BITMAP_news
	const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Selections_Selected_Bg);

	switch(ShowType)
	{
	case KX_NewsShowAll:
		{
			if(pAllBtn)
			{
				pAllBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);
				pAllBtn->Draw();
			}
			if(pImportantBtn)
			{
				pImportantBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
				pImportantBtn->Draw();
			}
			if(pStarBtn)
			{
				pStarBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
				pStarBtn->Draw();
			}
			break;
		}
	case KX_NewsShowImportant:
		{				
			if(pImportantBtn)
			{
				pImportantBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
			}
			if(pAllBtn)
			{
				pAllBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2); 
				pAllBtn->Draw();
			}
			if(pStarBtn)
			{
				pStarBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);	
				pStarBtn->Draw();
			}

			break;
		}			
	case KX_NewsShowStar:
		{
			if(pStarBtn)
			{
				pStarBtn->SetImage(pImgDown,(SELECTION_BUTTON_W-pImgDown->GetWidth())/2,(SELECTION_BUTTON_H-pImgDown->GetHeight())/2);	
				pStarBtn->Draw();
			}
			if(pAllBtn)
			{
				pAllBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2); 
				pAllBtn->Draw();
			}
			if(pImportantBtn)
			{
				pImportantBtn->SetImage(pImgNormal,(SELECTION_BUTTON_W-pImgNormal->GetWidth())/2,(SELECTION_BUTTON_H-pImgNormal->GetHeight())/2);
				pImportantBtn->Draw();
			}
			break;
		}
	default:
		{
			break;
		}
	}
	return 0;
}

//创建页面下方Tab Button部分，必须有5个成员变量来保存ButtonID, 
/*
Int32 m_nNewsBtnID;//动态
Int32 m_nFriendsBtnID;//好友
Int32 m_nInfosBtnID;//我的地盘
Int32 m_nAppsBtnID;//组件
Int32 m_nMoreBtnID;//更多

*/

Int32 TUpdateFriendsNewsForm::_CreateTabButtons(TApplication* pApp)
{
	Int32 bnRetCod = 0; 
	TRectangle obBtnRec(100,50,150,30); //初始(left, top, w, h)

	//use to save buttons ID
	m_nNewsBtnID = 0;//动态
	m_nFriendsBtnID = 0;//好友
	m_nInfosBtnID = 0;//我的地盘
	m_nAppsBtnID = 0;//组件
	m_nMoreBtnID = 0;//更多


	//创建5个页面对应的按钮
	const TBitmap * pImgBG = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_btn_bg);

	//动态	
	const TBitmap * pImgNormal1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_news_over);
	const TBitmap * pImgDown1 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_news_over);	
	obBtnRec.SetRect(0, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pNewsBtn =new TMaskButton;;
	if(pNewsBtn->Create(this))
	{
		pNewsBtn->SetBounds(&obBtnRec);		
		m_nNewsBtnID = pNewsBtn->GetId();//save button ID
		pNewsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pNewsBtn->SetImage(pImgNormal1, (BOTTOM_TAB_W-pImgNormal1->GetWidth())/2, (BOTTOM_TAB_H-pImgNormal1->GetHeight())/2);	
		pNewsBtn->SetSelImage(pImgDown1, (BOTTOM_TAB_W-pImgDown1->GetWidth())/2, (BOTTOM_TAB_H-pImgDown1->GetHeight())/2);	
	}
	else
	{
		bnRetCod ++;
	}

	//好友	
	const TBitmap * pImgNormal2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friend);
	const TBitmap * pImgDown2 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_friend_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pFriendsBtn =new TMaskButton;;
	if(pFriendsBtn->Create(this))
	{
		pFriendsBtn->SetBounds(&obBtnRec);		
		m_nFriendsBtnID = pFriendsBtn->GetId();//save button ID
		pFriendsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pFriendsBtn->SetImage(pImgNormal2,(BOTTOM_TAB_W-pImgNormal2->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal2->GetHeight())/2);	
		pFriendsBtn->SetSelImage(pImgDown2,(BOTTOM_TAB_W-pImgDown2->GetWidth())/2,(BOTTOM_TAB_H-pImgDown2->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}


	//我的地盘

	//当前form为我的地盘，所以图标都是选中图片			
	const TBitmap * pImgNormal3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_info);//APP_KA_ID_BITMAP_info
	const TBitmap * pImgDown3 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_info_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W*2, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);
	TMaskButton* pInfosBtn =new TMaskButton;;
	if(pInfosBtn->Create(this))
	{
		pInfosBtn->SetBounds(&obBtnRec);		
		m_nInfosBtnID = pInfosBtn->GetId();//save button ID
		pInfosBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pInfosBtn->SetImage(pImgNormal3,(BOTTOM_TAB_W-pImgNormal3->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal3->GetHeight())/2);	
		pInfosBtn->SetSelImage(pImgDown3,(BOTTOM_TAB_W-pImgDown3->GetWidth())/2,(BOTTOM_TAB_H-pImgDown3->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}

	//组件
	const TBitmap * pImgNormal4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_module);
	const TBitmap * pImgDown4 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_module_over);
	obBtnRec.SetRect(BOTTOM_TAB_W*3, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H),BOTTOM_TAB_W, BOTTOM_TAB_H);
	TMaskButton* pAppsBtn =new TMaskButton;;
	if(pAppsBtn->Create(this))
	{
		pAppsBtn->SetBounds(&obBtnRec);		
		m_nAppsBtnID = pAppsBtn->GetId();//save button ID
		pAppsBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pAppsBtn->SetImage(pImgNormal4,(BOTTOM_TAB_W-pImgNormal4->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal4->GetHeight())/2);	
		pAppsBtn->SetSelImage(pImgDown4,(BOTTOM_TAB_W-pImgDown4->GetWidth())/2,(BOTTOM_TAB_H-pImgDown4->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}

	//更多
	const TBitmap * pImgNormal5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_more);
	const TBitmap * pImgDown5 = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_more_over);	
	obBtnRec.SetRect(BOTTOM_TAB_W*4, (SCR_H - STATUSBAR_H - BOTTOM_TAB_H), BOTTOM_TAB_W, BOTTOM_TAB_H);

	TMaskButton* pMoreBtn =new TMaskButton;;
	if(pMoreBtn->Create(this))
	{
		pMoreBtn->SetBounds(&obBtnRec);		
		m_nMoreBtnID = pMoreBtn->GetId();//save button ID
		pMoreBtn->SetMaskImage(pImgBG,pImgBG,pImgBG);
		pMoreBtn->SetImage(pImgNormal5,(BOTTOM_TAB_W-pImgNormal5->GetWidth())/2,(BOTTOM_TAB_H-pImgNormal5->GetHeight())/2);	
		pMoreBtn->SetSelImage(pImgDown5,(BOTTOM_TAB_W-pImgDown5->GetWidth())/2,(BOTTOM_TAB_H-pImgDown5->GetHeight())/2);					
	}
	else
	{
		bnRetCod ++;
	}			

	return bnRetCod;
}

Boolean TUpdateFriendsNewsForm::_IsShow(Int32 nIndex,KX_NewsShowType ShowType)
{
	Boolean bShow = FALSE;

	switch(ShowType)
	{
	case KX_NewsShowAll:
		{
			bShow = TRUE;			
			break;
		}
	case KX_NewsShowImportant://重要劢态：照片、日志、记录、状态变更劢态
		{				
			//char *TypeName = GetTypeNameByTypeID(TUString::StrAToI(pszNType));
			if(//(strcmp(KxNewsIcons[KX_NewsUploadPhoto].nTypename,Response->news[nIndex].ntypename)==0)||
				(strcmp(GetTypeNameByTypeID(KX_NewsPostDiary),Response->news[nIndex].ntypename)==0)
				||(strcmp(GetTypeNameByTypeID(KX_NewsMergeRecord),Response->news[nIndex].ntypename)==0)
				||(strcmp(GetTypeNameByTypeID(KX_NewsUpdateStatus),Response->news[nIndex].ntypename)==0)			
				)
			{
				bShow = TRUE;
			}
			break;
		}			
	case KX_NewsShowStar:
		{
			if(Response->news[nIndex].star == 1)
			{
				bShow = TRUE;
			}
			break;
		}
	default:
		{
			bShow = TRUE;
			break;
		}					
	}

	return bShow;
}

Boolean TUpdateFriendsNewsForm::_OnLstPreDrawEvent(TApplication* pApp, EventType * pEvent)
{
	Boolean     bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_GuiControlIndication:
		{
			ControlEvent_Normal_Type *pCtrlEvent = reinterpret_cast<ControlEvent_Normal_Type*>(pEvent);
			switch (pCtrlEvent->functionNo)
			{
			case CTL_EVENT_CONTROL_DRAW:
				{
					_SetDataToCtrls(pApp);				
#if 0					
					if (m_bDrawFirstTime)
					{
						if (_DrawCtrl())
						{
							m_bDrawFirstTime = FALSE;
						}
					}
					else
					{
						_DrawCurrent();
					}
#endif					
					pCtrlEvent->result = 1;
					bHandled = TRUE;
				}
				break;
			}
		}
		break;	
	}
	return bHandled;

}	

/** 处理CoolBarList的PreDraw事件，绘制CoolBarList的背景图
*
* \param pApp   TApplication指针
* \param pEvent EventType指针
* \return 是否已处理
*/
Boolean TUpdateFriendsNewsForm::_OnCoolBarListPreDraw(TApplication * pApp, EventType * pEvent)
{
	Boolean       bHandled = FALSE;
	CblstPreDrawEventType *pEraseEvent = reinterpret_cast< CblstPreDrawEventType* >(pEvent);
	TCoolBarList *pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(pEraseEvent->CoolBarListCtrlID));

    switch(pEraseEvent->CoolBarListCtrlID)
    {
    case APP_KA_ID_UpdateFriendsNewsForm_AllNewsCoolBarList:
        {
            TCtrlDC    dcCtrl(GetControlPtr(pEraseEvent->CoolBarListCtrlID));
            TRectangle rc(pEraseEvent->Rect);
            TRectangle ReNewRc;
			

            dcCtrl.BeginPaint();
            if (pEraseEvent && idsDown == pEraseEvent->Status)
            {	
            	ReNewRc.SetRect(rc.X()+1,rc.Y()+1,rc.Width()-2,rc.Height()-2);
				dcCtrl.DrawRectangleEx(&ReNewRc, 0, WHITE);
				
            }
			
			// 画边线
			Int32 nItemCount = 0;
			TBarRow *pRow = (TBarRow*)pEraseEvent->pRow;
			if(pRow)
			{
				nItemCount = pRow->Count();
			}

			if (nItemCount - 1 ==  ((TBarListItem*)pEraseEvent->pItem)->GetIndex())
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(),RGB_COLOR_LIGHTGRAY);
				dcCtrl.DrawLineEx(rc.X(), rc.Bottom()-1, rc.Right(), rc.Bottom()-1, RGB_COLOR_LIGHTGRAY);
			}
			else
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(),RGB_COLOR_LIGHTGRAY);
				//dcCtrl.DrawLineEx(rc.X(), rc.Bottom(), rc.Right(), rc.Bottom(), RGB_COLOR_LIGHTGRAY);
			}
			
            dcCtrl.EndPaint();    

            pEraseEvent->Result = 1;
            bHandled = TRUE;
        }
        break;
    }

    return bHandled;
}

Int32 TUpdateFriendsNewsForm::_AddMoreLabel(TBarListItem* lpItem, TLabel* pIntroLabel, TFont objFontType,TUChar* pChar,Int32 ItemHeight, Int32 CoolBarDiffTop, TRectangle Rc_Temp)
{
	Int32 nStrLen = 0;
	Int32 nIntroLabelStrLen = 0;
	TUChar pszTemp[128] = {0};
	Int32 nItemHeight = ItemHeight; 

	nStrLen = TUString::StrLen(pChar);									  
	nIntroLabelStrLen = objFontType.WordWrapNoLF(pChar, Rc_Temp.Width());

	if (nIntroLabelStrLen < nStrLen)
	{
		//Add one more label to show
		TUString::StrNCopy(pszTemp,pChar,nIntroLabelStrLen);
		pIntroLabel->SetCaption(pszTemp,FALSE);

		Int32 nLabeIntrolIdM = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
		TLabel* pIntroLabelM = static_cast<TLabel*>(GetControlPtr(nLabeIntrolIdM));
		pIntroLabelM->SetAutoSize(FALSE);
		TRectangle Rc_IntroLabelM(KX_News_REPASTE_X, ItemHeight + CoolBarDiffTop, SCR_W-KX_News_REPASTE_X-KX_News_ITEM_W_SPACE, KX_News_INTRO_H+KX_News_ITEM_H_SPACE);
		pIntroLabelM->SetBounds(&Rc_IntroLabelM);
		objFontType = pIntroLabelM->GetFont();
		objFontType.Create(FONT_CONTENT, FONT_CONTENT);
		pIntroLabelM->SetFont(objFontType);
		//pIntroLabelM->SetColor(CTL_COLOR_TYPE_FORE, RGB(143,166,177));
		//pIntroLabelM->SetColor(CTL_COLOR_TYPE_BACK, LTGREEN); 					
		pIntroLabelM->SetCaption(pChar+nIntroLabelStrLen,FALSE);
		pIntroLabelM->GetBounds(&Rc_Temp);

		nItemHeight = ItemHeight + KX_News_INTRO_H + KX_News_ITEM_H_SPACE;
		nItemHeight = _AddMoreLabel(lpItem,pIntroLabelM,objFontType,pChar+nIntroLabelStrLen,nItemHeight,CoolBarDiffTop,Rc_Temp);
	}
	else
	{
		//needn't add more label to show
	}

	return nItemHeight;
}
void TUpdateFriendsNewsForm::SaveCtrlIDByType(Int32 nType,Int32 Id, Int32 ItemIndex,Int32 CtlType)//CtlType = 0 代表TitleCtrl，CtlType = 1 代表内容contentCtrl
{

	if(nType >= KX_NewsTypeStart && nType <= KX_NewsTypeEnd)
	{
		switch(nType)
		{
		case KX_NewsPostDiary:
			{
				if(CtlType)
				{
					NewsDiaryContCtrlID[ItemIndex] = Id;
				}
				else
				{
					NewsDiaryTitleCtrlID[ItemIndex] = Id;
				}
				break;
			}
		case KX_NewsUpdateStatus:
			{		
				NewsStatusContCtrlID[ItemIndex] = Id;
				break;
			}
		case KX_NewsMergeRecord:
			{
				NewsRecordCtrlID[ItemIndex] = Id;
				break;
			}
		case KX_NewsVote:
			{
				NewsVoteTitleCtrlID[ItemIndex] = Id;//目前只有title
				break;
			}		
		}
	}
}	

#if 0
Int32 TUpdateFriendsNewsForm::ShowCoolList(KX_NewsShowType ShowType)
{
	TPanel* pTPanel = NULL;
	TCoolBarList* pTCoolBarList = NULL;	
	Int32 ShowCoollistID = 0;
	pTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_AllFriendsNewsCoolPanel));	
	pTCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_AllNewsCoolBarList));	
	if(pTPanel&&pTCoolBarList)
	{
		if(ShowType == KX_NewsShowAll)
		{
			pTPanel->Show(TRUE);
			ShowCoollistID = APP_KA_ID_UpdateFriendsNewsForm_AllNewsCoolBarList;
		}
		else
		{
			pTPanel->Hide(TRUE);
		}
	}

	pTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_ImportantFriendsNewsCoolPanel));	
	if(pTPanel)
	{
		if(ShowType == KX_NewsShowImportant)
		{
			pTPanel->Show(TRUE);
			ShowCoollistID = APP_KA_ID_UpdateFriendsNewsForm_ImportantNewsCoolBarList;
		}			
		else
		{
			pTPanel->Hide(TRUE);
		}
	}

	pTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_StarFriendsNewsCoolPanel));	
	if(pTPanel)
	{
		if(ShowType == KX_NewsShowStar)
		{
			pTPanel->Show(TRUE);
			ShowCoollistID = APP_KA_ID_UpdateFriendsNewsForm_StarNewsCoolBarList;
		}		
		else
		{
			pTPanel->Hide(TRUE);
		}
	}

	this->DrawWindow();
	return ShowCoollistID;
}
#endif

#if 0//变成公用函数
//根据字体计算出显示整个字串所需的像素
Int32 TUpdateFriendsNewsForm::GetShowAllStringWidth(TUChar* pCaptionString, TFont objFontType)
{
	Int32 Width = 1;
	Int32 tempWidth = 0;//从像素0开始
	Int32 nStringLen = TUString::StrLen(pCaptionString);
	Int32 nShowLen = 0;
	do
	{
		tempWidth ++;
		nShowLen = objFontType.WordWrapNoLF(TUString::StrTrimUnVisible(pCaptionString), tempWidth);

	}while(nShowLen < nStringLen);

	return tempWidth;
}


//如果内容太长显示不完则用省略号表示
void  TUpdateFriendsNewsForm::ShowAsShort(TCtrl *pTCtrl, TUChar* pCaptionString, TFont objFontType)
{
	TRectangle Rc_TCtrl;
	pTCtrl->GetBounds(&Rc_TCtrl);

	int nStrLen = TUString::StrLen(TUString::StrTrimUnVisible(pCaptionString));
	int nShortWidth = GetShowAllStringWidth((TUChar*)L"...",objFontType);
	int nShowLen = objFontType.WordWrapNoLF(TUString::StrTrimUnVisible(pCaptionString), Rc_TCtrl.Width()- nShortWidth*2);

	if (nShowLen < nStrLen)
	{
		//Add one more label to show
		TUChar pszTemp[128] = {0};	
		TUString::StrNCopy(pszTemp,TUString::StrTrimUnVisible(pCaptionString),nShowLen);
		TUString::StrCat(pszTemp,(TUChar*)L"...");
		pTCtrl->SetCaption(pszTemp,FALSE);
	}
	else
	{
		pTCtrl->SetCaption(TUString::StrTrimUnVisible(pCaptionString),FALSE);//StrTrim
	}
}
#endif
Int32 TUpdateFriendsNewsForm::_DoMenuItem(TApplication* pApp, EventType * pEvent)
{
	TRectangle MenuItemRect(MENU_X, MENU_Y, MENU_WIDTH, MENU_ITEM_HEIGHT);

	int nIndex = 0;
	while( nIndex < ARR_SIZE(NewsMenuItem))
	{
		MenuItemRect.SetRect(MENU_X, MENU_Y + (MENU_ITEM_HEIGHT * nIndex), MENU_WIDTH,MENU_ITEM_HEIGHT);
		if(MenuItemRect.IsInRect(pEvent->sParam1, pEvent->sParam2))
		{
			switch(nIndex)
			{
			case KX_NewsMenuUploadPhoto:
				{
					this->DrawWindow();
					PopBox_UploadPhoto(pApp, this->GetWindowHwndId());
					break;
				}
			case KX_NewsMenuPostDiary:
				{
					PostNotifyMsgDataType in_msgData;
					MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

					in_msgData.nCtrlId = 0;
					in_msgData.nHwndId = this->GetWindowHwndId();
					in_msgData.nEditType = NewDiaryEdit;

					TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
					break;								
				}
			case KX_NewsMenuWriteRecord:
				{
					PostNotifyMsgDataType in_msgData;
					MemSet(&in_msgData, 0, sizeof(PostNotifyMsgDataType));

					in_msgData.nCtrlId = 0;
					in_msgData.nHwndId = this->GetWindowHwndId();
					in_msgData.nEditType = NewRecordEdit;

					TAppEditForm *pComm1 = new TAppEditForm( pApp, in_msgData);
					break;								
				}
			default:
				break;
			}
			break;//跳出while循环	
		}
		nIndex++;
	}

	return 1;
}
Int32 TUpdateFriendsNewsForm::_DrawPopMenu(TApplication* pApp)
{
	TRectangle MenuRect(MENU_X, MENU_Y, MENU_WIDTH, MENU_HEIGHT);
	TFont font;					
	FrameBitsType tfbt;
	TDC cTdcDraw(this);

	// 画矩形
	tfbt.word = 0;
	tfbt.bits.cornerDiam = 2;
	tfbt.bits.width = 1;
	tfbt.bits.threeD = 1;	
	cTdcDraw.DrawRectangleFrameEx(tfbt.word ,&MenuRect,GRAY);

	// 填充矩形区域
	cTdcDraw.DrawRectangleEx(&MenuRect,0,WHITE);

	//画菜单内容
	int nIndex = 0;
	while( nIndex < ARR_SIZE(NewsMenuItem))
	{	
		const TBitmap * pBmp = TResource::LoadConstBitmap(NewsMenuItem[nIndex].nMenuIconID);
		cTdcDraw.DrawBitmapXY(pBmp, MenuRect.X() + MENU_ITEM_SPACE_X, MenuRect.Y() + (MENU_ITEM_HEIGHT * nIndex) + MENU_ITEM_SPACE_Y, GUI_API_STYLE_ALIGNMENT_LEFT);

		const TUChar * sMenuCaption =  TResource::LoadConstString(NewsMenuItem[nIndex].nMenuCaptionID);
		Int32 nLen = TUString::StrLen(sMenuCaption);
		font.Create(FONT_MENU_ITEM, FONT_MENU_ITEM);
		cTdcDraw.SetFont(font);	
		cTdcDraw.DrawTextXYEx(sMenuCaption, nLen, MenuRect.X() + MENU_ITEM_SPACE_X + pBmp->GetWidth() + MENU_ITEM_SPACE_X, MenuRect.Y()+ (MENU_ITEM_HEIGHT * nIndex) + MENU_ITEM_SPACE_Y, RGB(0,162,255),
			RGBA(0, 0, 0, 0), font, GUI_API_STYLE_ALIGNMENT_LEFT);

		if(nIndex != sizeof(NewsMenuItem)/sizeof(sKxNewsMenuItem)-1)
		{
			cTdcDraw.DrawLineEx(MenuRect.X(), MenuRect.Y() + MENU_ITEM_HEIGHT * (nIndex + 1), MenuRect.Right(), MenuRect.Y() + MENU_ITEM_HEIGHT * (nIndex + 1), RGB(212,212,212));
		}
		nIndex++;
	}

	this->ReleaseFocus();
	IsTherePoPMenu = TRUE;
	return 1;
}

#if 0
Int32 TUpdateFriendsNewsForm::_CreatePopMenu(TApplication* pApp)
{
	TRectangle obBtnRec(100,200,96,130);	//初始(left, top, w, h)

	//创建TPanel: 
	TPanel *pTPanel =new TPanel;	
	obBtnRec.SetRect(100,200,96,127);
	if(pTPanel->Create(this))
	{		
		pTPanel->SetBounds(&obBtnRec);	
		m_nMenuTPanelID = pTPanel->GetId();//Save TPanel ID

		pTPanel->SetTransparent(FALSE);//设置透明
		pTPanel->SetFrameWidth(0);//设置边框	
		pTPanel->SetEnabled(TRUE);
		//pTPanel->Hide(TRUE);//创建后先不显示

		//创建  TCoolBarList
		TCoolBarList *pTCoolBarList =new TCoolBarList;	
		obBtnRec.SetRect(0,0,96-3,120);
		if(pTCoolBarList->Create(pTPanel))
		{	
			TRectangle Rc_CoolBarList;
			pTCoolBarList->SetEnabled(TRUE);
			pTCoolBarList->SetBounds(&obBtnRec);	
			pTCoolBarList->GetBounds(&Rc_CoolBarList);

			m_nMenuCoolBarID = pTCoolBarList->GetId();

			//添加一行
			TBarRow *lpRow = NULL;         //<!CoolBarList中Row行指针     
			TBarRowList *lpRowList = pTCoolBarList->Rows(); 
			if (lpRowList)  
			{ 
				lpRowList->BeginUpdate();    
				// 添加一行Row 
				lpRow = NULL; //第一次添加在最前面 
				lpRow = lpRowList->InsertRow(lpRow);     //插入一行 
				if(lpRow) 
				{ 
					//lpRow->SetCaption(TResource::LoadConstString(APP_CR_ID_STRING_String1020)); 
				} 
				lpRowList->EndUpdate(); 
			}

			int nIndex = 0;
			while( nIndex < sizeof(NewsMenuItem)/sizeof(sKxNewsMenuItem) )
			{
				//add Item
				TBarListItem* lpItem = NULL;
				if(lpRow)
				{
					lpItem = lpRow->AppendItem();
					if (lpItem)  
					{
						TFont objFontType;									
						TRectangle Rc_Temp;						
						TRectangle rect;				
						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);						
						lpItem->SetIndicatorType(itNone);

						Int32 CoolBarDiffTop = rect.Y() - Rc_CoolBarList.Y();//coolbarlist 距界面顶部的值	
						Int32 ItemWidth = 10;

						//菜单类型图标
						Int32 nIconId = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0);								
						const TBitmap * pBmp = TResource::LoadConstBitmap(NewsMenuItem[nIndex].nMenuIconID);
						TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nIconId));
						TRectangle Rc_Icon(ItemWidth, CoolBarDiffTop + 10, pBmp->GetWidth(), pBmp->GetHeight());
						pImage1->SetBounds(&Rc_Icon);
						pImage1->SetBitmap(pBmp);
						ItemWidth = ItemWidth + pBmp->GetWidth() + 5;												

						//菜单标题
						Int32 nMenuCaptionId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pMenuCaption = static_cast<TRichView*>(GetControlPtr(nMenuCaptionId));
						TRectangle Rc_MenuCaption(ItemWidth, CoolBarDiffTop + 6, 70, 16);//Rc_CoolBarList.Width() - pBmp->GetWidth() -ItemWidth -5
						pMenuCaption->SetBounds(&Rc_MenuCaption);
						objFontType = pMenuCaption->GetFont();
						objFontType.Create(14, 14);
						pMenuCaption->SetFont(objFontType); 
						pMenuCaption->SetColor(CTL_COLOR_TYPE_FORE, LTBLUE);
						pMenuCaption->SetColor(CTL_COLOR_TYPE_BACK, LTBLUE);
						pMenuCaption->SetEnabled(FALSE);
						pMenuCaption->SetWordWrapAttr(FALSE);
						pMenuCaption->SetTransparent(TRUE);
						pMenuCaption->SetEnabled(TRUE);
						pMenuCaption->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pMenuCaption->SetMaxVisibleLines(1, TRUE);

						pMenuCaption->SetEnabled(FALSE);
						pMenuCaption->SetCaption(TResource::LoadConstString(NewsMenuItem[nIndex].nMenuCaptionID),FALSE);
						pMenuCaption->GetBounds(&Rc_Temp);				

						lpItem->SetHeight(40);

					}
				}
				nIndex++;
			}

		}
	}
	this->DrawTitle();
	return 1;
}

Int32 TUpdateFriendsNewsForm::ShowPopMenu()
{
	TPanel *pTPanel = static_cast<TPanel*>(GetControlPtr(m_nMenuTPanelID)); 
	TPanel *pFriendsNewsTPanel = static_cast<TPanel*>(GetControlPtr(APP_KA_ID_UpdateFriendsNewsForm_FriendsNewsPanel)); 

	if(pTPanel&&pFriendsNewsTPanel)
	{		
		if(pTPanel->IsVisible())
		{			
			pTPanel->Hide(TRUE);
			pTPanel->SetEnabled(TRUE);
			pFriendsNewsTPanel->SetEnabled(FALSE);
			this->DrawWindow();
		}			
		else
		{
			this->DrawWindow();
			pTPanel->SetEnabled(FALSE);
			pFriendsNewsTPanel->SetEnabled(TRUE);
			pTPanel->Show(TRUE);
			this->ReleaseFocus();
		}

	}	
	return 0;
}
#endif


