/*!
*@FileName: KaiXinApp_UpdateFriendsNews.h
*@Author: GoZone
*@Date:
*@Log: 	Author 			Date 		Description
*
*@section Copyright
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#ifndef  __KAIXINAPI_UPDATEFRIENDSNEWS_H__
#define  __KAIXINAPI_UPDATEFRIENDSNEWS_H__

#include "KaiXinAPI.h"
#include "KaiXinAPI_PhotoDetail.h"

//动态最大条数
#define KX_News_ITEM_COUNT_MAX		(50)

//缩略图片最大数
#define KX_News_ITEM_THUMBNAIL_COUNT_MAX (6)//每条最多显示6个缩略图
#define KX_News_THUMBNAIL_TOTAL_COUNT_MAX (KX_News_ITEM_COUNT_MAX*KX_News_ITEM_THUMBNAIL_COUNT_MAX)

#define KX_News_ITEM_REPASTE_COUNT_MAX (10)//每条最多显示10个转帖


//动态用户Image Index
#define KX_News_USER_IMAGE_INDEX	(KX_News_THUMBNAIL_TOTAL_COUNT_MAX+1)

//动态类型
typedef enum
{
	KX_NewsTypeStart,		//0:其他类型添加到后面			
	KX_NewsUploadPhoto = 1,		//1：照片、
	KX_NewsPostDiary = 2,		//2：日记、
	KX_NewsUpdateStatus = 3,		//3：更新状态
	KX_NewsVote = 1016,		//1016：投票、
	KX_NewsMergeRecord = 1018,	//1018：记录、
	KX_NewsRepaste = 1088,	//1088：转帖、


	//其他类型（不属于某种应用，比如好友头像更新等）
	KX_NewsUpdateLogo,		//更新头像
	KX_NewsUpdateInfo,		//更新个人信息
	KX_NewsPraise,			//赞
	KX_NewsTypeEnd,
}KX_NewsType;

typedef enum
{
	KX_NewsShowAll = 0,			//全部劢态：重要劢态以及转帖、组件消息劢态
	KX_NewsShowImportant = 1,	//重要劢态：照片、日志、记录、状态变更劢态
	KX_NewsShowStar = 2,		//机构劢态：机构用户的劢态合集

	KX_NewsShowMenu = 3,		//按发布显示菜单按钮
	KX_NewsShowTypeEnd,
}KX_NewsShowType;

typedef enum
{			
	KX_NewsMenuUploadPhoto = 0,		//1：传照片
	KX_NewsMenuPostDiary = 1,		//2：写日记
	KX_NewsMenuWriteRecord = 2,		//3：写记录

	KX_NewsMenuTypeEnd,
}KX_NewsMenuType;


typedef struct
{
	KX_NewsType		nType;
	char			nTypename[32];
	int 			nIconID;
	int 			nStringID;
}sKxNewsIcon;

typedef struct
{
	KX_NewsMenuType	nMenuItemIndex;//菜单序号
	int 			nMenuCaptionID;//菜单对应的字串ID
	int 			nMenuIconID;//菜单对应的图标
}sKxNewsMenuItem;

typedef struct
{
	char pid[32];
	char title[256];
	char thumbnail[256];
	char large[256];
	char privacy[8];
	char albumid[32];
	char albumtitle[256];
	char picnum[16];
	int pos;
	int ctime;
}UpdateFriendsNews_imglist;

typedef struct
{
	char id[32];
	char title[256];
	char type[32];
}UpdateFriendsNews_replist;

typedef struct
{
	char fuid[32];
	char fname[64];
	char flogo[256];
	char ntype[8];
	char ntypename[32];
	char intro[256];
	int ctime;
	char stime[32];
	char thumbnail[256];
	double id;
	char idString[32];//add because vote's id return as string	
	int star;
	char cnum[8];
	char upnum[8];	
	int  nSize_imglist;  //Save the array size by code_gen tools. 
	UpdateFriendsNews_imglist*  imglist;
	int  nSize_replist;  //Save the array size by code_gen tools. 
	UpdateFriendsNews_replist*  replist;
}UpdateFriendsNews_news;

typedef struct
{
	int ret;
	char uid[32];
	int n;
	int  nSize_news;  //Save the array size by code_gen tools. 
	UpdateFriendsNews_news*  news;
}tResponseUpdateFriendsNews;


extern void* KaiXinAPI_UpdateFriendsNews_JsonParse(char *text);
extern Int32 GetIconIDByType(Int32 nType, char *nTypeName);
extern Int32 GetStringIDByType(Int32 nType, char *nTypeName);
extern char* GetTypeNameByTypeID(Int32 nType);
extern TUChar * GetTitleByType(Int32 nType, TUChar * pDest, const TUChar * pSrcStr);
extern TUChar * GetContentByType(Int32 nType, TUChar * pDest, const TUChar * pSrcStr);

class TUpdateFriendsNewsForm : public TWindow
{
public:
	TUpdateFriendsNewsForm(TApplication* pApp, KX_NewsShowType nShowType = KX_NewsShowAll);
	virtual ~TUpdateFriendsNewsForm(void);
	virtual Boolean EventHandler(TApplication * appP, EventType * eventP);

private:

	// define private method here
	Boolean _OnWinInitEvent(TApplication * pApp, EventType * pEvent);
	Boolean _OnWinClose(TApplication * pApp, EventType * pEvent);
	Boolean _OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent);
	Boolean _OnCoolCtrlSelected(TApplication * pApp, Int32 nCtrlID);
	Boolean _OnCtrlFocusEvent(TApplication* pApp, EventType* pEvent);	
	Boolean _OnCtrlKillFocusEvent(TApplication* pApp, EventType* pEvent);
	void _SetDataToCtrls(TApplication* pApp);	
	Int32 _SetNewsCoolBarList(TApplication* pApp, KX_NewsShowType ShowType = KX_NewsShowAll);//默认全部显示
	Int32 _CreateSelectionButtons(TApplication* pApp);
	Int32 _ChangeBtnImage(KX_NewsShowType ShowType);
	Int32 _CreateTabButtons(TApplication* pApp);
	Boolean _IsShow(Int32 nIndex, KX_NewsShowType ShowType);
	Boolean _OnLstPreDrawEvent(TApplication* pApp, EventType * pEvent);
	Boolean _OnCoolBarListPreDraw(TApplication * pApp, EventType * pEvent);
	Int32 _AddMoreLabel(TBarListItem* lpItem, TLabel* pIntroLabel, TFont objFontType,TUChar* pChar,Int32 ItemHeight,Int32 CoolBarDiffTop, TRectangle Rc_Temp);	
	void SaveCtrlIDByType(Int32 nType,Int32 Id,Int32 ItemIndex, Int32 CtlType = 0);//CtlType = 0 代表TitleCtrl，CtlType = 1 代表内容contentCtrl
	//Int32 ShowCoolList(KX_NewsShowType ShowType);
	Int32 _DrawPopMenu(TApplication* pApp);
	Int32 _DoMenuItem(TApplication* pApp, EventType * pEvent);
private:
	// define private data member here
	tResponseUpdateFriendsNews* Response;

	//use to selection buttons ID
	Int32 m_nAllBtnID;//全部
	Int32 m_nImportantBtnID;//重要
	Int32 m_nStarBtnID;//机构

	//use to save buttons ID
	Int32 m_nNewsBtnID;//动态
	Int32 m_nFriendsBtnID;//好友
	Int32 m_nInfosBtnID;//我的地盘
	Int32 m_nAppsBtnID;//组件
	Int32 m_nMoreBtnID;//更多

	//use to save whether there is pop up menu or not
	Boolean IsTherePoPMenu;

	//记录动态条数
	Int32	m_nNewsItemCount;

	//用户小图标
	TBitmap* pUserImageBmp;

	//缩略图
	Int32 nThumbnailImage[KX_News_THUMBNAIL_TOTAL_COUNT_MAX];//每条最多显示6个缩略图
	TImage* pThumbnailImage[KX_News_THUMBNAIL_TOTAL_COUNT_MAX];
	TBitmap* pThumbnailBmp[KX_News_THUMBNAIL_TOTAL_COUNT_MAX];
	Int32 nThumImgIndex;
	tPhotoDetail m_photodata;//用于保存被点击图片的相应数据

	Int32 nItemNewsIndex[KX_News_ITEM_COUNT_MAX];//记录每个item对应的Jason news index

	//Fname Ctrls
	Int32 NewsFnameCtrlID[KX_News_ITEM_COUNT_MAX];

	//Record content Ctrls
	Int32 NewsRecordCtrlID[KX_News_ITEM_COUNT_MAX];

	//Diary title Ctrls
	Int32 NewsDiaryTitleCtrlID[KX_News_ITEM_COUNT_MAX];
	//Diary content Ctrls
	Int32 NewsDiaryContCtrlID[KX_News_ITEM_COUNT_MAX];

	//Vote title Ctrls
	Int32 NewsVoteTitleCtrlID[KX_News_ITEM_COUNT_MAX];

	//Status content Ctrls
	Int32 NewsStatusContCtrlID[KX_News_ITEM_COUNT_MAX];

	//Repaste Ctrls
	Int32 NewsRepasteCtrlID[KX_News_ITEM_COUNT_MAX][KX_News_ITEM_REPASTE_COUNT_MAX];

	//Thumbnail Ctrls
	Int32 NewsThumbnailCtrlID[KX_News_ITEM_COUNT_MAX][KX_News_ITEM_THUMBNAIL_COUNT_MAX];

	Int32 PreSelectRichViewID;//保存前一个被选中的richview  ID		


	//退出按钮ID
	Int32 m_ExitBtn;

	//显示类型,用于刷新
	KX_NewsShowType m_ShowType;
};

#endif
