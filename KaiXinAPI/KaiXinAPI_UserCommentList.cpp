/*!
* \file	 KaiXinApp_UserCommentList.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 用户评论列表
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/
#include "KaiXinAPICommon.h"


void* KaiXinApp_UserCommentList_JsonParse(char *text)
{
	cJSON *json;
	cJSON *tmp;
	tResponseUserCommentList*  Response = new tResponseUserCommentList;
	memset(Response, 0 , sizeof(tResponseUserCommentList));

	json=cJSON_Parse(text);

	tmp = cJSON_GetObjectItem(json,"ret");
	if (tmp)
	{
		Response->ret = tmp->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		tmp = cJSON_GetObjectItem(json,"uid");
		if (tmp)
		{
			if(tmp->valueint > 0)
				sprintf(Response->uid, "%d", tmp->valueint);
			else
				STRCPY_Ex(Response->uid, tmp->valuestring);
		}
		tmp = cJSON_GetObjectItem(json,"zan_string");
		if (tmp)
		{
			STRCPY_Ex(Response->zan_string, tmp->valuestring);
		}
		tmp = cJSON_GetObjectItem(json,"upcnt");
		if (tmp)
		{
			STRCPY_Ex(Response->upcnt, tmp->valuestring);
		}
		tmp = cJSON_GetObjectItem(json,"selfup");
		if (tmp)
		{
			Response->selfup = tmp->valueint;
		}
		tmp = cJSON_GetObjectItem(json,"oid");
		if (tmp)
		{
			if(tmp->valuedouble > 0)
				DoubleToChar(tmp->valuedouble, Response->oid);
			else
				STRCPY_Ex(Response->oid, tmp->valuestring);
		}
		tmp = cJSON_GetObjectItem(json,"type");
		if (tmp)
		{
			STRCPY_Ex(Response->type, tmp->valuestring);
		}
		tmp = cJSON_GetObjectItem(json,"ouid");
		if (tmp)
		{
			if(tmp->valuedouble > 0)
				DoubleToChar(tmp->valuedouble, Response->ouid);
			else		
				STRCPY_Ex(Response->ouid, tmp->valuestring);
		}
		tmp = cJSON_GetObjectItem(json,"n");
		if (tmp)
		{
			Response->n = tmp->valueint;
		}

		tmp = cJSON_GetObjectItem(json,"total");
		if (tmp)
		{
			Response->total = tmp->valueint;
		}

		tmp = cJSON_GetObjectItem(json, "comments");
		if(tmp)
		{
			int nSize = 0, i = 0;
			nSize = cJSON_GetArraySize(tmp);
			Response->nCommentCount = nSize;
			if( nSize != 0 )
			{
				Response->comments = NULL;
				Response->comments = (UserCommentList_comments*) malloc(sizeof( UserCommentList_comments ) * nSize);
				memset(Response->comments, 0 , sizeof(UserCommentList_comments) * nSize );
			}

			while( i < Response->n )
			{
				cJSON *Item = NULL, *pTemp = NULL;
				Item = cJSON_GetArrayItem(tmp,i);
				pTemp = cJSON_GetObjectItem(Item, "flogo");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].flogo, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "thread_cid");
				if(pTemp)
				{
					if(pTemp->valuedouble > 0)
						DoubleToChar(pTemp->valuedouble, Response->comments[i].thread_cid);
					else
						STRCPY_Ex(Response->comments[i].thread_cid, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "fuid");				
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].fuid, pTemp->valuestring);
					Response->comments[i].fuidInt = pTemp->valueint;////KX_ReceivedAnObjectComments 得到的fuid是整形					
				}				

				pTemp = cJSON_GetObjectItem(Item, "fname");				
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].fname, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "mtype");
				if(pTemp)
				{
					if(IsNullString(pTemp->valuestring))
						sprintf(Response->comments[i].mtype, "%d", pTemp->valueint);
					else				
						STRCPY_Ex(Response->comments[i].mtype, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "cnum");
				if(pTemp)
				{
					Response->comments[i].cnum = pTemp->valueint;
				}

				pTemp = cJSON_GetObjectItem(Item, "unread");
				if(pTemp)
				{
					Response->comments[i].unread = pTemp->valueint;
				}

				pTemp = cJSON_GetObjectItem(Item, "abscont");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].abscont, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "ctime");
				if(pTemp)
				{
					Response->comments[i].ctime = pTemp->valueint;
				}

				pTemp = cJSON_GetObjectItem(Item, "mainthread");
				if(pTemp)
				{
					Response->comments[i].mainthread= pTemp->valueint;
				}

				pTemp = cJSON_GetObjectItem(Item, "strctime");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].strctime, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "fuid_last");
				if(pTemp)
				{
					Response->comments[i].fuid_last = pTemp->valueint;
				}

				pTemp = cJSON_GetObjectItem(Item, "fname_last");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].fname_last, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "abscont_last");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].abscont_last, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "ctime_last");
				if(pTemp)
				{
					Response->comments[i].ctime_last = pTemp->valueint;
				}

				pTemp = cJSON_GetObjectItem(Item, "strctime_last");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].strctime_last, pTemp->valuestring);
				}

				//new added
				pTemp = cJSON_GetObjectItem(Item, "title");				
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].title, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "thumbnail");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].thumbnail, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "appid");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].appid, pTemp->valuestring);
				}

				pTemp = cJSON_GetObjectItem(Item, "id");
				if(pTemp)
				{
					STRCPY_Ex(Response->comments[i].id, pTemp->valuestring);
				}

				i++;
			}
		}		
	}
	else
	{

	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TUserCommentListForm::TUserCommentListForm(TApplication* pApp):TWindow(pApp)
{
	m_nCommentListNum = 0;
	m_pResponse = NULL;

	m_nCtlIDCount = 0;
	m_nReplyBtnID = 0;

	m_CurrSelRow = 0;

	m_nAppState = AppUserComment;

	for(int i=0; i<COMMENTLSIT_MAXITEM; i++)
	{
		pBmp[i] = NULL;	
	}

	Create(APP_KA_ID_CommentListForm);
}

TUserCommentListForm::TUserCommentListForm(TApplication* pApp, AppCommentListType appCommentListType):TWindow(pApp)
{
	m_nCommentListNum = 0;
	m_pResponse = NULL;

	m_nCtlIDCount = 0;
	m_nReplyBtnID = 0;

	m_CurrSelRow = 0;
	m_nAppState = AppUserComment;

	m_appCommentListType = appCommentListType;

	for(int i=0; i<COMMENTLSIT_MAXITEM; i++)
	{
		pBmp[i] = NULL;	
	}

	Create(APP_KA_ID_CommentListForm);

}


// 析构函数
TUserCommentListForm::~TUserCommentListForm(void)
{
	KaiXinAPICommon_DownloadCancelByHwndId(this->GetWindowHwndId());

	for(int i=0; i<COMMENTLSIT_MAXITEM; i++)
	{
		if( pBmp[i] != NULL)
		{
			pBmp[i]->Destroy();
			pBmp[i] = NULL; 								
		}
	}

	delete m_pResponse;
}


// 窗口事件处理
Boolean TUserCommentListForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{			
			_OnWinClose(pApp, pEvent);

			bHandled = TRUE;
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			GetBounds(&rcBack);

			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-44, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case EVENT_ListPreDraw:
		{
			bHandled = _OnLstPreDrawEvent(pEvent);
		}
		break;
	case EVENT_WinPaint:
		{
			DrawWindow();
			bHandled = TRUE;
		}
		break;		
	case EVENT_CoolListViewCustomDraw:
		{
			bHandled = _OnCoolListViewCustomDrawEvent(pApp, pEvent);
		}
		break;
	case EVENT_WinPreCloseNotify:
		{

		}
		break;		
		//下载进度消息
	case MSG_DL_THREAD_PROCESS:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));

			bHandled = TRUE;
			break;
		}

		//下载完成消息
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PhotoDownload:
				{
					TBitmap* pDownLoadBitmap = NULL;
					pDownLoadBitmap = LoadImgByPath(notifyData.pszFilePath);

					if(pDownLoadBitmap)
					{
						switch(m_nAppState)
						{
						case AppUserComment:
							{
								TCoolListView* pCoolListView;
								Int32 nRowIndex =0;

								pCoolListView = static_cast< TCoolListView* >(this->GetControlPtr(APP_KA_ID_CommentListForm_UserCommentListView));

								if(pCoolListView)
								{

									nRowIndex = notifyData.nParam;

									if(nRowIndex < pCoolListView->GetRowsCount())
									{
										TPatternItem	  *pPattern;
										pPattern = pCoolListView->GetPatternItem(0);

										if(pPattern)
										{
											TRectangle RC = pPattern->GetRect();

											if( pBmp[notifyData.nParam] != NULL)
											{
												pBmp[notifyData.nParam]->Destroy();
												pBmp[notifyData.nParam] = NULL; 								
											}

											pBmp[notifyData.nParam] = TBitmap::Create(RC.Width(), RC.Height(), pDownLoadBitmap->GetDepth());
											pBmp[notifyData.nParam]->QuickZoom(pDownLoadBitmap, FALSE, TRUE,RGBA(100, 160, 160, 255));
											pCoolListView->SetItemImage(nRowIndex, 0, pBmp[notifyData.nParam]);
											pCoolListView->Draw(CLSTV_BODY);//CLSTV_DATA_AREA
										}										
									}													
								}				
							}								
							break;
						case AppUserCommentReply:
							{
								TImage* pTImage;

								pTImage = static_cast< TImage* >(this->GetControlPtr(m_iaTImageID[0]));
								if(pTImage)
								{
									pTImage->SetBitmap(pBmp[notifyData.nParam]);
									pTImage->Draw();
								}
							}					
							break;
						default :
							break;	
						}		
						pDownLoadBitmap->Destroy();
						pDownLoadBitmap = NULL;
					}
					break;
				}
			case KX_ReplyComment:
				{

					break;
				}				
			}
			break;
		}
	case MSG_POST_THREAD_NOTIFY:
		{
			PostNotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(PostNotifyMsgDataType));

			if(notifyData.nEditType == ReplyUserCommentEdit)
			{
				Set_Url_Params(KX_ReplyComment, "replycont", (char*)notifyData.PostMsgData.commentdata.pszCommentContent);								
				Set_Url_Params(KX_ReplyComment, "fuid", (char*)notifyData.PostMsgData.commentdata.nId);	
				Set_Url_Params(KX_ReplyComment, "thread_cid", (char*)notifyData.PostMsgData.commentdata.nOuid);					

				KaiXinAPICommon_Download(KX_ReplyComment, this->GetWindowHwndId());			
			}

			bHandled = TRUE;
		}
		break;
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break; 
	default:

		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TUserCommentListForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;	

	TPanel* pTPanel;
	TCoolListView* pCoolListView;
	TPatternItem      *pPattern;
	TCListViewFontType objFontType;
	TRectangle obBtnRec(0,0,0,0);	//初始(left, top, w, h)

	Int32 firstRow = 1;//pEvent->lParam3;
	Int32 lastRow = 0;//firstRow + pEvent->lParam4;

	m_BackBtn = SetAppBackButton(this);

	SetTitleString(m_appCommentListType);
	SetCoolListNum(m_appCommentListType);	

	pTPanel = static_cast< TPanel* >(this->GetControlPtr(APP_KA_ID_CommentListForm_UserCommentPanel));
	pCoolListView = static_cast< TCoolListView* >(this->GetControlPtr(APP_KA_ID_CommentListForm_UserCommentListView));

	if(pTPanel)
	{
		obBtnRec.SetRect(0, TITLEBAR_H, SCR_W, SCR_H - STATUSBAR_H - TITLEBAR_H);
		pTPanel->SetBounds(&obBtnRec);
		pTPanel->SetFrameWidth(0);
	}

	if(pCoolListView)
	{			
		obBtnRec.SetRect(0, TITLEBAR_H, SCR_W, SCR_H - STATUSBAR_H - TITLEBAR_H);
		pCoolListView->SetBounds(&obBtnRec);
		pCoolListView->SetScrollMode(CTL_SCL_MODE_NONE);

		if(m_appCommentListType == ReceivedAnObjectCommentList) pCoolListView->SetRowsCount(1);
		else pCoolListView->SetRowsCount(m_nCommentListNum);


		//字体样式

		//name
		pPattern = pCoolListView->GetPatternItem(1);
		if (pPattern)
		{
			obBtnRec.SetRect(52,15,190,16);
			pPattern->SetRect(obBtnRec);
			objFontType = pPattern->GetFont();
			objFontType.font.Create(12, 12);
			objFontType.foreColor = RGB(0, 0, 255);

			pPattern->SetFont(objFontType); 

			objFontType.foreColor = RGB(0, 0, 255);
			pPattern->SetSelFont(objFontType); 
			//pPattern->SetWordWrap(TRUE);
		}

		//date time
		pPattern = pCoolListView->GetPatternItem(2);
		if (pPattern)
		{
			obBtnRec.SetRect(240,6,80,10);
			pPattern->SetRect(obBtnRec);		
			objFontType = pPattern->GetFont();
			objFontType.font.Create(10, 10);
			//objFontType.foreColor = RGB(123, 123, 123);

			pPattern->SetFont(objFontType);
			pPattern->SetSelFont(objFontType); 
		}

		//coment1
		pPattern = pCoolListView->GetPatternItem(3);
		if (pPattern)
		{	
			obBtnRec.SetRect(52,34,250,14);
			pPattern->SetRect(obBtnRec);		
			objFontType = pPattern->GetFont();
			objFontType.font.Create(14, 14);
			//objFontType.foreColor = RGB(123, 123, 123);

			pPattern->SetFont(objFontType);
			pPattern->SetSelFont(objFontType); 
		}

		//comment2
		pPattern = pCoolListView->GetPatternItem(4);
		if (pPattern)
		{	
			//objFont.Create(12, 0);
			objFontType = pPattern->GetFont();
			objFontType.font.Create(14, 14);
			//objFontType.foreColor = RGB(121, 154, 109);

			pPattern->SetFont(objFontType);   
			pPattern->SetSelFont(objFontType); 
		}

		//total
		pPattern = pCoolListView->GetPatternItem(5);
		if (pPattern)
		{
			//objFont.Create(12, 0);
			objFontType = pPattern->GetFont();
			objFontType.font.Create(12, 12);
			//objFontType.foreColor = RGB(121, 154, 109);

			pPattern->SetFont(objFontType);   
			pPattern->SetSelFont(objFontType); 
		}

		//image
		pPattern = pCoolListView->GetPatternItem(6);
		if (pPattern)
		{
			obBtnRec.SetRect(300,68,20,20);
			pPattern->SetRect(obBtnRec);
		}

		//qiao qiao hua
		pPattern = pCoolListView->GetPatternItem(7);
		if (pPattern)
		{
			//objFont.Create(12, 0);
			objFontType = pPattern->GetFont();
			objFontType.font.Create(8, 8);
			objFontType.foreColor = RGB(255, 0, 0);//红色字体

			pPattern->SetFont(objFontType);   
			pPattern->SetSelFont(objFontType); 
		}		

	}

	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TUserCommentListForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TUserCommentListForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	switch(pEvent->sParam1)
	{
	case RES_SYSTEM_WINDOW_TITLE_BUTTON_ID:
		{
			//Nothing to do 	
			break;
		}
	case APP_KA_ID_CommentListForm_UserCommentListView:
		{
			DrawWindow();
			if( pEvent->lParam3 == pEvent->lParam4 )
			{	   
				Int32			  nRowIndex ;//点击，选中的行
				TCoolListView	  *pCoolListView;


				nRowIndex	  = pEvent->lParam3;			
				pCoolListView = static_cast<TCoolListView*>(GetControlPtr(pEvent->sParam1));		
				ShowCommentDetail(this->m_appCommentListType, nRowIndex);

				bHandled = TRUE;
			}
		}
		break;	
	default:
		break;
	}	

	return bHandled;
}

Boolean TUserCommentListForm::_OnLstPreDrawEvent(EventType * pEvent)
{
	Boolean     bHandled = FALSE;
	switch( pEvent->sParam1 )
	{
	case APP_KA_ID_CommentListForm_UserCommentListView:
		{
			Int32 firstRow = pEvent->lParam3;
			Int32 lastRow = firstRow + pEvent->lParam4;
			TCoolListView* pCoolListView = static_cast< TCoolListView* >(GetControlPtr(pEvent->sParam1));

			const TBitmap* pTuPian = TBitmap::LoadResBitmap(APP_KA_ID_BITMAP_Default);
			//const TBitmap* pStar = TBitmap::LoadResBitmap(APP_KA_ID_BITMAP_more_favorite);
			const TBitmap* pGoToDetailIcon = TBitmap::LoadResBitmap(APP_KA_ID_BITMAP_triangle);		

			TUChar pszNameString[32+256];
			TUChar pszDateTimeString[32];
			TUChar pszContentString[1024];
			TUChar pszTotalString[32];

			TUChar pszMTypeString[32];
			TUChar pszTemp[256];			

			memset(pszNameString, 0, sizeof(pszNameString));
			memset(pszDateTimeString, 0, sizeof(pszDateTimeString));
			memset(pszContentString, 0, sizeof(pszContentString));
			memset(pszTotalString, 0, sizeof(pszTotalString));
			memset(pszMTypeString, 0, sizeof(pszMTypeString));
			memset(pszTemp, 0, sizeof(pszTemp));			

			TPatternItem      *pPattern;
			TCListViewFontType objFontType;
			int nStrLen = 0;
			int nLineStrLen = 0;

			if(pCoolListView && m_nCommentListNum != 0)
			{	
				pCoolListView->SetGridStyle(gsNone);
				pCoolListView->SetRowHeight(90);

				if( lastRow >= pCoolListView->GetRowsCount() )	
				{
					lastRow = pCoolListView->GetRowsCount();
				}

				for ( Int32 i = firstRow; i < lastRow; ++i )
				{
					pCoolListView->SetItemImage(i, 0, pTuPian);

					KaiXinAPICommon_DownloadPhoto(m_pResponse->comments[i].flogo, this->GetWindowHwndId(), i );

					TUString::StrUtf8ToStrUnicode(pszNameString , (const Char *)m_pResponse->comments[i].fname);	

					if(this->m_appCommentListType == ReceivedUserCommentList || this->m_appCommentListType == SentUserCommentList)
					{
						TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_UserCommentIs));										
					}
					else if(this->m_appCommentListType == SentCommentList)// || this->m_appCommentListType == FriendCommentList
					{
						TUString::StrUtf8ToStrUnicode(pszTemp ,(const Char *)m_pResponse->comments[i].title);
						TUString::StrCopy(pszNameString,pszTemp);
						TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_CommentIs));						

					}
					else
					{

						TUString::StrUtf8ToStrUnicode(pszTemp ,(const Char *)m_pResponse->comments[i].title);
						TUString::StrCat(pszNameString,pszTemp);
						TUString::StrCat(pszNameString,TResource::LoadConstString(APP_KA_ID_STRING_CommentIs));						
					}					

					pCoolListView->SetItemText( i, 1, pszNameString);//TUSTR_KaiXinjApp_Test_Title

					//ctime
					//TUString::StrIToA(pszDateTimeString , m_pResponse->comments[i].ctime);
					//pCoolListView->SetItemText( i, 2, pszDateTimeString);

					TUChar* pszDateTime = NULL;
					cUnixTime_ConvertUnixTimeToFormatString( m_pResponse->comments[i].ctime, KX_TIME_FORMAT_MM_DD_HH_MM, &pszDateTime );
					pCoolListView->SetItemText( i, 2, pszDateTime);
					if(pszDateTime) 
					{
						delete[] pszDateTime; 
						pszDateTime = NULL;
					}					

					//content
					TUString::StrUtf8ToStrUnicode( pszContentString , (const Char *)m_pResponse->comments[i].abscont );	
					pCoolListView->SetItemText( i, 3, pszContentString);

					pPattern = pCoolListView->GetPatternItem(3);
					if (pPattern)
					{
						objFontType = pPattern->GetFont();
						if (pszContentString)
						{
							nStrLen = TUString::StrLen(pszContentString);

							nLineStrLen = objFontType.font.WordWrapNoLF(pszContentString, pPattern->GetRect().Width());
							if (nLineStrLen < nStrLen)
							{
								pCoolListView->SetItemText(i, 4, pszContentString+nLineStrLen);
							}
							else
							{
								pCoolListView->SetItemText(i, 4, NULL);
							}
						}

					} 				

					//TUString::StrUtf8ToStrUnicode(pszContentString , (const Char *)m_pResponse->comments[i].abscont_last);
					//pCoolListView->SetItemText( i, 4, pszContentString);

					if(m_appCommentListType != FriendCommentList)
					{
						memset(pszTotalString, 0, sizeof(pszTotalString));
						memset(pszTemp, 0, sizeof(pszTemp));

						//total
						TUString::StrCat(pszTotalString,TResource::LoadConstString(APP_KA_ID_STRING_Total));
						//n
						TUString::StrIToA(pszTemp , m_pResponse->comments[i].cnum);
						TUString::StrCat(pszTotalString,pszTemp);						
						TUString::StrCat(pszTotalString,TResource::LoadConstString(APP_KA_ID_STRING_Items));

						pCoolListView->SetItemText( i, 5, pszTotalString);

					}
					//pCoolListView->SetItemImage(i, 6, pStar);				
					pCoolListView->SetItemImage(i, 6, pGoToDetailIcon); 


					TUString::StrUtf8ToStrUnicode(pszMTypeString , (const Char *)m_pResponse->comments[i].mtype);					
					if( TUString::StrAToI(pszMTypeString) )//悄悄话//m_pResponse->comments[i].mtype 
					{
						pCoolListView->SetItemText( i, 7, TUSTR_Kx_UserComment_QQH);					
					}
					else
					{
						pCoolListView->SetItemText( i, 7, TUSTR_Kx_Profile_None_Title);	//""空串				
					}
				}

			}
			else if(pCoolListView && (m_appCommentListType == ReceivedAnObjectCommentList))
			{

				TUString::StrUtf8ToStrUnicode(pszNameString , (const Char *)m_pResponse->zan_string);
				pCoolListView->SetItemText( 0, 1, pszNameString);//TUSTR_KaiXinjApp_Test_Title
			}
			bHandled  = TRUE;	

		}
		break;
	}	

	return bHandled;

}

Boolean TUserCommentListForm::_OnCoolListViewCustomDrawEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean                  bHandled;
	CLstvCustomDrawEventType *pDrawEvent;
	TCoolListView            *pCoolListView;

	bHandled = FALSE;

	switch(pEvent->sParam1)
	{
	case APP_KA_ID_CommentListForm_UserCommentListView:
		pDrawEvent = reinterpret_cast< CLstvCustomDrawEventType* >( pEvent );
		pCoolListView = static_cast<TCoolListView*>(GetControlPtr(pEvent->sParam1));

		// 需要重画行背景
		if( 2 == pDrawEvent->DrawType && pCoolListView) 
		{
			// 需要重画背景的是第几行，放在pDrawEvent->RowIndex中
			TRectangle	  rc(pDrawEvent->Rect);
			TCtrlDC 	  dcCtrl(pCoolListView);
			//TDC			dc(this);
			Int32		  nLeft;
			Int32		  nMid;
			Int32		  nRight;

			nLeft = -1;
			nMid  = -1;
			nRight = -1;

			dcCtrl.BeginPaint();



			dcCtrl.DrawBitmapXY(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_UserCommentListBG), rc.X(), rc.Y(),
				GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);


			// 画边线
			if (pCoolListView->GetRowsCount()-1 == pDrawEvent->RowIndex)
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Bottom(), rc.Right(), rc.Bottom()-1, RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.X(), rc.Bottom(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.Right(), rc.Y(), rc.Right(), rc.Bottom(), RGB(212,212,212));
			}
			else
			{
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.Right(), rc.Y(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Bottom(), rc.Right(), rc.Bottom(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.X(), rc.Y(), rc.X(), rc.Bottom(), RGB(212,212,212));
				dcCtrl.DrawLineEx(rc.Right(), rc.Y(), rc.Right(), rc.Bottom(), RGB(212,212,212));
			}				
#if 0

			// 给选中行贴背景图
			if (pDrawEvent->RowIndex == pCoolListView->GetCurrentRow())
			{
				dcCtrl.DrawBitmapXY(TResource::LoadConstBitmap(APP_SO_ID_BITMAP_over_left), rc.X(), rc.Y()+1,
					GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);
				dcCtrl.DrawBitmapXY(TResource::LoadConstBitmap(APP_SO_ID_BITMAP_over_right), rc.Right()-2, rc.Y()+1,
					GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);
				dcCtrl.DrawBitmapsH(TResource::LoadConstBitmap(APP_SO_ID_BITMAP_over_mid), rc.X()+2, rc.Y()+1, rc.Width()-4, 
					GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);		   
			}
			else
			{
				dcCtrl.DrawBitmapXY(TResource::LoadConstBitmap(APP_SO_ID_BITMAP_read_left), rc.X(), rc.Y()+1,
					GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);
				dcCtrl.DrawBitmapXY(TResource::LoadConstBitmap(APP_SO_ID_BITMAP_read_right), rc.Right()-2, rc.Y()+1,
					GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);
				dcCtrl.DrawBitmapsH(TResource::LoadConstBitmap(APP_SO_ID_BITMAP_read_mid), rc.X()+2, rc.Y()+1, rc.Width()-4, 
					GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP);	  
			}
#endif

			dcCtrl.EndPaint();

			pDrawEvent->Result = TRUE; // must set Result to TRUE

			bHandled = TRUE;
		}

		break;

	default:
		break;	
	}

	return bHandled;
}

Int32 TUserCommentListForm::_OnCommentReplyWinCreateControl(TApplication * pApp)
{
	Int32 bnRetCod = 0;	
	TPanel* pTPanel;
	TPanel* pTPanelNew;
	TPanel* pTPanelNew2;
	TButton* pTButton;
	TRectangle obBtnRec(100,50,150,30);	//初始(left, top, w, h)
	TFont tFont;

	TUChar pszNameString[32];
	TUChar pszDateTimeString[32];
	TUChar pszContentString[60];

	TUString::StrUtf8ToStrUnicode(pszNameString , (const Char *)m_pResponse->comments[m_CurrSelRow].fname);	
	TUString::StrCat(pszNameString, TUSTR_Kx_Colon); 

	//ctime
	TUString::StrIToA(pszDateTimeString , m_pResponse->comments[m_CurrSelRow].ctime);
	//content
	TUString::StrUtf8ToStrUnicode( pszContentString , (const Char *)m_pResponse->comments[m_CurrSelRow].abscont ); 

	pTPanel = static_cast< TPanel* >(this->GetControlPtr(APP_KA_ID_CommentListForm_UserCommentPanel));
	pTPanel->Hide(TRUE);

	//const TBitmap * pImgBg = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_UserCommentReplyBG);
	//SetBackGroundBitmap(pImgBg,0);

	//创建TPanel: CommentForm_CommentDetailPanel
	m_obContrl[m_nCtlIDCount] =new TPanel;	
	obBtnRec.SetRect(0, TITLEBAR_H, SCR_W, SCR_H - STATUSBAR_H - TITLEBAR_H);
	if(m_obContrl[m_nCtlIDCount]->Create(this))
	{		
		m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
		m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
		m_iaTPanelID[0] = m_obContrl[m_nCtlIDCount]->GetId();//Save TPanel ID
		m_obContrl[m_nCtlIDCount]->Show(TRUE);	
	}
	else
	{
		bnRetCod++;
	}
	m_nCtlIDCount++;

	//一下的控件都在TPanel中
	//创建Label 悄悄话

	pTPanelNew = static_cast< TPanel* >(this->GetControlPtr(m_iaTPanelID[0]));

	if(pTPanelNew)
	{	
		pTPanelNew->SetTransparent(TRUE);//设置透明

		pTPanelNew->SetFrameWidth(2);//设置边框

		m_obContrl[m_nCtlIDCount] =new TPanel;	
		obBtnRec.SetRect(0,0,SCR_W,300);
		if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew))
		{		
			m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
			m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
			m_iaTPanelID[1] = m_obContrl[m_nCtlIDCount]->GetId();//Save TPanel ID
			m_obContrl[m_nCtlIDCount]->Show(TRUE);	
		}
		else
		{
			bnRetCod++;
		}
		m_nCtlIDCount++;		

		pTPanelNew2 = static_cast< TPanel* >(this->GetControlPtr(m_iaTPanelID[1]));

		if(pTPanelNew2)
		{	
			pTPanelNew2->SetTransparent(TRUE);//设置透明

			pTPanelNew2->SetFrameWidth(2);//设置边框


			pTPanelNew2->SetScrollBar(CTL_SCL_MODE_VERTICAL);

			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(5,5,200,20);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{	
				TUChar pszMTypeString[32];

				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				TUString::StrUtf8ToStrUnicode(pszMTypeString , (const Char *)m_pResponse->comments[m_CurrSelRow].mtype);					
				if( TUString::StrAToI(pszMTypeString) )//悄悄话//m_pResponse->comments[i].mtype 
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_UserComment_QQH,FALSE);
				}
				else
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_Profile_None_Title,FALSE);
				}
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(16, 16);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(255, 0, 0));
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

			//创建TImage 头像
			m_obContrl[m_nCtlIDCount] =new TImage;		
			obBtnRec.SetRect(5,35,50,50);
			const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
				m_iaTImageID[0] = m_obContrl[m_nCtlIDCount]->GetId();//save TImage ID
				((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmap(pImgNormal);
				//((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmapByResId(APP_KA_ID_BITMAP_Default);
				m_obContrl[m_nCtlIDCount]->SetEnabled(TRUE);
				((TImage*)m_obContrl[m_nCtlIDCount])->SetTransVisible(TRUE);

				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;


			//创建姓名标签 for comment username
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(65+10,35,20,60);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				m_obContrl[m_nCtlIDCount]->SetCaption(pszNameString,FALSE);//TResource::LoadConstString()TUSTR_Kx_UserComment_QQH
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(16, 16);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 0));
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

			//创建日期标签 for comment datetime
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(200,35,60,100);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				m_obContrl[m_nCtlIDCount]->SetCaption(pszDateTimeString,FALSE);//TResource::LoadConstString()TUSTR_Kx_UserComment_QQH
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(15, 15);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;


			//创建  TRichView for content
			m_obContrl[m_nCtlIDCount] =new TRichView;	
			obBtnRec.SetRect(65+10,35+30,235,60);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(12, 12);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(111, 0, 255));
				m_obContrl[m_nCtlIDCount]->SetCaption(pszContentString,FALSE);//TResource::LoadConstString()
				m_obContrl[m_nCtlIDCount]->SetFrameWidth(2);

				//m_obContrl[m_nCtlIDCount]->SetCharSet();
				((TRichView*)m_obContrl[m_nCtlIDCount])->SetScrollBarMode(CTL_SCL_MODE_VERTICAL);
				((TRichView*)m_obContrl[m_nCtlIDCount])->SetBorderStyle(bsSingle, FALSE);
				m_obContrl[m_nCtlIDCount]->Show(TRUE);	
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;


#if 1
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(5,5,200+200*1,20);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{	
				TUChar pszMTypeString[32];

				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				TUString::StrUtf8ToStrUnicode(pszMTypeString , (const Char *)m_pResponse->comments[m_CurrSelRow].mtype);					
				if( TUString::StrAToI(pszMTypeString) )//悄悄话//m_pResponse->comments[i].mtype 
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_UserComment_QQH,FALSE);
				}
				else
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_Profile_None_Title,FALSE);
				}
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(16, 16);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(255, 0, 0));
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;



#if 1
			//创建TImage 头像
			m_obContrl[m_nCtlIDCount] =new TImage;		
			obBtnRec.SetRect(5,35+200*1,50,50);
			pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
				m_iaTImageID[0] = m_obContrl[m_nCtlIDCount]->GetId();//save TImage ID
				((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmap(pImgNormal);
				//((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmapByResId(APP_KA_ID_BITMAP_Default);
				m_obContrl[m_nCtlIDCount]->SetEnabled(TRUE);
				((TImage*)m_obContrl[m_nCtlIDCount])->SetTransVisible(TRUE);

				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

#else
			//创建图片按钮
			m_obContrl[m_nCtlIDCount] =new TButton ;	
			const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
			const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);

			obBtnRec.SetRect(5,35,50,50);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew))
			{
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				((TButton*)m_obContrl[m_nCtlIDCount])->SetStyles(BTN_STYLES_GRAPGICS);
				if (pImgNormal)
				{
					((TButton*)m_obContrl[m_nCtlIDCount])->SetImage(pImgNormal,0);
				}
				if (pImgDown)
				{
					((TButton*)m_obContrl[m_nCtlIDCount])->SetImage(pImgDown,1);
				}		

				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;
#endif

			//创建姓名标签 for comment username
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(65+10,35+200*1,20,60);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				m_obContrl[m_nCtlIDCount]->SetCaption(pszNameString,FALSE);//TResource::LoadConstString()TUSTR_Kx_UserComment_QQH
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(16, 16);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 0));
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

			//创建日期标签 for comment datetime
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(200,35+200*1,60,100);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				m_obContrl[m_nCtlIDCount]->SetCaption(pszDateTimeString,FALSE);//TResource::LoadConstString()TUSTR_Kx_UserComment_QQH
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(15, 15);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;


			//创建  TRichView for content
			m_obContrl[m_nCtlIDCount] =new TRichView;	
			obBtnRec.SetRect(65+10,35+30+200*1,235,60);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(12, 12);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(111, 0, 255));
				m_obContrl[m_nCtlIDCount]->SetCaption(pszContentString,FALSE);//TResource::LoadConstString()
				m_obContrl[m_nCtlIDCount]->SetFrameWidth(2);

				//m_obContrl[m_nCtlIDCount]->SetCharSet();
				((TRichView*)m_obContrl[m_nCtlIDCount])->SetScrollBarMode(CTL_SCL_MODE_VERTICAL);
				((TRichView*)m_obContrl[m_nCtlIDCount])->SetBorderStyle(bsSingle, FALSE);
				m_obContrl[m_nCtlIDCount]->Show(TRUE);	
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

#endif

#if 1
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(5,5,200+200*2,20);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{	
				TUChar pszMTypeString[32];

				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				TUString::StrUtf8ToStrUnicode(pszMTypeString , (const Char *)m_pResponse->comments[m_CurrSelRow].mtype);					
				if( TUString::StrAToI(pszMTypeString) )//悄悄话//m_pResponse->comments[i].mtype 
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_UserComment_QQH,FALSE);
				}
				else
				{
					m_obContrl[m_nCtlIDCount]->SetCaption(TUSTR_Kx_Profile_None_Title,FALSE);
				}
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(16, 16);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(255, 0, 0));
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;



#if 1
			//创建TImage 头像
			m_obContrl[m_nCtlIDCount] =new TImage;		
			obBtnRec.SetRect(5,35+200*2,50,50);
			pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
				m_iaTImageID[0] = m_obContrl[m_nCtlIDCount]->GetId();//save TImage ID
				((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmap(pImgNormal);
				//((TImage*)m_obContrl[m_nCtlIDCount])->SetBitmapByResId(APP_KA_ID_BITMAP_Default);
				m_obContrl[m_nCtlIDCount]->SetEnabled(TRUE);
				((TImage*)m_obContrl[m_nCtlIDCount])->SetTransVisible(TRUE);

				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

#else
			//创建图片按钮
			m_obContrl[m_nCtlIDCount] =new TButton ;	
			const TBitmap * pImgNormal = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);
			const TBitmap * pImgDown = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_Default);

			obBtnRec.SetRect(5,35,50,50);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew))
			{
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				((TButton*)m_obContrl[m_nCtlIDCount])->SetStyles(BTN_STYLES_GRAPGICS);
				if (pImgNormal)
				{
					((TButton*)m_obContrl[m_nCtlIDCount])->SetImage(pImgNormal,0);
				}
				if (pImgDown)
				{
					((TButton*)m_obContrl[m_nCtlIDCount])->SetImage(pImgDown,1);
				}		

				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;
#endif

			//创建姓名标签 for comment username
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(65+10,35+200*2,20,60);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				m_obContrl[m_nCtlIDCount]->SetCaption(pszNameString,FALSE);//TResource::LoadConstString()TUSTR_Kx_UserComment_QQH
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(16, 16);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(0, 0, 0));
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

			//创建日期标签 for comment datetime
			m_obContrl[m_nCtlIDCount] =new TLabel;		
			obBtnRec.SetRect(200,35+200*2,60,100);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();	

				m_obContrl[m_nCtlIDCount]->SetCaption(pszDateTimeString,FALSE);//TResource::LoadConstString()TUSTR_Kx_UserComment_QQH
				//自适应文字大小
				((TLabel*)m_obContrl[m_nCtlIDCount])->SetAutoSize(TRUE);
				//((TLabel*)m_obContrl[m_nCtlIDCount])->SetScrollMode(lsmSlide);

				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(15, 15);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);

				//设置颜色
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
				m_obContrl[m_nCtlIDCount]->Show(TRUE);		
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;


			//创建	TRichView for content
			m_obContrl[m_nCtlIDCount] =new TRichView;	
			obBtnRec.SetRect(65+10,35+30+200*2,235,60);
			if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew2))
			{		
				m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
				m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
				tFont = m_obContrl[m_nCtlIDCount]->GetFont();
				tFont.Create(12, 12);
				m_obContrl[m_nCtlIDCount]->SetFont(tFont);
				m_obContrl[m_nCtlIDCount]->SetColor(CTL_COLOR_TYPE_FORE, RGB(111, 0, 255));
				m_obContrl[m_nCtlIDCount]->SetCaption(pszContentString,FALSE);//TResource::LoadConstString()
				m_obContrl[m_nCtlIDCount]->SetFrameWidth(2);

				//m_obContrl[m_nCtlIDCount]->SetCharSet();
				((TRichView*)m_obContrl[m_nCtlIDCount])->SetScrollBarMode(CTL_SCL_MODE_VERTICAL);
				((TRichView*)m_obContrl[m_nCtlIDCount])->SetBorderStyle(bsSingle, FALSE);
				m_obContrl[m_nCtlIDCount]->Show(TRUE);	
			}
			else
			{
				bnRetCod++;
			}
			m_nCtlIDCount++;

#endif


		}


		//创建普通button: 回复
		m_obContrl[m_nCtlIDCount] =new TButton ;
		TRectangle obBtnRec(80,430,150,30);	
		if(m_obContrl[m_nCtlIDCount]->Create(pTPanelNew))
		{
			m_obContrl[m_nCtlIDCount]->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Reply),TRUE);
			m_obContrl[m_nCtlIDCount]->SetBounds(&obBtnRec);	
			// 保存控件ID，以便处理消息
			m_iaCreateCtlID[m_nCtlIDCount] = m_obContrl[m_nCtlIDCount]->GetId();
			m_nReplyBtnID = m_obContrl[m_nCtlIDCount]->GetId();//save reply button ID
			m_obContrl[m_nCtlIDCount]->Show(TRUE);		
		}
		else
		{
			bnRetCod++;
		}
		// 增加生成控件数量
		m_nCtlIDCount++;

		TButton* tbutton = static_cast< TButton* >(this->GetControlPtr(m_nReplyBtnID));
		if(tbutton) tbutton->Show(TRUE);

		pTPanelNew->Show(TRUE);
	}

	pTButton = static_cast< TButton* >(this->GetControlPtr(APP_KA_ID_CommentListForm_CommentImageBtn));
	pTButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Reply),FALSE);
	pTButton->Show(TRUE);


	m_nAppState = AppUserCommentReply;
	return bnRetCod;

}
void TUserCommentListForm::SetTitleString(AppCommentListType appCommentListType)
{
	TUChar sTitleString[32]= {0};

	switch(appCommentListType)
	{
	case ReceivedUserCommentList:
		{
			TUString::StrCopy(sTitleString,TResource::LoadConstString(APP_KA_ID_STRING_ReceivedUserCommentList));
			break;
		}
	case SentUserCommentList:
		{
			TUString::StrCopy(sTitleString,TResource::LoadConstString(APP_KA_ID_STRING_SentUserCommentList));
			break;
		}
	case ReceivedCommentList:
		{
			TUString::StrCopy(sTitleString,TResource::LoadConstString(APP_KA_ID_STRING_ReceivedCommentList));
			break;
		}
	case SentCommentList:
		{
			TUString::StrCopy(sTitleString,TResource::LoadConstString(APP_KA_ID_STRING_SentCommentList));
			break;
		}
	case FriendCommentList:
		{
			TUString::StrCopy(sTitleString,TResource::LoadConstString(APP_KA_ID_STRING_FriendsCommentList));
			break;
		}
	case ReceivedAnObjectCommentList:
		{
			TUString::StrCopy(sTitleString,TResource::LoadConstString(APP_KA_ID_STRING_ReceivedAnObjectCommentList));
			break;
		}			
	default:
		break;
	}
	SetAppTilte(this,0,sTitleString);
}

void TUserCommentListForm::SetCoolListNum(AppCommentListType appCommentListType)
{	
	int iRet = eFailed;

	switch(appCommentListType)
	{
	case ReceivedUserCommentList:
		{
			iRet = KaiXinAPI_JsonParse(KX_ReceivedUserCommentsList, (void **)&m_pResponse);
			break;
		}
	case SentUserCommentList:
		{
			iRet = KaiXinAPI_JsonParse(KX_SentUserCommentsList, (void **)&m_pResponse);
			break;
		}
	case ReceivedCommentList:
		{
			iRet = KaiXinAPI_JsonParse(KX_ReceivedCommentsList, (void **)&m_pResponse);			
			break;
		}
	case SentCommentList:
		{
			iRet = KaiXinAPI_JsonParse(KX_SentCommentsList, (void **)&m_pResponse);
			break;
		}
	case FriendCommentList:
		{
			iRet = KaiXinAPI_JsonParse(KX_FriendsCommentList, (void **)&m_pResponse);
			break;
		}
	case ReceivedAnObjectCommentList:
		{
			iRet = KaiXinAPI_JsonParse(KX_ReceivedAnObjectComments, (void **)&m_pResponse);
			break;
		}			

	default:
		break;
	}

	if(iRet == eSucceed)
	{
		m_nCommentListNum = m_pResponse->n;
	}

}
void TUserCommentListForm::ShowCommentDetail(AppCommentListType appCommentListType, Int32 nRowIndex)
{
	TUChar pszTotalString[32];

	TUString::StrIToA(pszTotalString , m_pResponse->comments[nRowIndex].cnum);

	switch(appCommentListType)
	{
	case ReceivedUserCommentList:
		{
			Set_Url_Params(KX_UserCommentDetail, "thread_cid", m_pResponse->comments[nRowIndex].thread_cid);
			//Set_Url_Params(KX_UserCommentDetail, "n", (char*)pszTotalString);
			//下载
			KaiXinAPICommon_Download(KX_UserCommentDetail, this->GetWindowHwndId());

			break;
		}
	case SentUserCommentList:
		{
			Set_Url_Params(KX_SentUserCommentDetail, "thread_cid", m_pResponse->comments[nRowIndex].thread_cid);
			//Set_Url_Params(KX_SentUserCommentDetail, "n", (char*)pszTotalString);		

			//下载
			KaiXinAPICommon_Download(KX_SentUserCommentDetail, this->GetWindowHwndId());

			break;
		}
	case ReceivedCommentList:
		{
#if 1 //for test Received An object comments list
			Set_Url_Params(KX_CommentDetail, "thread_cid", m_pResponse->comments[nRowIndex].thread_cid);
			//Set_Url_Params(KX_SentUserCommentDetail, "n", (char*)pszTotalString);		

			//下载
			KaiXinAPICommon_Download(KX_CommentDetail, this->GetWindowHwndId());
#else
			Set_Url_Params(KX_ReceivedAnObjectComments, "fuid", KaiXinUserInfo.uid);
			Set_Url_Params(KX_ReceivedAnObjectComments, "id", m_pResponse->comments[nRowIndex].id);		

			//下载
			KaiXinAPICommon_Download(KX_ReceivedAnObjectComments, this->GetWindowHwndId());			
#endif

			break;
		}
	case SentCommentList:
		{
			Set_Url_Params(KX_SentCommentDetail, "thread_cid", m_pResponse->comments[nRowIndex].thread_cid);
			//Set_Url_Params(KX_SentUserCommentDetail, "n", (char*)pszTotalString);		

			//下载
			KaiXinAPICommon_Download(KX_SentCommentDetail, this->GetWindowHwndId());				
			break;
		}
	case FriendCommentList:
		{
#if 0 //好友最新评论不看详情部分
			Set_Url_Params(KX_CommentDetail, "thread_cid", m_pResponse->comments[nRowIndex].thread_cid);		

			//下载
			KaiXinAPICommon_Download(KX_CommentDetail, this->GetWindowHwndId());	
#endif
			break;
		}		
	default:
		break;
	}


}

