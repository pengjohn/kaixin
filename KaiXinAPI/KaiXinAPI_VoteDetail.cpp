/*!
* \file	 KaiXinApp_VoteDetail.cpp
* \author	 GoZone
* \date	
* \brief  解析与UI: 投票详情
*
* \ref    CopyRight
* =======================================================================<br>
*          Copyright ? 2010-2012 GOZONE <br>
*                All Rights Reserved.<br>
* The file is generated by Kaixin_Component Wizard for Tranzda Mobile Platform <br>
* =======================================================================<br>
*/

#include "KaiXinAPICommon.h"

void* KaiXinAPI_VoteDetail_JsonParse(char *text)
{
	cJSON *json;
	cJSON *pTemp0;
	tResponseVoteDetail*  Response = new tResponseVoteDetail;
	memset(Response, 0 , sizeof(tResponseVoteDetail));

	json = cJSON_Parse(text);

	pTemp0 = cJSON_GetObjectItem(json,"ret");
	if (pTemp0)
	{
		Response->ret = pTemp0->valueint;	
	}

	//Success
	if(Response->ret == 1)
	{
		pTemp0 = cJSON_GetObjectItem(json, "uid");
		if(pTemp0)
		{
			Response->uid = pTemp0->valueint;
		}
		pTemp0 = cJSON_GetObjectItem(json, "fname");
		if(pTemp0)
		{
			STRCPY_Ex(Response->fname, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "ctime");
		if(pTemp0)
		{
			STRCPY_Ex(Response->ctime, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "endtime");
		if(pTemp0)
		{
			STRCPY_Ex(Response->endtime, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "title");
		if(pTemp0)
		{
			STRCPY_Ex(Response->title, pTemp0->valuestring);
		}
		pTemp0 = cJSON_GetObjectItem(json, "votenum");
		if(pTemp0)
		{
			//Response->votenum = pTemp0->valueint;
			STRCPY_Ex(Response->votenum, pTemp0->valuestring);
		}

		//limit
		pTemp0 = cJSON_GetObjectItem(json, "limitlist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_limitlist = nSize1;
			if( nSize1 != 0 )
			{
				Response->limitlist = NULL;
				Response->limitlist = (VoteDetail_limitlist*) malloc(sizeof( VoteDetail_limitlist ) * nSize1 );
				memset(Response->limitlist, 0 , sizeof(VoteDetail_limitlist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				//pTemp1 = cJSON_GetObjectItem(Item1, ""); 
				//if(pTemp1)
				{
					//STRCPY_Ex(Response->limitlist[i].limit, pTemp1->valuestring);
					STRCPY_Ex(Response->limitlist[i].limit, Item1->valuestring);//因为jason中 无对应的变量名
				}
			}
		}		

		pTemp0 = cJSON_GetObjectItem(json, "answerlist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_answerlist = nSize1;
			if( nSize1 != 0 )
			{
				Response->answerlist = NULL;
				Response->answerlist = (VoteDetail_answerlist*) malloc(sizeof( VoteDetail_answerlist ) * nSize1 );
				memset(Response->answerlist, 0 , sizeof(VoteDetail_answerlist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "answer");
				if(pTemp1)
				{
					STRCPY_Ex(Response->answerlist[i].answer, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "votenum");
				if(pTemp1)
				{
					STRCPY_Ex(Response->answerlist[i].votenum, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "votepercent");
				if(pTemp1)
				{
					Response->answerlist[i].votepercent = pTemp1->valueint;
				}

			}
		}		
		pTemp0 = cJSON_GetObjectItem(json, "resultlist");
		if(pTemp0)
		{
			int nSize1 = 0, i = 0;
			nSize1 = cJSON_GetArraySize(pTemp0);
			Response->nSize_resultlist = nSize1;
			if( nSize1 != 0 )
			{
				Response->resultlist = NULL;
				Response->resultlist = (VoteDetail_resultlist*) malloc(sizeof( VoteDetail_resultlist ) * nSize1 );
				memset(Response->resultlist, 0 , sizeof(VoteDetail_resultlist) * nSize1 );
			}
			for ( i = 0; i < nSize1; i++ )
			{
				cJSON *Item1 = NULL, *pTemp1 = NULL;
				Item1 = cJSON_GetArrayItem(pTemp0,i);
				pTemp1 = cJSON_GetObjectItem(Item1, "uid");
				if(pTemp1)
				{
					STRCPY_Ex(Response->resultlist[i].uid, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "fname");
				if(pTemp1)
				{
					STRCPY_Ex(Response->resultlist[i].fname, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "ctime");
				if(pTemp1)
				{
					STRCPY_Ex(Response->resultlist[i].ctime, pTemp1->valuestring);
				}
				pTemp1 = cJSON_GetObjectItem(Item1, "answer");
				if(pTemp1)
				{
					STRCPY_Ex(Response->resultlist[i].answer, pTemp1->valuestring);
				}

			}
		}
		pTemp0 = cJSON_GetObjectItem(json, "intro");
		if(pTemp0)
		{
			STRCPY_Ex(Response->intro, pTemp0->valuestring);
		}
	}
	//Failue
	else
	{
		//pTemp0 = cJSON_GetObjectItem(json,"msg");
		//if (pTemp0)
		//{
		//	strcpy(Response->msg, pTemp0 ->valuestring);	
		//}
	}
	cJSON_Delete(json);
	return Response;
}



// 构造函数
TVoteDetailForm::TVoteDetailForm(TApplication* pApp):TWindow(pApp)
{
	Create(APP_KA_ID_VoteDetailForm);
}

// 析构函数
TVoteDetailForm::~TVoteDetailForm(void)
{

}

// 窗口事件处理
Boolean TVoteDetailForm::EventHandler(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled = FALSE;

	switch (pEvent->eType)
	{
	case EVENT_WinInit:
		{
			_OnWinInitEvent(pApp, pEvent);
			bHandled = TRUE;
			break;
		}

	case EVENT_WinClose:
		{
			_OnWinClose(pApp, pEvent);
			break;
		}
	case EVENT_WinEraseClient:
		{
			TDC 	   dc(this);
			WinEraseClientEventType *pEraseEvent = reinterpret_cast< WinEraseClientEventType* >( pEvent );
			TRectangle rc(pEraseEvent->rc);
			TRectangle rcBack(5, 142, 310, 314);
			GetBounds(&rcBack);

			// 刷主窗口背景色
			dc.SetBackColor(RGB_COLOR_WHITE);


			// 擦除
			dc.EraseRectangle(&rc, 0);

			dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_title_bg), 0, 0, SCR_W,
				GUI_API_STYLE_ALIGNMENT_LEFT);

			//dc.DrawBitmapsH(TResource::LoadConstBitmap(APP_KA_ID_BITMAP_bottom_bg), 0, rcBack.Bottom()-44, 
			//320, GUI_API_STYLE_ALIGNMENT_LEFT|GUI_API_STYLE_ALIGNMENT_TOP); 


			pEraseEvent->result = 1;				
			bHandled = TRUE;
		}
		break;
	case EVENT_CtrlSelect:
		{
			bHandled = _OnCtrlSelectEvent(pApp, pEvent);
			break;
		}
	case MSG_DL_THREAD_NOTIFY:
		{
			NotifyMsgDataType notifyData;
			Sys_GetMessageBody((MESSAGE_t *)pEvent, &notifyData, sizeof(NotifyMsgDataType));						

			bHandled = TRUE;
			switch(notifyData.nAccessType)
			{
			case KX_PostVote:
				{
					int iRet = eFailed;
					tResponsePostVote* Response = NULL;

					iRet = KaiXinAPI_JsonParse(KX_PostVote, (void **)&Response);
					if(Response->ret == 1)
					{
						pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_Success), TResource::LoadConstString(APP_KA_ID_STRING_Vote),WMB_OK);
					}
					else
					{
						TUChar pszInfo[128] = {0};
						TUString::StrUtf8ToStrUnicode(pszInfo, (const Char *)Response->ErrorInfo);
						pApp->MessageBox(pszInfo,TResource::LoadConstString(APP_KA_ID_STRING_Vote),WMB_OK);	
					}

					if( Response )
					{
						delete Response;	
					}

					break;
				}		
			}

			break;	
		}
	case EVENT_KeyCommand: 
		{ 
			// 抓取右软键事件 
			if (pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_UP  
				|| pEvent->sParam1 == SYS_KEY_SOFTKEY_RIGHT_LONG) 
			{ 
				// 模拟退出按钮选中消息 
				HitControl(m_BackBtn); 
				bHandled = TRUE; 
			} 
		} 
		break;		
	default:
		break;
	}

	if (!bHandled)
	{
		bHandled = TWindow::EventHandler(pApp, pEvent);
	}

	return bHandled;
}

// 窗口初始化
Boolean TVoteDetailForm::_OnWinInitEvent(TApplication * pApp, EventType * pEvent)
{
	int iRet = eFailed;
	int nIndex = 0;
	TBarRowList *lpRowList = NULL;
	TRectangle Rc_CoolBarList;
	tResponseVoteDetail* Response = NULL;

	nVoteItemCount = 0; //记录投票真实个数
	nVoteLimitCount = 0;
	nVoteSelectedCount = 0;

	iRet = KaiXinAPI_JsonParse(KX_VoteDetail, (void **)&Response);	
	nVoteItemCount = (Response->nSize_answerlist<KX_VOTE_ITEM_COUNT_MAX)?Response->nSize_answerlist:KX_VOTE_ITEM_COUNT_MAX;

	m_BackBtn = SetAppBackButton(this);	
	SetAppTilte(this,APP_KA_ID_STRING_Vote);

	if(iRet == 1)
	{
		TBarRow *lpRow = NULL;
		TCoolBarList* pCoolBarList = static_cast<TCoolBarList*>(GetControlPtr(APP_KA_ID_VoteDetailForm_VoteDetailCoolBarList));
		if (pCoolBarList)
		{
			TBarListItem* lpItem = NULL;
			pCoolBarList->SetBounds(RC_LIST_NORMAL);	
			pCoolBarList->GetBounds(&Rc_CoolBarList);
			lpRowList = pCoolBarList->Rows();
			//add row
			if (lpRowList)
			{
				lpRowList->BeginUpdate();
				lpRowList->Clear();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate(); 

				//:TODO:Add Vote Subject info
				//add Item
				if(lpRow)
				{
					TFont objFontType;
					TRectangle rect;

					lpItem = lpRow->AppendItem();
					if(lpItem)
					{					
						TUChar pszTitle[128] = {0};
						TUChar pszName[64] = {0};
						TUChar pszStartTime[32] = {0};						
						TUChar pszEndTime[32] = {0};
						TUChar pszTemp[32] = {0};
						TUChar pszLimit[32*10] = {0};//暂时假设最多有10条limit字串

						TUChar MsgInfo[32+1] = {0};

						Int32 ItemHeight = 0;
						TRectangle Rc_Temp;

						lpItem->GetBounds(rect);
						lpItem->SetCaption(NULL);                       
						lpItem->SetIndicatorType(itNone);
						lpItem->SetEnabled(FALSE);
	
						if(Response->nSize_limitlist != 0)
						{
							TUString::StrCat(pszLimit, TUSTR_Kx_Left_Parenthesis);
							for(int i = 0; i < Response->nSize_limitlist; i++)
							{
								TUString::StrUtf8ToStrUnicode(pszTemp, (const Char *)Response->limitlist[i].limit);
								TUString::StrCat(pszLimit,pszTemp);
							}
							TUString::StrCat(pszLimit, TUSTR_Kx_Right_Parenthesis);
							nVoteLimitCount = _GetLimitCount(pszLimit);					
						}
						else
						{
							nVoteLimitCount = 1;//limitlist为NULL时，表示单选
						}



						TUString::StrUtf8ToStrUnicode(pszTitle, (const Char *)Response->title);
						//TUString::StrCat(pszTitle,pszLimit);//title 后面 需要加上限制字串

						Int32 nTitleId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
						TRichView* pTitle = static_cast<TRichView*>(GetControlPtr(nTitleId));
						TRectangle Rc_Title(10, rect.Y() - Rc_CoolBarList.Y() + 10, SCR_W- 40, FONT_TITLE+4);
						pTitle->SetBounds(&Rc_Title);
						pTitle->SetWordWrapAttr(TRUE);
						objFontType = pTitle->GetFont();
						objFontType.Create(FONT_TITLE, FONT_TITLE,FONT_STYLE_BOLD);
						pTitle->SetFont(objFontType); 
						pTitle->SetCaption(pszTitle,FALSE);
						pTitle->SetWordWrapAttr(TRUE);
						pTitle->SetTransparent(TRUE);
						pTitle->SetEnabled(FALSE);
						pTitle->SetScrollBarMode(CTL_SCL_MODE_NONE);
						pTitle->SetMaxVisibleLines(pTitle->GetLinesCount(), TRUE);
						pTitle->GetBounds(&Rc_Temp);

						ItemHeight = ItemHeight + Rc_Temp.Height()+ 10;

						if(Response->nSize_limitlist != 0)
						{
							//title后面加一个控件 用来显示限制字串
							Int32 nLimitId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 20, 5);
							TRichView* pLimit = static_cast<TRichView*>(GetControlPtr(nLimitId));
							TRectangle Rc_Limit(10, ItemHeight + rect.Y() - Rc_CoolBarList.Y(), SCR_W - 40, FONT_TITLE + 4);
							pLimit->SetBounds(&Rc_Limit);
							pLimit->SetWordWrapAttr(TRUE);
							objFontType = pLimit->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO,FONT_STYLE_BOLD);
							pLimit->SetFont(objFontType); 
							pLimit->SetCaption(pszLimit,FALSE);
							pLimit->SetWordWrapAttr(TRUE);
							pLimit->SetTransparent(TRUE);
							pLimit->SetEnabled(FALSE);
							pLimit->SetColor(CTL_COLOR_TYPE_FORE,GRAY);
							pLimit->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pLimit->SetMaxVisibleLines(pLimit->GetLinesCount(), TRUE);
							pLimit->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height() + 10;						
						}
						else
						{
							ItemHeight = ItemHeight + 10;
						}

						//投票发起人
						TUChar pszFirstVoter[64] = {0};
						Int32 nFriendlabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pFriendlabel = static_cast<TLabel*>(GetControlPtr(nFriendlabelId));
						TRectangle Rc_Friendlabel(10, ItemHeight, SCR_W - 40, FONT_OTHER_INFO + 8);
						pFriendlabel->SetBounds(&Rc_Friendlabel);
						objFontType = pFriendlabel->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pFriendlabel->SetFont(objFontType); 
						TUString::StrCat(pszFirstVoter, TResource::LoadConstString(APP_KA_ID_STRING_FirstVoter));
						TUString::StrCat(pszFirstVoter, TUSTR_Kx_Colon);
						TUString::StrCat(pszFirstVoter, TUSTR_Kx_Empty_Cell);
						pFriendlabel->SetCaption(pszFirstVoter,FALSE);


						TUString::StrUtf8ToStrUnicode(pszName, (const Char *)Response->fname);
						Int32 nFriendId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pFriend = static_cast<TLabel*>(GetControlPtr(nFriendId));
						TRectangle Rc_Friend(70, ItemHeight, SCR_W - 120, FONT_OTHER_INFO + 8);
						pFriend->SetBounds(&Rc_Friend);
						objFontType = pFriend->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pFriend->SetFont(objFontType);
						pFriend->SetColor(CTL_COLOR_TYPE_FORE,BLUE);
						pFriend->SetCaption(pszName,FALSE);

						ItemHeight = ItemHeight + 20;

						//发起时间
						TUChar pszVoteStartTime[64] = {0};
						Int32 nVoteStartlabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pVoteStartlabel = static_cast<TLabel*>(GetControlPtr(nVoteStartlabelId));
						TRectangle Rc_VoteStartlabel(10, ItemHeight, SCR_W - 40, FONT_OTHER_INFO+8);
						pVoteStartlabel->SetBounds(&Rc_VoteStartlabel);
						objFontType = pVoteStartlabel->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pVoteStartlabel->SetFont(objFontType); 
						TUString::StrCat(pszVoteStartTime, TResource::LoadConstString(APP_KA_ID_STRING_VoteStartTime));
						TUString::StrCat(pszVoteStartTime, TUSTR_Kx_Colon);
						TUString::StrCat(pszVoteStartTime, TUSTR_Kx_Empty_Cell);
						pVoteStartlabel->SetCaption(pszVoteStartTime,FALSE);


						TUString::StrUtf8ToStrUnicode(pszStartTime, (const Char *)Response->ctime);
						Int32 nVoteStartTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pVoteStartTime = static_cast<TLabel*>(GetControlPtr(nVoteStartTimeId));
						TRectangle Rc_VoteStartTime(100, ItemHeight, SCR_W - 150, 20);
						pVoteStartTime->SetBounds(&Rc_VoteStartTime);
						objFontType = pVoteStartTime->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pVoteStartTime->SetFont(objFontType); 
						pVoteStartTime->SetColor(CTL_COLOR_TYPE_FORE,COLOR_DATE_TIME);
						pVoteStartTime->SetCaption(pszStartTime,FALSE);

						ItemHeight = ItemHeight + 20;

						//截止时间
						TUChar pszVoteEndTime[64] = {0};
						Int32 nVoteEndId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pVoteEndlabel = static_cast<TLabel*>(GetControlPtr(nVoteEndId));
						TRectangle Rc_VoteEndlabel(10, ItemHeight, 280, 20);
						pVoteEndlabel->SetBounds(&Rc_VoteEndlabel);
						objFontType = pVoteEndlabel->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pVoteEndlabel->SetFont(objFontType); 
						TUString::StrCat(pszVoteEndTime, TResource::LoadConstString(APP_KA_ID_STRING_VoteEndTime));
						//TUString::StrCat(pszVoteEndTime, (const TUChar*)L": ");
						TUString::StrCat(pszVoteEndTime, TUSTR_Kx_Colon);
						TUString::StrCat(pszVoteEndTime, TUSTR_Kx_Empty_Cell);
						pVoteEndlabel->SetCaption(pszVoteEndTime,FALSE);

						TUString::StrUtf8ToStrUnicode(pszEndTime, (const Char *)Response->endtime);
						Int32 nVoteEndTimeId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pVoteEndTime = static_cast<TLabel*>(GetControlPtr(nVoteEndTimeId));
						TRectangle Rc_VoteEndTime(100, ItemHeight, SCR_W - 150, FONT_OTHER_INFO+8);
						pVoteEndTime->SetBounds(&Rc_VoteEndTime);
						objFontType = pVoteEndTime->GetFont();
						objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
						pVoteEndTime->SetFont(objFontType); 
						pVoteEndTime->SetCaption(pszEndTime,FALSE);
						
						ItemHeight = ItemHeight + 20;

						//投票详细说明
						if(strlen(Response->intro) > 0)
						{
							TUChar pszIntro[1024] = {0};
							TRectangle obBtnRec(0,0,0,0);
							Int32 nRichViewId = lpItem->AddCtrl(CTL_CLASS_RICHVIEW, 0, 0);
							TRichView* pRichView = static_cast<TRichView*>(GetControlPtr(nRichViewId));
							ItemHeight = ItemHeight + 10;
							obBtnRec.SetRect(10, ItemHeight, SCR_W - 40, 20);
							pRichView->SetBounds(&obBtnRec);
							objFontType = pRichView->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pRichView->SetFont(objFontType); 
							pRichView->SetColor(CTL_COLOR_TYPE_FORE, RGB_COLOR_GRAY);
							
							TUString::StrUtf8ToStrUnicode(pszIntro, (const Char *)Response->intro);
							pRichView->SetCaption(pszIntro,FALSE);

							pRichView->SetEnabled(FALSE);
							pRichView->SetWordWrapAttr(TRUE);
							pRichView->SetTransparent(TRUE);
							pRichView->SetScrollBarMode(CTL_SCL_MODE_NONE);
							pRichView->SetMaxVisibleLines(pRichView->GetLinesCount(), TRUE);
							pRichView->GetBounds(&Rc_Temp);

							ItemHeight = ItemHeight + Rc_Temp.Height();
						}
#if 0
						//已投票数
						Int32 nReadlabelId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pReadlabel = static_cast<TLabel*>(GetControlPtr(nReadlabelId));
						TRectangle Rc_Readlabel(10, ItemHeight, 280, 20);
						pReadlabel->SetBounds(&Rc_Readlabel);
						objFontType = pReadlabel->GetFont();
						objFontType.Create(12, 12);
						pReadlabel->SetFont(objFontType); 
						pReadlabel->SetCaption(L"已投票数:",FALSE);

						TUString::StrPrintF(pszVoteNum, TResource::LoadConstString(APP_KA_ID_STRING_Repaste_CountInfo_Int),Response->votenum);
						Int32 nReadCountId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
						TLabel* pReadCount = static_cast<TLabel*>(GetControlPtr(nReadCountId));
						TRectangle Rc_ReadCount(70, ItemHeight, 200, 20);
						pReadCount->SetBounds(&Rc_ReadCount);
						objFontType = pReadCount->GetFont();
						objFontType.Create(12, 12);
						pReadCount->SetFont(objFontType); 
						pReadCount->SetCaption(pszVoteNum,FALSE);

						ItemHeight = ItemHeight + 20;
#endif

						lpItem->SetHeight(ItemHeight);
					}				
				}

				//:TODO:Show Vote Content
				lpRowList->BeginUpdate();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate();
				//add Item
				if(lpRow)
				{
					TFont objFontType;
					TRectangle rect;
					//Int32 ItemHeight = 0;
					TRectangle Rc_Temp;

					TUChar pszTotalVoteNum[32] = {0};
					TUChar pszTemp[32] = {0};
					TUString::StrCat(pszTotalVoteNum, TResource::LoadConstString(APP_KA_ID_STRING_VoteNum));
					//TUString::StrCat(pszTotalVoteNum, (const TUChar*)L": ");
					TUString::StrCat(pszTotalVoteNum, TUSTR_Kx_Colon);
					TUString::StrCat(pszTotalVoteNum, TUSTR_Kx_Empty_Cell);
					TUString::StrUtf8ToStrUnicode(pszTemp, (Char*)Response->votenum);
					TUString::StrCat(pszTotalVoteNum,pszTemp);
					lpRow->SetCaptionFont(miniFont);
					lpRow->SetCaption(pszTotalVoteNum);					

					nVoteItemCount = (Response->nSize_answerlist<KX_VOTE_ITEM_COUNT_MAX)?Response->nSize_answerlist:KX_VOTE_ITEM_COUNT_MAX;
					for(int i=0; i < nVoteItemCount; i++)
					{				
						TUChar pszInfo[128] = {0};
						TUChar MsgInfo[64] = {0};						
						TUChar pszVoteNum[16] = {0};

						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							Int32 ItemHeight = 0;

							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);                       
							lpItem->SetIndicatorType(itNone);
							ItemHeight = rect.Y() - Rc_CoolBarList.Y() + 10;

							TUString::StrUtf8ToStrUnicode(pszInfo, (const Char *)Response->answerlist[i].answer);
							Int32 nAnswerId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pAnswer = static_cast<TLabel*>(GetControlPtr(nAnswerId));
							TRectangle Rc_Answer(10, ItemHeight, 280, 20);
							pAnswer->SetBounds(&Rc_Answer);
							objFontType = pAnswer->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pAnswer->SetFont(objFontType); 
							pAnswer->SetCaption(pszInfo,FALSE);
							pAnswer->SetTransparent(TRUE);
							pAnswer->SetEnabled(FALSE);						
							ItemHeight = ItemHeight + 22;

							Int32 nProgressId = lpItem->AddCtrl(CTL_CLASS_PROGRESSBAR, 20, 5);
							TProgressBar* pProgress = static_cast<TProgressBar*>(GetControlPtr(nProgressId));
							TRectangle Rc_Progress(10, ItemHeight, (SCR_W-10)/2, 10);
							pProgress->SetBounds(&Rc_Progress);
							pProgress->SetSmooth(TRUE, TRUE);
							pProgress->SetTransparent(TRUE);
							pProgress->SetEnabled(FALSE);
							pProgress->SetParams((const Int32)Response->answerlist[i].votepercent, 0, 100, TRUE);

							TUString::StrUtf8ToStrUnicode(pszVoteNum, (const Char *)Response->answerlist[i].votenum);
							//TUString::StrPrintF(MsgInfo, (TUChar*)L"%s(%d%%)",pszVoteNum,Response->answerlist[i].votepercent);
							TUString::StrPrintF(MsgInfo, TUSTR_Kx_Progress_Percent,pszVoteNum,Response->answerlist[i].votepercent);
							Int32 nPercentId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pPercent = static_cast<TLabel*>(GetControlPtr(nPercentId));
							TRectangle Rc_Percent((SCR_W/2 + 15), ItemHeight - 3, (SCR_W-10)/2, FONT_OTHER_INFO+8);
							pPercent->SetBounds(&Rc_Percent);
							objFontType = pPercent->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pPercent->SetFont(objFontType);
							pPercent->SetTransparent(TRUE);
							pPercent->SetEnabled(FALSE);
							pPercent->SetCaption(MsgInfo,FALSE);

							//被选中提示图标，默认为不可视，当该项被选中时显示该提示图标
							nVoteSelectedImgId[i] = lpItem->AddCtrl(CTL_CLASS_IMAGE, 0, 0); 							
							const TBitmap * pBmp = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_votemark);
							TImage* pImage1 = static_cast<TImage*>(GetControlPtr(nVoteSelectedImgId[i]));
							TRectangle Rc_Icon(SCR_W - 45, ItemHeight-5, pBmp->GetWidth(), pBmp->GetHeight());//17, 13
							pImage1->SetBounds(&Rc_Icon);
							pImage1->SetBitmap(pBmp);
							pImage1->Hide(TRUE);//默认为隐藏

							ItemHeight = ItemHeight + 10;
							lpItem->SetHeight(55);
						}

					}

					lpItem = lpRow->AppendItem();//增加一个item 放置投票按钮
					if(lpItem)
					{	
						Int32 ItemHeight = 0;
						lpItem->GetBounds(rect);

						ItemHeight = rect.Y() - Rc_CoolBarList.Y() + 10;
						nVoteButtonId = lpItem->AddCtrl(CTL_CLASS_BUTTON, 20, 5);
						TButton* pVoteButton = static_cast<TButton*>(GetControlPtr(nVoteButtonId));
						TRectangle Rc_VoteButton((SCR_W - 292 -20)/2, rect.Y() - Rc_CoolBarList.Y() + 5, 292, 42);
						pVoteButton->SetBounds(&Rc_VoteButton);
						objFontType = pVoteButton->GetFont();
						objFontType.Create(FONT_LARGE_BUTTON_CAPTION, FONT_LARGE_BUTTON_CAPTION);
						pVoteButton->SetFont(objFontType);
						pVoteButton->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_Vote), FALSE);
						pVoteButton->GetBounds(&Rc_Temp);
						pVoteButton->SetEnabled(FALSE);//只有选择了投票选项之后，才变成可用

						//设置按钮图片
						const TBitmap * pImg = TResource::LoadConstBitmap(APP_KA_ID_BITMAP_votebutton);
						if (pImg)
						{					
							pVoteButton->SetImage(pImg,0);
							pVoteButton->SetImage(pImg,1);
						}


						ItemHeight = ItemHeight+Rc_Temp.Height()+ 10;	
						lpItem->SetHeight(50);
					}
				}


				//好友观点
				lpRowList->BeginUpdate();
				lpRow = lpRowList->AppendRow();
				lpRowList->EndUpdate();
				//add Item
				if(lpRow)
				{
					TUChar MsgInfo[128]={0};
					lpRow->SetCaption(TResource::LoadConstString(APP_KA_ID_STRING_FriendsVoteInfo));
					lpRow->SetCaptionFont(miniFont);

					for(int i=0; i < Response->nSize_resultlist; i++)
					{
						TFont objFontType;
						Int32 ItemHeight = 0;
						TRectangle rect;
						TRectangle Rc_Temp;
						TUChar pszName[32] = {0};
						TUChar pszAnswer[64] = {0};

						lpItem = lpRow->AppendItem();
						if(lpItem)
						{
							lpItem->GetBounds(rect);
							lpItem->SetCaption(NULL);						
							lpItem->SetIndicatorType(itNone);
							ItemHeight = rect.Y() - Rc_CoolBarList.Y() + 10;

							TUString::StrUtf8ToStrUnicode(pszName, (const Char *)Response->resultlist[i].fname);
							Int32 nNameId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pName = static_cast<TLabel*>(GetControlPtr(nNameId));
							TRectangle Rc_Name(10, ItemHeight, TUString::StrLen(pszName)*FONT_OTHER_INFO, FONT_OTHER_INFO+4);
							pName->SetBounds(&Rc_Name);
							objFontType = pName->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pName->SetFont(objFontType);
							pName->SetColor(CTL_COLOR_TYPE_FORE,BLUE);
							pName->SetCaption(pszName,FALSE);

							TUString::StrUtf8ToStrUnicode(pszAnswer, (const Char *)Response->resultlist[i].answer);
							TUString::StrPrintF(MsgInfo, TResource::LoadConstString(APP_KA_ID_STRING_Repaste_Vote_Answer_Info),pszAnswer);
							Int32 nAnswerId = lpItem->AddCtrl(CTL_CLASS_LABEL, 20, 5);
							TLabel* pAnswer = static_cast<TLabel*>(GetControlPtr(nAnswerId));
							TRectangle Rc_Answer(10 + TUString::StrLen(pszName)*FONT_OTHER_INFO, ItemHeight, SCR_W - 40 - TUString::StrLen(pszName)*FONT_OTHER_INFO, FONT_OTHER_INFO+4);
							pAnswer->SetBounds(&Rc_Answer);
							objFontType = pAnswer->GetFont();
							objFontType.Create(FONT_OTHER_INFO, FONT_OTHER_INFO);
							pAnswer->SetFont(objFontType);
							pAnswer->SetTransparent(TRUE);
							pAnswer->SetEnabled(FALSE);
							pAnswer->SetCaption(MsgInfo,FALSE);

							lpItem->SetHeight(COOLBAR_LIST_HEIGHT);
						}
					}
				}

			}
		}
	}

	if( Response )
	{
		delete Response;	
	}
	return TRUE;
}

// 关闭窗口时，保存设置信息
Boolean TVoteDetailForm::_OnWinClose(TApplication * pApp, EventType * pEvent)
{
	return TRUE;
}


// 控件点击事件处理
Boolean TVoteDetailForm::_OnCtrlSelectEvent(TApplication * pApp, EventType * pEvent)
{
	Boolean bHandled;

	bHandled = FALSE;

	if(m_BackBtn == pEvent->sParam1)
	{
		bHandled = TRUE; 
		this->CloseWindow();

		return bHandled;
	}

	if(pEvent->sParam1 == this->nVoteButtonId)
	{
		TUChar pszAnswernum[KX_VOTE_ITEM_COUNT_MAX]={0};
		TUChar pszTemp[32]={0};		
		Char pAnswernum[KX_VOTE_ITEM_COUNT_MAX*32]={0};
		int selectItemCount = 0;

		for(int i = 0; i<this->nVoteItemCount; i++)
		{
			if(IsVoteItemSelected[i] == TRUE)//如果有被选中的项，则取item 对应的answernum 放入参数中
			{
				if(selectItemCount != 0)
				{
					TUString::StrCat(pszAnswernum, TUSTR_Kx_Comma);//(const TUChar*)L","			
				}
				TUString::StrIToA( pszTemp, i+1);//answernum从1开始
				TUString::StrCat(pszAnswernum,pszTemp);
				selectItemCount++;
			}
		}	
		TUString::StrUnicodeToStrUtf8( pAnswernum, pszAnswernum);

		char* szVid = NULL; 									
		szVid = (char*)malloc(32);
		memset(szVid, 0, sizeof(32));

		Get_Url_Params(KX_VoteDetail, "vid", &szVid);	
		Set_Url_Params(KX_PostVote, "vid", (char*)szVid);
		Set_Url_Params(KX_PostVote, "vote", (char*)pAnswernum);

		KaiXinAPICommon_Download(KX_PostVote, this->GetWindowHwndId());

		free(szVid);
	}
	else
	{
		switch(pEvent->sParam1)
		{
		case APP_KA_ID_VoteDetailForm_VoteDetailCoolBarList:
			{ 
				TBarRow *pRow = reinterpret_cast< TBarRow* > ( pEvent->sParam2 ); 
				switch( pRow->GetIndex() ) 
				{ 
				case 1: //投票条目
					{
						int iRet = eFailed;
						TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
						int ItemIndex = pItem->GetIndex();

						tResponseVoteDetail* Response = NULL;
						iRet = KaiXinAPI_JsonParse(KX_VoteDetail, (void **)&Response);
						if(iRet == 1)
						{
							TImage* pTImage = static_cast< TImage* >(this->GetControlPtr(nVoteSelectedImgId[ItemIndex]));
							if(pTImage)
							{
								if(pTImage->IsVisible())
								{
									pTImage->Hide(TRUE);
									IsVoteItemSelected[ItemIndex] = FALSE;
									this->nVoteSelectedCount = this->nVoteSelectedCount-1;
								}
								else
								{
									if(nVoteSelectedCount < nVoteLimitCount)
									{
										pTImage->Show(TRUE);
										IsVoteItemSelected[ItemIndex] = TRUE;
										this->nVoteSelectedCount = this->nVoteSelectedCount+1;
									}
									else
									{
										if(Response->nSize_limitlist != 0)
										{
											TUChar pszInfo[128] = {0};
											TUString::StrUtf8ToStrUnicode(pszInfo, (const Char *)Response->limitlist[0].limit);//目前只取到一串
											pApp->MessageBox(pszInfo, TResource::LoadConstString(APP_KA_ID_STRING_Vote),WMB_OK);
										}
										else
										{
											pApp->MessageBox(TResource::LoadConstString(APP_KA_ID_STRING_OnlyCanSelectOneItem), TResource::LoadConstString(APP_KA_ID_STRING_Vote),WMB_OK);
										}
									}
								}
							}

							//如果有被选中的项，则投票按钮办成可用
							TButton* pVoteBtn = static_cast<TButton*>(GetControlPtr(this->nVoteButtonId));
							if(pVoteBtn)
							{
								if(nVoteSelectedCount > 0)
								{
									pVoteBtn->SetEnabled(TRUE);
								}
								else
								{
									pVoteBtn->SetEnabled(FALSE);
								}
							}					
						}
						if( Response )
						{
							delete Response;	
						}

						bHandled = TRUE;
					} 
					break;

				case 2://好友观点
					{
						int iRet = eFailed;
						TBarListItem *pItem = reinterpret_cast < TBarListItem* >( pEvent->lParam3 ); 
						int ResultIndex = pItem->GetIndex();

						tResponseRepasteDetail* Response = NULL;
						iRet = KaiXinAPI_JsonParse(KX_RepasteDetail, (void **)&Response);
						if(iRet == 1)
						{
							//:TODO:点击好友的名字，进入对于的下一个界面
							//Response->resultlist[ResultIndex].uid

						}
						if( Response )
						{
							delete Response;	
						}
						bHandled = TRUE;
					}
					break;

				default:
					break;
				} 
				bHandled = TRUE; 
			} 
			break;

		default:
			break;
		}

	}
	return bHandled;
}

Int32 TVoteDetailForm::_GetLimitCount(TUChar* pLimit)
{
	TUChar pszTemp[32]={0};

	for(int i = this->nVoteItemCount; i > 0; i--)//例如有10个item，那么从10开始匹配，找不到10是,才去找1, 若找到10则不用再继续往下找了
	{
		TUString::StrIToA(pszTemp,i);
		if(TUString::StrStr(pLimit,pszTemp))
		{
			return i;
			break;
		}
	}

	//什么都没找到 说明没有限制
	return this->nVoteItemCount;
}

